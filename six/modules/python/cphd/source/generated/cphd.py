# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cphd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cphd')
    _cphd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cphd', [dirname(__file__)])
        except ImportError:
            import _cphd
            return _cphd
        try:
            _mod = imp.load_module('_cphd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cphd = swig_import_helper()
    del swig_import_helper
else:
    import _cphd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _cphd.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _cphd.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _cphd.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _cphd.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _cphd.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cphd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import coda.coda_sys
import coda.coda_types
import coda.mem
import pysix.six_sicd
import coda.math_poly
import coda.math_linear
import coda.coda_except
import pysix.six_base
import pysix.scene
import coda.coda_io
class SampleType(_object):
    """Proxy of C++ cphd::SampleType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleType, name)
    __repr__ = _swig_repr
    RE32F_IM32F = _cphd.SampleType_RE32F_IM32F
    RE16I_IM16I = _cphd.SampleType_RE16I_IM16I
    RE08I_IM08I = _cphd.SampleType_RE08I_IM08I
    NOT_SET = _cphd.SampleType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SampleType self) -> SampleType
        __init__(cphd::SampleType self, std::string const & s) -> SampleType
        __init__(cphd::SampleType self, int i) -> SampleType
        """
        this = _cphd.new_SampleType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        """toString(SampleType self) -> std::string"""
        return _cphd.SampleType_toString(self)


    def __eq__(self, *args):
        """
        __eq__(SampleType self, SampleType o) -> bool
        __eq__(SampleType self, int const & o) -> bool
        """
        return _cphd.SampleType___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(SampleType self, SampleType o) -> bool
        __ne__(SampleType self, int const & o) -> bool
        """
        return _cphd.SampleType___ne__(self, *args)


    def __lt__(self, o):
        """__lt__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___lt__(self, o)


    def __gt__(self, o):
        """__gt__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___gt__(self, o)


    def __le__(self, o):
        """__le__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___le__(self, o)


    def __ge__(self, o):
        """__ge__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SampleType_value_set
    __swig_getmethods__["value"] = _cphd.SampleType_value_get
    if _newclass:
        value = _swig_property(_cphd.SampleType_value_get, _cphd.SampleType_value_set)
    __swig_destroy__ = _cphd.delete_SampleType
    __del__ = lambda self: None
SampleType_swigregister = _cphd.SampleType_swigregister
SampleType_swigregister(SampleType)
cvar = _cphd.cvar
NOT_SET_VALUE = cvar.NOT_SET_VALUE

class DomainType(_object):
    """Proxy of C++ cphd::DomainType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DomainType, name)
    __repr__ = _swig_repr
    FX = _cphd.DomainType_FX
    TOA = _cphd.DomainType_TOA
    NOT_SET = _cphd.DomainType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::DomainType self) -> DomainType
        __init__(cphd::DomainType self, std::string const & s) -> DomainType
        __init__(cphd::DomainType self, int i) -> DomainType
        """
        this = _cphd.new_DomainType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        """toString(DomainType self) -> std::string"""
        return _cphd.DomainType_toString(self)


    def __eq__(self, *args):
        """
        __eq__(DomainType self, DomainType o) -> bool
        __eq__(DomainType self, int const & o) -> bool
        """
        return _cphd.DomainType___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(DomainType self, DomainType o) -> bool
        __ne__(DomainType self, int const & o) -> bool
        """
        return _cphd.DomainType___ne__(self, *args)


    def __lt__(self, o):
        """__lt__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___lt__(self, o)


    def __gt__(self, o):
        """__gt__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___gt__(self, o)


    def __le__(self, o):
        """__le__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___le__(self, o)


    def __ge__(self, o):
        """__ge__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.DomainType_value_set
    __swig_getmethods__["value"] = _cphd.DomainType_value_get
    if _newclass:
        value = _swig_property(_cphd.DomainType_value_get, _cphd.DomainType_value_set)
    __swig_destroy__ = _cphd.delete_DomainType
    __del__ = lambda self: None
DomainType_swigregister = _cphd.DomainType_swigregister
DomainType_swigregister(DomainType)

class PhaseSGN(_object):
    """Proxy of C++ cphd::PhaseSGN class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhaseSGN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhaseSGN, name)
    __repr__ = _swig_repr
    MINUS_1 = _cphd.PhaseSGN_MINUS_1
    PLUS_1 = _cphd.PhaseSGN_PLUS_1
    NOT_SET = _cphd.PhaseSGN_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::PhaseSGN self) -> PhaseSGN
        __init__(cphd::PhaseSGN self, std::string const & s) -> PhaseSGN
        __init__(cphd::PhaseSGN self, int i) -> PhaseSGN
        """
        this = _cphd.new_PhaseSGN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        """toString(PhaseSGN self) -> std::string"""
        return _cphd.PhaseSGN_toString(self)


    def __eq__(self, *args):
        """
        __eq__(PhaseSGN self, PhaseSGN o) -> bool
        __eq__(PhaseSGN self, int const & o) -> bool
        """
        return _cphd.PhaseSGN___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(PhaseSGN self, PhaseSGN o) -> bool
        __ne__(PhaseSGN self, int const & o) -> bool
        """
        return _cphd.PhaseSGN___ne__(self, *args)


    def __lt__(self, o):
        """__lt__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___lt__(self, o)


    def __gt__(self, o):
        """__gt__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___gt__(self, o)


    def __le__(self, o):
        """__le__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___le__(self, o)


    def __ge__(self, o):
        """__ge__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.PhaseSGN_value_set
    __swig_getmethods__["value"] = _cphd.PhaseSGN_value_get
    if _newclass:
        value = _swig_property(_cphd.PhaseSGN_value_get, _cphd.PhaseSGN_value_set)
    __swig_destroy__ = _cphd.delete_PhaseSGN
    __del__ = lambda self: None
PhaseSGN_swigregister = _cphd.PhaseSGN_swigregister
PhaseSGN_swigregister(PhaseSGN)

class SRPType(_object):
    """Proxy of C++ cphd::SRPType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SRPType, name)
    __repr__ = _swig_repr
    FIXEDPT = _cphd.SRPType_FIXEDPT
    PVTPOLY = _cphd.SRPType_PVTPOLY
    PVVPOLY = _cphd.SRPType_PVVPOLY
    STEPPED = _cphd.SRPType_STEPPED
    NOT_SET = _cphd.SRPType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SRPType self) -> SRPType
        __init__(cphd::SRPType self, std::string const & s) -> SRPType
        __init__(cphd::SRPType self, int i) -> SRPType
        """
        this = _cphd.new_SRPType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        """toString(SRPType self) -> std::string"""
        return _cphd.SRPType_toString(self)


    def __eq__(self, *args):
        """
        __eq__(SRPType self, SRPType o) -> bool
        __eq__(SRPType self, int const & o) -> bool
        """
        return _cphd.SRPType___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(SRPType self, SRPType o) -> bool
        __ne__(SRPType self, int const & o) -> bool
        """
        return _cphd.SRPType___ne__(self, *args)


    def __lt__(self, o):
        """__lt__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___lt__(self, o)


    def __gt__(self, o):
        """__gt__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___gt__(self, o)


    def __le__(self, o):
        """__le__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___le__(self, o)


    def __ge__(self, o):
        """__ge__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SRPType_value_set
    __swig_getmethods__["value"] = _cphd.SRPType_value_get
    if _newclass:
        value = _swig_property(_cphd.SRPType_value_get, _cphd.SRPType_value_set)
    __swig_destroy__ = _cphd.delete_SRPType
    __del__ = lambda self: None
SRPType_swigregister = _cphd.SRPType_swigregister
SRPType_swigregister(SRPType)

class FileHeader(_object):
    """Proxy of C++ cphd::FileHeader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::FileHeader self) -> FileHeader"""
        this = _cphd.new_FileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isCPHD(inStream):
        """isCPHD(SeekableInputStream inStream) -> bool"""
        return _cphd.FileHeader_isCPHD(inStream)

    isCPHD = staticmethod(isCPHD)

    def readVersion(inStream):
        """readVersion(SeekableInputStream inStream) -> std::string"""
        return _cphd.FileHeader_readVersion(inStream)

    readVersion = staticmethod(readVersion)

    def read(self, inStream):
        """read(FileHeader self, SeekableInputStream inStream)"""
        return _cphd.FileHeader_read(self, inStream)


    def toString(self):
        """toString(FileHeader self) -> std::string"""
        return _cphd.FileHeader_toString(self)


    def size(self):
        """size(FileHeader self) -> size_t"""
        return _cphd.FileHeader_size(self)


    def set(self, *args):
        """
        set(FileHeader self) -> size_t
        set(FileHeader self, sys::Off_T xmlSize, sys::Off_T vbmSize, sys::Off_T cphdSize) -> size_t
        """
        return _cphd.FileHeader_set(self, *args)


    def setXMLsize(self, size):
        """setXMLsize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setXMLsize(self, size)


    def setVBMsize(self, size):
        """setVBMsize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setVBMsize(self, size)


    def setCPHDsize(self, size):
        """setCPHDsize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setCPHDsize(self, size)


    def setXMLoffset(self, offset):
        """setXMLoffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setXMLoffset(self, offset)


    def setVBMoffset(self, offset):
        """setVBMoffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setVBMoffset(self, offset)


    def setCPHDoffset(self, offset):
        """setCPHDoffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setCPHDoffset(self, offset)


    def getXMLsize(self):
        """getXMLsize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getXMLsize(self)


    def getVBMsize(self):
        """getVBMsize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getVBMsize(self)


    def getCPHDsize(self):
        """getCPHDsize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getCPHDsize(self)


    def getXMLoffset(self):
        """getXMLoffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getXMLoffset(self)


    def getVBMoffset(self):
        """getVBMoffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getVBMoffset(self)


    def getCPHDoffset(self):
        """getCPHDoffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getCPHDoffset(self)


    def getPadBytes(self):
        """getPadBytes(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPadBytes(self)


    def setClassification(self, str):
        """setClassification(FileHeader self, std::string const & str)"""
        return _cphd.FileHeader_setClassification(self, str)


    def setReleaseInfo(self, str):
        """setReleaseInfo(FileHeader self, std::string const & str)"""
        return _cphd.FileHeader_setReleaseInfo(self, str)


    def getClassification(self):
        """getClassification(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getClassification(self)


    def getReleaseInfo(self):
        """getReleaseInfo(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getReleaseInfo(self)


    def __str__(self):
        """__str__(FileHeader self) -> std::string"""
        return _cphd.FileHeader___str__(self)

    __swig_destroy__ = _cphd.delete_FileHeader
    __del__ = lambda self: None
FileHeader_swigregister = _cphd.FileHeader_swigregister
FileHeader_swigregister(FileHeader)
FileHeader.FILE_TYPE = _cphd.cvar.FileHeader_FILE_TYPE
FileHeader.DEFAULT_VERSION = _cphd.cvar.FileHeader_DEFAULT_VERSION
FileHeader.KVP_DELIMITER = _cphd.cvar.FileHeader_KVP_DELIMITER
FileHeader.LINE_TERMINATOR = _cphd.cvar.FileHeader_LINE_TERMINATOR
FileHeader.SECTION_TERMINATOR = _cphd.cvar.FileHeader_SECTION_TERMINATOR
FileHeader.MAX_HEADER_SIZE = _cphd.cvar.FileHeader_MAX_HEADER_SIZE

def FileHeader_isCPHD(inStream):
    """FileHeader_isCPHD(SeekableInputStream inStream) -> bool"""
    return _cphd.FileHeader_isCPHD(inStream)

def FileHeader_readVersion(inStream):
    """FileHeader_readVersion(SeekableInputStream inStream) -> std::string"""
    return _cphd.FileHeader_readVersion(inStream)

class DwellTimeParameters(_object):
    """Proxy of C++ cphd::DwellTimeParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DwellTimeParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DwellTimeParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::DwellTimeParameters self) -> DwellTimeParameters"""
        this = _cphd.new_DwellTimeParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(DwellTimeParameters self, DwellTimeParameters other) -> bool"""
        return _cphd.DwellTimeParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(DwellTimeParameters self, DwellTimeParameters other) -> bool"""
        return _cphd.DwellTimeParameters___ne__(self, other)

    __swig_setmethods__["codTimePoly"] = _cphd.DwellTimeParameters_codTimePoly_set
    __swig_getmethods__["codTimePoly"] = _cphd.DwellTimeParameters_codTimePoly_get
    if _newclass:
        codTimePoly = _swig_property(_cphd.DwellTimeParameters_codTimePoly_get, _cphd.DwellTimeParameters_codTimePoly_set)
    __swig_setmethods__["dwellTimePoly"] = _cphd.DwellTimeParameters_dwellTimePoly_set
    __swig_getmethods__["dwellTimePoly"] = _cphd.DwellTimeParameters_dwellTimePoly_get
    if _newclass:
        dwellTimePoly = _swig_property(_cphd.DwellTimeParameters_dwellTimePoly_get, _cphd.DwellTimeParameters_dwellTimePoly_set)
    __swig_destroy__ = _cphd.delete_DwellTimeParameters
    __del__ = lambda self: None
DwellTimeParameters_swigregister = _cphd.DwellTimeParameters_swigregister
DwellTimeParameters_swigregister(DwellTimeParameters)

class AreaPlane(_object):
    """Proxy of C++ cphd::AreaPlane class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaPlane, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AreaPlane self) -> AreaPlane"""
        this = _cphd.new_AreaPlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(AreaPlane self, AreaPlane other) -> bool"""
        return _cphd.AreaPlane___eq__(self, other)


    def __ne__(self, other):
        """__ne__(AreaPlane self, AreaPlane other) -> bool"""
        return _cphd.AreaPlane___ne__(self, other)

    __swig_setmethods__["referencePoint"] = _cphd.AreaPlane_referencePoint_set
    __swig_getmethods__["referencePoint"] = _cphd.AreaPlane_referencePoint_get
    if _newclass:
        referencePoint = _swig_property(_cphd.AreaPlane_referencePoint_get, _cphd.AreaPlane_referencePoint_set)
    __swig_setmethods__["xDirection"] = _cphd.AreaPlane_xDirection_set
    __swig_getmethods__["xDirection"] = _cphd.AreaPlane_xDirection_get
    if _newclass:
        xDirection = _swig_property(_cphd.AreaPlane_xDirection_get, _cphd.AreaPlane_xDirection_set)
    __swig_setmethods__["yDirection"] = _cphd.AreaPlane_yDirection_set
    __swig_getmethods__["yDirection"] = _cphd.AreaPlane_yDirection_get
    if _newclass:
        yDirection = _swig_property(_cphd.AreaPlane_yDirection_get, _cphd.AreaPlane_yDirection_set)
    __swig_setmethods__["dwellTime"] = _cphd.AreaPlane_dwellTime_set
    __swig_getmethods__["dwellTime"] = _cphd.AreaPlane_dwellTime_get
    if _newclass:
        dwellTime = _swig_property(_cphd.AreaPlane_dwellTime_get, _cphd.AreaPlane_dwellTime_set)
    __swig_destroy__ = _cphd.delete_AreaPlane
    __del__ = lambda self: None
AreaPlane_swigregister = _cphd.AreaPlane_swigregister
AreaPlane_swigregister(AreaPlane)

class ImageArea(_object):
    """Proxy of C++ cphd::ImageArea class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageArea, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageArea self) -> ImageArea"""
        this = _cphd.new_ImageArea()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(ImageArea self, ImageArea other) -> bool"""
        return _cphd.ImageArea___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ImageArea self, ImageArea other) -> bool"""
        return _cphd.ImageArea___ne__(self, other)

    __swig_setmethods__["acpCorners"] = _cphd.ImageArea_acpCorners_set
    __swig_getmethods__["acpCorners"] = _cphd.ImageArea_acpCorners_get
    if _newclass:
        acpCorners = _swig_property(_cphd.ImageArea_acpCorners_get, _cphd.ImageArea_acpCorners_set)
    __swig_setmethods__["plane"] = _cphd.ImageArea_plane_set
    __swig_getmethods__["plane"] = _cphd.ImageArea_plane_get
    if _newclass:
        plane = _swig_property(_cphd.ImageArea_plane_get, _cphd.ImageArea_plane_set)
    __swig_destroy__ = _cphd.delete_ImageArea
    __del__ = lambda self: None
ImageArea_swigregister = _cphd.ImageArea_swigregister
ImageArea_swigregister(ImageArea)

class Global(_object):
    """Proxy of C++ cphd::Global class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Global, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Global, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Global self) -> Global"""
        this = _cphd.new_Global()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(Global self, Global other) -> bool"""
        return _cphd.Global___eq__(self, other)


    def __ne__(self, other):
        """__ne__(Global self, Global other) -> bool"""
        return _cphd.Global___ne__(self, other)

    __swig_setmethods__["domainType"] = _cphd.Global_domainType_set
    __swig_getmethods__["domainType"] = _cphd.Global_domainType_get
    if _newclass:
        domainType = _swig_property(_cphd.Global_domainType_get, _cphd.Global_domainType_set)
    __swig_setmethods__["phaseSGN"] = _cphd.Global_phaseSGN_set
    __swig_getmethods__["phaseSGN"] = _cphd.Global_phaseSGN_get
    if _newclass:
        phaseSGN = _swig_property(_cphd.Global_phaseSGN_get, _cphd.Global_phaseSGN_set)
    __swig_setmethods__["refFrequencyIndex"] = _cphd.Global_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _cphd.Global_refFrequencyIndex_get
    if _newclass:
        refFrequencyIndex = _swig_property(_cphd.Global_refFrequencyIndex_get, _cphd.Global_refFrequencyIndex_set)
    __swig_setmethods__["collectStart"] = _cphd.Global_collectStart_set
    __swig_getmethods__["collectStart"] = _cphd.Global_collectStart_get
    if _newclass:
        collectStart = _swig_property(_cphd.Global_collectStart_get, _cphd.Global_collectStart_set)
    __swig_setmethods__["collectDuration"] = _cphd.Global_collectDuration_set
    __swig_getmethods__["collectDuration"] = _cphd.Global_collectDuration_get
    if _newclass:
        collectDuration = _swig_property(_cphd.Global_collectDuration_get, _cphd.Global_collectDuration_set)
    __swig_setmethods__["txTime1"] = _cphd.Global_txTime1_set
    __swig_getmethods__["txTime1"] = _cphd.Global_txTime1_get
    if _newclass:
        txTime1 = _swig_property(_cphd.Global_txTime1_get, _cphd.Global_txTime1_set)
    __swig_setmethods__["txTime2"] = _cphd.Global_txTime2_set
    __swig_getmethods__["txTime2"] = _cphd.Global_txTime2_get
    if _newclass:
        txTime2 = _swig_property(_cphd.Global_txTime2_get, _cphd.Global_txTime2_set)
    __swig_setmethods__["imageArea"] = _cphd.Global_imageArea_set
    __swig_getmethods__["imageArea"] = _cphd.Global_imageArea_get
    if _newclass:
        imageArea = _swig_property(_cphd.Global_imageArea_get, _cphd.Global_imageArea_set)
    __swig_destroy__ = _cphd.delete_Global
    __del__ = lambda self: None
Global_swigregister = _cphd.Global_swigregister
Global_swigregister(Global)

class ChannelParameters(_object):
    """Proxy of C++ cphd::ChannelParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ChannelParameters self) -> ChannelParameters"""
        this = _cphd.new_ChannelParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(ChannelParameters self, ChannelParameters other) -> bool"""
        return _cphd.ChannelParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ChannelParameters self, ChannelParameters other) -> bool"""
        return _cphd.ChannelParameters___ne__(self, other)

    __swig_setmethods__["srpIndex"] = _cphd.ChannelParameters_srpIndex_set
    __swig_getmethods__["srpIndex"] = _cphd.ChannelParameters_srpIndex_get
    if _newclass:
        srpIndex = _swig_property(_cphd.ChannelParameters_srpIndex_get, _cphd.ChannelParameters_srpIndex_set)
    __swig_setmethods__["nomTOARateSF"] = _cphd.ChannelParameters_nomTOARateSF_set
    __swig_getmethods__["nomTOARateSF"] = _cphd.ChannelParameters_nomTOARateSF_get
    if _newclass:
        nomTOARateSF = _swig_property(_cphd.ChannelParameters_nomTOARateSF_get, _cphd.ChannelParameters_nomTOARateSF_set)
    __swig_setmethods__["fxCtrNom"] = _cphd.ChannelParameters_fxCtrNom_set
    __swig_getmethods__["fxCtrNom"] = _cphd.ChannelParameters_fxCtrNom_get
    if _newclass:
        fxCtrNom = _swig_property(_cphd.ChannelParameters_fxCtrNom_get, _cphd.ChannelParameters_fxCtrNom_set)
    __swig_setmethods__["bwSavedNom"] = _cphd.ChannelParameters_bwSavedNom_set
    __swig_getmethods__["bwSavedNom"] = _cphd.ChannelParameters_bwSavedNom_get
    if _newclass:
        bwSavedNom = _swig_property(_cphd.ChannelParameters_bwSavedNom_get, _cphd.ChannelParameters_bwSavedNom_set)
    __swig_setmethods__["toaSavedNom"] = _cphd.ChannelParameters_toaSavedNom_set
    __swig_getmethods__["toaSavedNom"] = _cphd.ChannelParameters_toaSavedNom_get
    if _newclass:
        toaSavedNom = _swig_property(_cphd.ChannelParameters_toaSavedNom_get, _cphd.ChannelParameters_toaSavedNom_set)
    __swig_setmethods__["txAntIndex"] = _cphd.ChannelParameters_txAntIndex_set
    __swig_getmethods__["txAntIndex"] = _cphd.ChannelParameters_txAntIndex_get
    if _newclass:
        txAntIndex = _swig_property(_cphd.ChannelParameters_txAntIndex_get, _cphd.ChannelParameters_txAntIndex_set)
    __swig_setmethods__["rcvAntIndex"] = _cphd.ChannelParameters_rcvAntIndex_set
    __swig_getmethods__["rcvAntIndex"] = _cphd.ChannelParameters_rcvAntIndex_get
    if _newclass:
        rcvAntIndex = _swig_property(_cphd.ChannelParameters_rcvAntIndex_get, _cphd.ChannelParameters_rcvAntIndex_set)
    __swig_setmethods__["twAntIndex"] = _cphd.ChannelParameters_twAntIndex_set
    __swig_getmethods__["twAntIndex"] = _cphd.ChannelParameters_twAntIndex_get
    if _newclass:
        twAntIndex = _swig_property(_cphd.ChannelParameters_twAntIndex_get, _cphd.ChannelParameters_twAntIndex_set)
    __swig_destroy__ = _cphd.delete_ChannelParameters
    __del__ = lambda self: None
ChannelParameters_swigregister = _cphd.ChannelParameters_swigregister
ChannelParameters_swigregister(ChannelParameters)

class Channel(_object):
    """Proxy of C++ cphd::Channel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Channel self) -> Channel"""
        this = _cphd.new_Channel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_Channel
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(Channel self, Channel other) -> bool"""
        return _cphd.Channel___eq__(self, other)


    def __ne__(self, other):
        """__ne__(Channel self, Channel other) -> bool"""
        return _cphd.Channel___ne__(self, other)

    __swig_setmethods__["parameters"] = _cphd.Channel_parameters_set
    __swig_getmethods__["parameters"] = _cphd.Channel_parameters_get
    if _newclass:
        parameters = _swig_property(_cphd.Channel_parameters_get, _cphd.Channel_parameters_set)
Channel_swigregister = _cphd.Channel_swigregister
Channel_swigregister(Channel)

class SRP(_object):
    """Proxy of C++ cphd::SRP class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SRP, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::SRP self) -> SRP"""
        this = _cphd.new_SRP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(SRP self, SRP other) -> bool"""
        return _cphd.SRP___eq__(self, other)


    def __ne__(self, other):
        """__ne__(SRP self, SRP other) -> bool"""
        return _cphd.SRP___ne__(self, other)

    __swig_setmethods__["srpType"] = _cphd.SRP_srpType_set
    __swig_getmethods__["srpType"] = _cphd.SRP_srpType_get
    if _newclass:
        srpType = _swig_property(_cphd.SRP_srpType_get, _cphd.SRP_srpType_set)
    __swig_setmethods__["numSRPs"] = _cphd.SRP_numSRPs_set
    __swig_getmethods__["numSRPs"] = _cphd.SRP_numSRPs_get
    if _newclass:
        numSRPs = _swig_property(_cphd.SRP_numSRPs_get, _cphd.SRP_numSRPs_set)
    __swig_setmethods__["srpPT"] = _cphd.SRP_srpPT_set
    __swig_getmethods__["srpPT"] = _cphd.SRP_srpPT_get
    if _newclass:
        srpPT = _swig_property(_cphd.SRP_srpPT_get, _cphd.SRP_srpPT_set)
    __swig_setmethods__["srpPVTPoly"] = _cphd.SRP_srpPVTPoly_set
    __swig_getmethods__["srpPVTPoly"] = _cphd.SRP_srpPVTPoly_get
    if _newclass:
        srpPVTPoly = _swig_property(_cphd.SRP_srpPVTPoly_get, _cphd.SRP_srpPVTPoly_set)
    __swig_setmethods__["srpPVVPoly"] = _cphd.SRP_srpPVVPoly_set
    __swig_getmethods__["srpPVVPoly"] = _cphd.SRP_srpPVVPoly_get
    if _newclass:
        srpPVVPoly = _swig_property(_cphd.SRP_srpPVVPoly_get, _cphd.SRP_srpPVVPoly_set)
    __swig_destroy__ = _cphd.delete_SRP
    __del__ = lambda self: None
SRP_swigregister = _cphd.SRP_swigregister
SRP_swigregister(SRP)

class CphdAntenna(_object):
    """Proxy of C++ cphd::Antenna class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Antenna self) -> CphdAntenna"""
        this = _cphd.new_CphdAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(CphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.CphdAntenna___eq__(self, other)


    def __ne__(self, other):
        """__ne__(CphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.CphdAntenna___ne__(self, other)

    __swig_setmethods__["numTxAnt"] = _cphd.CphdAntenna_numTxAnt_set
    __swig_getmethods__["numTxAnt"] = _cphd.CphdAntenna_numTxAnt_get
    if _newclass:
        numTxAnt = _swig_property(_cphd.CphdAntenna_numTxAnt_get, _cphd.CphdAntenna_numTxAnt_set)
    __swig_setmethods__["numRcvAnt"] = _cphd.CphdAntenna_numRcvAnt_set
    __swig_getmethods__["numRcvAnt"] = _cphd.CphdAntenna_numRcvAnt_get
    if _newclass:
        numRcvAnt = _swig_property(_cphd.CphdAntenna_numRcvAnt_get, _cphd.CphdAntenna_numRcvAnt_set)
    __swig_setmethods__["numTWAnt"] = _cphd.CphdAntenna_numTWAnt_set
    __swig_getmethods__["numTWAnt"] = _cphd.CphdAntenna_numTWAnt_get
    if _newclass:
        numTWAnt = _swig_property(_cphd.CphdAntenna_numTWAnt_get, _cphd.CphdAntenna_numTWAnt_set)
    __swig_setmethods__["tx"] = _cphd.CphdAntenna_tx_set
    __swig_getmethods__["tx"] = _cphd.CphdAntenna_tx_get
    if _newclass:
        tx = _swig_property(_cphd.CphdAntenna_tx_get, _cphd.CphdAntenna_tx_set)
    __swig_setmethods__["rcv"] = _cphd.CphdAntenna_rcv_set
    __swig_getmethods__["rcv"] = _cphd.CphdAntenna_rcv_get
    if _newclass:
        rcv = _swig_property(_cphd.CphdAntenna_rcv_get, _cphd.CphdAntenna_rcv_set)
    __swig_setmethods__["twoWay"] = _cphd.CphdAntenna_twoWay_set
    __swig_getmethods__["twoWay"] = _cphd.CphdAntenna_twoWay_get
    if _newclass:
        twoWay = _swig_property(_cphd.CphdAntenna_twoWay_get, _cphd.CphdAntenna_twoWay_set)
    __swig_destroy__ = _cphd.delete_CphdAntenna
    __del__ = lambda self: None
CphdAntenna_swigregister = _cphd.CphdAntenna_swigregister
CphdAntenna_swigregister(CphdAntenna)

class FxParameters(_object):
    """Proxy of C++ cphd::FxParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FxParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FxParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::FxParameters self) -> FxParameters"""
        this = _cphd.new_FxParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(FxParameters self, FxParameters other) -> bool"""
        return _cphd.FxParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(FxParameters self, FxParameters other) -> bool"""
        return _cphd.FxParameters___ne__(self, other)

    __swig_setmethods__["Fx0"] = _cphd.FxParameters_Fx0_set
    __swig_getmethods__["Fx0"] = _cphd.FxParameters_Fx0_get
    if _newclass:
        Fx0 = _swig_property(_cphd.FxParameters_Fx0_get, _cphd.FxParameters_Fx0_set)
    __swig_setmethods__["FxSS"] = _cphd.FxParameters_FxSS_set
    __swig_getmethods__["FxSS"] = _cphd.FxParameters_FxSS_get
    if _newclass:
        FxSS = _swig_property(_cphd.FxParameters_FxSS_get, _cphd.FxParameters_FxSS_set)
    __swig_setmethods__["Fx1"] = _cphd.FxParameters_Fx1_set
    __swig_getmethods__["Fx1"] = _cphd.FxParameters_Fx1_get
    if _newclass:
        Fx1 = _swig_property(_cphd.FxParameters_Fx1_get, _cphd.FxParameters_Fx1_set)
    __swig_setmethods__["Fx2"] = _cphd.FxParameters_Fx2_set
    __swig_getmethods__["Fx2"] = _cphd.FxParameters_Fx2_get
    if _newclass:
        Fx2 = _swig_property(_cphd.FxParameters_Fx2_get, _cphd.FxParameters_Fx2_set)
    __swig_destroy__ = _cphd.delete_FxParameters
    __del__ = lambda self: None
FxParameters_swigregister = _cphd.FxParameters_swigregister
FxParameters_swigregister(FxParameters)

class TOAParameters(_object):
    """Proxy of C++ cphd::TOAParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOAParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOAParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TOAParameters self) -> TOAParameters"""
        this = _cphd.new_TOAParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(TOAParameters self, TOAParameters other) -> bool"""
        return _cphd.TOAParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(TOAParameters self, TOAParameters other) -> bool"""
        return _cphd.TOAParameters___ne__(self, other)

    __swig_setmethods__["deltaTOA0"] = _cphd.TOAParameters_deltaTOA0_set
    __swig_getmethods__["deltaTOA0"] = _cphd.TOAParameters_deltaTOA0_get
    if _newclass:
        deltaTOA0 = _swig_property(_cphd.TOAParameters_deltaTOA0_get, _cphd.TOAParameters_deltaTOA0_set)
    __swig_setmethods__["toaSS"] = _cphd.TOAParameters_toaSS_set
    __swig_getmethods__["toaSS"] = _cphd.TOAParameters_toaSS_get
    if _newclass:
        toaSS = _swig_property(_cphd.TOAParameters_toaSS_get, _cphd.TOAParameters_toaSS_set)
    __swig_destroy__ = _cphd.delete_TOAParameters
    __del__ = lambda self: None
TOAParameters_swigregister = _cphd.TOAParameters_swigregister
TOAParameters_swigregister(TOAParameters)

class VectorParameters(_object):
    """Proxy of C++ cphd::VectorParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::VectorParameters self) -> VectorParameters"""
        this = _cphd.new_VectorParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def txTimeOffset(self):
        """txTimeOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_txTimeOffset(self)


    def txPosOffset(self):
        """txPosOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_txPosOffset(self)


    def rcvTimeOffset(self):
        """rcvTimeOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_rcvTimeOffset(self)


    def rcvPosOffset(self):
        """rcvPosOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_rcvPosOffset(self)


    def srpTimeOffset(self):
        """srpTimeOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_srpTimeOffset(self)


    def srpPosOffset(self):
        """srpPosOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_srpPosOffset(self)


    def tropoSRPOffset(self):
        """tropoSRPOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_tropoSRPOffset(self)


    def ampSFOffset(self):
        """ampSFOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_ampSFOffset(self)


    def Fx0Offset(self):
        """Fx0Offset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_Fx0Offset(self)


    def FxSSOffset(self):
        """FxSSOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_FxSSOffset(self)


    def Fx1Offset(self):
        """Fx1Offset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_Fx1Offset(self)


    def Fx2Offset(self):
        """Fx2Offset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_Fx2Offset(self)


    def deltaTOA0Offset(self):
        """deltaTOA0Offset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_deltaTOA0Offset(self)


    def toaSSOffset(self):
        """toaSSOffset(VectorParameters self) -> sys::Off_T"""
        return _cphd.VectorParameters_toaSSOffset(self)


    def clearAmpSF(self):
        """clearAmpSF(VectorParameters self)"""
        return _cphd.VectorParameters_clearAmpSF(self)


    def __eq__(self, other):
        """__eq__(VectorParameters self, VectorParameters other) -> bool"""
        return _cphd.VectorParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(VectorParameters self, VectorParameters other) -> bool"""
        return _cphd.VectorParameters___ne__(self, other)

    __swig_setmethods__["txTime"] = _cphd.VectorParameters_txTime_set
    __swig_getmethods__["txTime"] = _cphd.VectorParameters_txTime_get
    if _newclass:
        txTime = _swig_property(_cphd.VectorParameters_txTime_get, _cphd.VectorParameters_txTime_set)
    __swig_setmethods__["txPos"] = _cphd.VectorParameters_txPos_set
    __swig_getmethods__["txPos"] = _cphd.VectorParameters_txPos_get
    if _newclass:
        txPos = _swig_property(_cphd.VectorParameters_txPos_get, _cphd.VectorParameters_txPos_set)
    __swig_setmethods__["rcvTime"] = _cphd.VectorParameters_rcvTime_set
    __swig_getmethods__["rcvTime"] = _cphd.VectorParameters_rcvTime_get
    if _newclass:
        rcvTime = _swig_property(_cphd.VectorParameters_rcvTime_get, _cphd.VectorParameters_rcvTime_set)
    __swig_setmethods__["rcvPos"] = _cphd.VectorParameters_rcvPos_set
    __swig_getmethods__["rcvPos"] = _cphd.VectorParameters_rcvPos_get
    if _newclass:
        rcvPos = _swig_property(_cphd.VectorParameters_rcvPos_get, _cphd.VectorParameters_rcvPos_set)
    __swig_setmethods__["srpTime"] = _cphd.VectorParameters_srpTime_set
    __swig_getmethods__["srpTime"] = _cphd.VectorParameters_srpTime_get
    if _newclass:
        srpTime = _swig_property(_cphd.VectorParameters_srpTime_get, _cphd.VectorParameters_srpTime_set)
    __swig_setmethods__["srpPos"] = _cphd.VectorParameters_srpPos_set
    __swig_getmethods__["srpPos"] = _cphd.VectorParameters_srpPos_get
    if _newclass:
        srpPos = _swig_property(_cphd.VectorParameters_srpPos_get, _cphd.VectorParameters_srpPos_set)
    __swig_setmethods__["tropoSRP"] = _cphd.VectorParameters_tropoSRP_set
    __swig_getmethods__["tropoSRP"] = _cphd.VectorParameters_tropoSRP_get
    if _newclass:
        tropoSRP = _swig_property(_cphd.VectorParameters_tropoSRP_get, _cphd.VectorParameters_tropoSRP_set)
    __swig_setmethods__["ampSF"] = _cphd.VectorParameters_ampSF_set
    __swig_getmethods__["ampSF"] = _cphd.VectorParameters_ampSF_get
    if _newclass:
        ampSF = _swig_property(_cphd.VectorParameters_ampSF_get, _cphd.VectorParameters_ampSF_set)
    __swig_setmethods__["fxParameters"] = _cphd.VectorParameters_fxParameters_set
    __swig_getmethods__["fxParameters"] = _cphd.VectorParameters_fxParameters_get
    if _newclass:
        fxParameters = _swig_property(_cphd.VectorParameters_fxParameters_get, _cphd.VectorParameters_fxParameters_set)
    __swig_setmethods__["toaParameters"] = _cphd.VectorParameters_toaParameters_set
    __swig_getmethods__["toaParameters"] = _cphd.VectorParameters_toaParameters_get
    if _newclass:
        toaParameters = _swig_property(_cphd.VectorParameters_toaParameters_get, _cphd.VectorParameters_toaParameters_set)
    __swig_destroy__ = _cphd.delete_VectorParameters
    __del__ = lambda self: None
VectorParameters_swigregister = _cphd.VectorParameters_swigregister
VectorParameters_swigregister(VectorParameters)

class Metadata(_object):
    """Proxy of C++ cphd::Metadata class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Metadata self) -> Metadata"""
        this = _cphd.new_Metadata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setSampleType(self, sampleType):
        """setSampleType(Metadata self, SampleType sampleType)"""
        return _cphd.Metadata_setSampleType(self, sampleType)


    def getSampleType(self):
        """getSampleType(Metadata self) -> SampleType"""
        return _cphd.Metadata_getSampleType(self)


    def getNumChannels(self):
        """getNumChannels(Metadata self) -> size_t"""
        return _cphd.Metadata_getNumChannels(self)


    def getNumVectors(self, channel):
        """getNumVectors(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getNumVectors(self, channel)


    def getNumSamples(self, channel):
        """getNumSamples(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getNumSamples(self, channel)


    def getNumBytesPerSample(self):
        """getNumBytesPerSample(Metadata self) -> size_t"""
        return _cphd.Metadata_getNumBytesPerSample(self)


    def isFX(self):
        """isFX(Metadata self) -> bool"""
        return _cphd.Metadata_isFX(self)


    def isTOA(self):
        """isTOA(Metadata self) -> bool"""
        return _cphd.Metadata_isTOA(self)


    def getDomainTypeString(self):
        """getDomainTypeString(Metadata self) -> std::string"""
        return _cphd.Metadata_getDomainTypeString(self)


    def getDomainType(self):
        """getDomainType(Metadata self) -> DomainType"""
        return _cphd.Metadata_getDomainType(self)

    __swig_setmethods__["collectionInformation"] = _cphd.Metadata_collectionInformation_set
    __swig_getmethods__["collectionInformation"] = _cphd.Metadata_collectionInformation_get
    if _newclass:
        collectionInformation = _swig_property(_cphd.Metadata_collectionInformation_get, _cphd.Metadata_collectionInformation_set)
    __swig_setmethods__["data"] = _cphd.Metadata_data_set
    __swig_getmethods__["data"] = _cphd.Metadata_data_get
    if _newclass:
        data = _swig_property(_cphd.Metadata_data_get, _cphd.Metadata_data_set)
    __swig_setmethods__["_global"] = _cphd.Metadata__global_set
    __swig_getmethods__["_global"] = _cphd.Metadata__global_get
    if _newclass:
        _global = _swig_property(_cphd.Metadata__global_get, _cphd.Metadata__global_set)
    __swig_setmethods__["channel"] = _cphd.Metadata_channel_set
    __swig_getmethods__["channel"] = _cphd.Metadata_channel_get
    if _newclass:
        channel = _swig_property(_cphd.Metadata_channel_get, _cphd.Metadata_channel_set)
    __swig_setmethods__["srp"] = _cphd.Metadata_srp_set
    __swig_getmethods__["srp"] = _cphd.Metadata_srp_get
    if _newclass:
        srp = _swig_property(_cphd.Metadata_srp_get, _cphd.Metadata_srp_set)
    __swig_setmethods__["antenna"] = _cphd.Metadata_antenna_set
    __swig_getmethods__["antenna"] = _cphd.Metadata_antenna_get
    if _newclass:
        antenna = _swig_property(_cphd.Metadata_antenna_get, _cphd.Metadata_antenna_set)
    __swig_setmethods__["vectorParameters"] = _cphd.Metadata_vectorParameters_set
    __swig_getmethods__["vectorParameters"] = _cphd.Metadata_vectorParameters_get
    if _newclass:
        vectorParameters = _swig_property(_cphd.Metadata_vectorParameters_get, _cphd.Metadata_vectorParameters_set)

    def __eq__(self, other):
        """__eq__(Metadata self, Metadata other) -> bool"""
        return _cphd.Metadata___eq__(self, other)


    def __ne__(self, other):
        """__ne__(Metadata self, Metadata other) -> bool"""
        return _cphd.Metadata___ne__(self, other)


    def __str__(self):
        """__str__(Metadata self) -> std::string"""
        return _cphd.Metadata___str__(self)

    __swig_destroy__ = _cphd.delete_Metadata
    __del__ = lambda self: None
Metadata_swigregister = _cphd.Metadata_swigregister
Metadata_swigregister(Metadata)

class ArraySize(_object):
    """Proxy of C++ cphd::ArraySize class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArraySize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArraySize, name)
    __repr__ = _swig_repr

    def __init__(self, v=0, s=0):
        """
        __init__(cphd::ArraySize self, size_t v=0, size_t s=0) -> ArraySize
        __init__(cphd::ArraySize self, size_t v=0) -> ArraySize
        __init__(cphd::ArraySize self) -> ArraySize
        """
        this = _cphd.new_ArraySize(v, s)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(ArraySize self, ArraySize other) -> bool"""
        return _cphd.ArraySize___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ArraySize self, ArraySize other) -> bool"""
        return _cphd.ArraySize___ne__(self, other)

    __swig_setmethods__["numVectors"] = _cphd.ArraySize_numVectors_set
    __swig_getmethods__["numVectors"] = _cphd.ArraySize_numVectors_get
    if _newclass:
        numVectors = _swig_property(_cphd.ArraySize_numVectors_get, _cphd.ArraySize_numVectors_set)
    __swig_setmethods__["numSamples"] = _cphd.ArraySize_numSamples_set
    __swig_getmethods__["numSamples"] = _cphd.ArraySize_numSamples_get
    if _newclass:
        numSamples = _swig_property(_cphd.ArraySize_numSamples_get, _cphd.ArraySize_numSamples_set)
    __swig_destroy__ = _cphd.delete_ArraySize
    __del__ = lambda self: None
ArraySize_swigregister = _cphd.ArraySize_swigregister
ArraySize_swigregister(ArraySize)

class Data(_object):
    """Proxy of C++ cphd::Data class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Data self) -> Data"""
        this = _cphd.new_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumChannels(self):
        """getNumChannels(Data self) -> size_t"""
        return _cphd.Data_getNumChannels(self)


    def getNumVectors(self, channel):
        """getNumVectors(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getNumVectors(self, channel)


    def getNumSamples(self, channel):
        """getNumSamples(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getNumSamples(self, channel)


    def getNumBytesPerSample(self):
        """getNumBytesPerSample(Data self) -> size_t"""
        return _cphd.Data_getNumBytesPerSample(self)


    def getNumBytesVBP(self):
        """getNumBytesVBP(Data self) -> size_t"""
        return _cphd.Data_getNumBytesVBP(self)


    def setNumBytesVBP(self, n):
        """setNumBytesVBP(Data self, size_t n)"""
        return _cphd.Data_setNumBytesVBP(self, n)


    def __eq__(self, other):
        """__eq__(Data self, Data other) -> bool"""
        return _cphd.Data___eq__(self, other)


    def __ne__(self, other):
        """__ne__(Data self, Data other) -> bool"""
        return _cphd.Data___ne__(self, other)

    __swig_setmethods__["sampleType"] = _cphd.Data_sampleType_set
    __swig_getmethods__["sampleType"] = _cphd.Data_sampleType_get
    if _newclass:
        sampleType = _swig_property(_cphd.Data_sampleType_get, _cphd.Data_sampleType_set)
    __swig_setmethods__["numCPHDChannels"] = _cphd.Data_numCPHDChannels_set
    __swig_getmethods__["numCPHDChannels"] = _cphd.Data_numCPHDChannels_get
    if _newclass:
        numCPHDChannels = _swig_property(_cphd.Data_numCPHDChannels_get, _cphd.Data_numCPHDChannels_set)
    __swig_setmethods__["numBytesVBP"] = _cphd.Data_numBytesVBP_set
    __swig_getmethods__["numBytesVBP"] = _cphd.Data_numBytesVBP_get
    if _newclass:
        numBytesVBP = _swig_property(_cphd.Data_numBytesVBP_get, _cphd.Data_numBytesVBP_set)
    __swig_setmethods__["arraySize"] = _cphd.Data_arraySize_set
    __swig_getmethods__["arraySize"] = _cphd.Data_arraySize_get
    if _newclass:
        arraySize = _swig_property(_cphd.Data_arraySize_get, _cphd.Data_arraySize_set)
    __swig_destroy__ = _cphd.delete_Data
    __del__ = lambda self: None
Data_swigregister = _cphd.Data_swigregister
Data_swigregister(Data)


def __lshift__(*args):
    """
    __lshift__(std::ostream & os, DwellTimeParameters d) -> std::ostream
    __lshift__(std::ostream & os, AreaPlane d) -> std::ostream
    __lshift__(std::ostream & os, ImageArea d) -> std::ostream
    __lshift__(std::ostream & os, Global d) -> std::ostream
    __lshift__(std::ostream & os, ChannelParameters d) -> std::ostream
    __lshift__(std::ostream & os, Channel d) -> std::ostream
    __lshift__(std::ostream & os, SRP d) -> std::ostream
    __lshift__(std::ostream & os, CphdAntenna d) -> std::ostream
    __lshift__(std::ostream & os, FxParameters d) -> std::ostream
    __lshift__(std::ostream & os, TOAParameters d) -> std::ostream
    __lshift__(std::ostream & os, VectorParameters d) -> std::ostream
    __lshift__(std::ostream & os, Metadata d) -> std::ostream
    __lshift__(std::ostream & os, ArraySize d) -> std::ostream
    __lshift__(std::ostream & os, Data d) -> std::ostream &
    """
    return _cphd.__lshift__(*args)
class VBM(_object):
    """Proxy of C++ cphd::VBM class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VBM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VBM, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::VBM self) -> VBM
        __init__(cphd::VBM self, Data data, VectorParameters vp) -> VBM
        __init__(cphd::VBM self, size_t numChannels, VectorSizeT numVectors, bool srpTimeEnabled, bool tropoSrpEnabled, bool ampSFEnabled, DomainType domainType) -> VBM
        __init__(cphd::VBM self, size_t numChannels, VectorSizeT numVectors, bool srpTimeEnabled, bool tropoSrpEnabled, bool ampSFEnabled, DomainType domainType, std::vector< void const *,std::allocator< void const * > > const & data) -> VBM
        """
        this = _cphd.new_VBM(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTxTime(self, channel, vector):
        """getTxTime(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getTxTime(self, channel, vector)


    def getTxPos(self, channel, vector):
        """getTxPos(VBM self, size_t channel, size_t vector) -> Vector3"""
        return _cphd.VBM_getTxPos(self, channel, vector)


    def getRcvTime(self, channel, vector):
        """getRcvTime(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getRcvTime(self, channel, vector)


    def getRcvPos(self, channel, vector):
        """getRcvPos(VBM self, size_t channel, size_t vector) -> Vector3"""
        return _cphd.VBM_getRcvPos(self, channel, vector)


    def getSRPTime(self, channel, vector):
        """getSRPTime(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getSRPTime(self, channel, vector)


    def getSRPPos(self, channel, vector):
        """getSRPPos(VBM self, size_t channel, size_t vector) -> Vector3"""
        return _cphd.VBM_getSRPPos(self, channel, vector)


    def getTropoSRP(self, channel, vector):
        """getTropoSRP(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getTropoSRP(self, channel, vector)


    def getAmpSF(self, channel, vector):
        """getAmpSF(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getAmpSF(self, channel, vector)


    def getFx0(self, channel, vector):
        """getFx0(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getFx0(self, channel, vector)


    def getFxSS(self, channel, vector):
        """getFxSS(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getFxSS(self, channel, vector)


    def getFx1(self, channel, vector):
        """getFx1(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getFx1(self, channel, vector)


    def getFx2(self, channel, vector):
        """getFx2(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getFx2(self, channel, vector)


    def getDeltaTOA0(self, channel, vector):
        """getDeltaTOA0(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getDeltaTOA0(self, channel, vector)


    def getTOASS(self, channel, vector):
        """getTOASS(VBM self, size_t channel, size_t vector) -> double"""
        return _cphd.VBM_getTOASS(self, channel, vector)


    def setTxTime(self, value, channel, vector):
        """setTxTime(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setTxTime(self, value, channel, vector)


    def setTxPos(self, value, channel, vector):
        """setTxPos(VBM self, Vector3 value, size_t channel, size_t vector)"""
        return _cphd.VBM_setTxPos(self, value, channel, vector)


    def setRcvTime(self, value, channel, vector):
        """setRcvTime(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setRcvTime(self, value, channel, vector)


    def setRcvPos(self, value, channel, vector):
        """setRcvPos(VBM self, Vector3 value, size_t channel, size_t vector)"""
        return _cphd.VBM_setRcvPos(self, value, channel, vector)


    def setSRPTime(self, value, channel, vector):
        """setSRPTime(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setSRPTime(self, value, channel, vector)


    def setSRPPos(self, value, channel, vector):
        """setSRPPos(VBM self, Vector3 value, size_t channel, size_t vector)"""
        return _cphd.VBM_setSRPPos(self, value, channel, vector)


    def setTropoSRP(self, value, channel, vector):
        """setTropoSRP(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setTropoSRP(self, value, channel, vector)


    def setAmpSF(self, value, channel, vector):
        """setAmpSF(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setAmpSF(self, value, channel, vector)


    def setFx0(self, value, channel, vector):
        """setFx0(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setFx0(self, value, channel, vector)


    def setFxSS(self, value, channel, vector):
        """setFxSS(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setFxSS(self, value, channel, vector)


    def setFx1(self, value, channel, vector):
        """setFx1(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setFx1(self, value, channel, vector)


    def setFx2(self, value, channel, vector):
        """setFx2(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setFx2(self, value, channel, vector)


    def setDeltaTOA0(self, value, channel, vector):
        """setDeltaTOA0(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setDeltaTOA0(self, value, channel, vector)


    def setTOASS(self, value, channel, vector):
        """setTOASS(VBM self, double value, size_t channel, size_t vector)"""
        return _cphd.VBM_setTOASS(self, value, channel, vector)


    def getNumBytesVBP(self):
        """getNumBytesVBP(VBM self) -> size_t"""
        return _cphd.VBM_getNumBytesVBP(self)


    def getNumChannels(self):
        """getNumChannels(VBM self) -> size_t"""
        return _cphd.VBM_getNumChannels(self)


    def clearAmpSF(self):
        """clearAmpSF(VBM self)"""
        return _cphd.VBM_clearAmpSF(self)


    def haveSRPTime(self):
        """haveSRPTime(VBM self) -> bool"""
        return _cphd.VBM_haveSRPTime(self)


    def haveTropoSRP(self):
        """haveTropoSRP(VBM self) -> bool"""
        return _cphd.VBM_haveTropoSRP(self)


    def haveAmpSF(self):
        """haveAmpSF(VBM self) -> bool"""
        return _cphd.VBM_haveAmpSF(self)


    def updateVectorParameters(self, vp):
        """updateVectorParameters(VBM self, VectorParameters vp)"""
        return _cphd.VBM_updateVectorParameters(self, vp)


    def load(self, inStream, startVBM, sizeVBM, numThreads):
        """load(VBM self, SeekableInputStream inStream, sys::Off_T startVBM, sys::Off_T sizeVBM, size_t numThreads) -> sys::Off_T"""
        return _cphd.VBM_load(self, inStream, startVBM, sizeVBM, numThreads)


    def getVBMsize(self, channel):
        """getVBMsize(VBM self, size_t channel) -> size_t"""
        return _cphd.VBM_getVBMsize(self, channel)


    def __eq__(self, other):
        """__eq__(VBM self, VBM other) -> bool"""
        return _cphd.VBM___eq__(self, other)


    def __ne__(self, vbm):
        """__ne__(VBM self, VBM vbm) -> bool"""
        return _cphd.VBM___ne__(self, vbm)


    def __str__(self):
        """__str__(VBM self) -> std::string"""
        return _cphd.VBM___str__(self)


    def getVBMdata(self, *args):
        """
        getVBMdata(VBM self, size_t channel, std::vector< sys::ubyte,std::allocator< sys::ubyte > > & data)
        getVBMdata(VBM self, size_t channel, void * data)
        getVBMdata(VBM self, size_t channel, size_t data)
        """
        return _cphd.VBM_getVBMdata(self, *args)

    __swig_destroy__ = _cphd.delete_VBM
    __del__ = lambda self: None
VBM_swigregister = _cphd.VBM_swigregister
VBM_swigregister(VBM)

class CPHDXMLControl(_object):
    """Proxy of C++ cphd::CPHDXMLControl class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDXMLControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDXMLControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::CPHDXMLControl self) -> CPHDXMLControl
        __init__(cphd::CPHDXMLControl self, logging::Logger * log, bool ownLog=False) -> CPHDXMLControl
        __init__(cphd::CPHDXMLControl self, logging::Logger * log) -> CPHDXMLControl
        """
        this = _cphd.new_CPHDXMLControl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toXMLString(self, metadata):
        """toXMLString(CPHDXMLControl self, Metadata metadata) -> std::string"""
        return _cphd.CPHDXMLControl_toXMLString(self, metadata)


    def getXMLsize(self, metadata):
        """getXMLsize(CPHDXMLControl self, Metadata metadata) -> size_t"""
        return _cphd.CPHDXMLControl_getXMLsize(self, metadata)


    def fromXMLString(self, xmlString):
        """fromXMLString(CPHDXMLControl self, std::string const & xmlString) -> Metadata"""
        return _cphd.CPHDXMLControl_fromXMLString(self, xmlString)

    __swig_destroy__ = _cphd.delete_CPHDXMLControl
    __del__ = lambda self: None
CPHDXMLControl_swigregister = _cphd.CPHDXMLControl_swigregister
CPHDXMLControl_swigregister(CPHDXMLControl)

class Wideband(_object):
    """Proxy of C++ cphd::Wideband class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wideband, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wideband, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::Wideband self, std::string const & pathname, Data data, sys::Off_T startWB, sys::Off_T sizeWB) -> Wideband
        __init__(cphd::Wideband self, mem::SharedPtr< io::SeekableInputStream > inStream, Data data, sys::Off_T startWB, sys::Off_T sizeWB) -> Wideband
        """
        this = _cphd.new_Wideband(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFileOffset(self, channel, vector, sample):
        """getFileOffset(Wideband self, size_t channel, size_t vector, size_t sample) -> sys::Off_T"""
        return _cphd.Wideband_getFileOffset(self, channel, vector, sample)


    def read(self, *args):
        """
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, mem::BufferView< sys::ubyte > const & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, std_vector_double vectorScaleFactors, size_t numThreads, mem::BufferView< sys::ubyte > const & scratch, mem::BufferView< std::complex< float > > const & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, RowColSizeT dims, void * data)
        """
        return _cphd.Wideband_read(self, *args)


    def getBufferDims(self, channel, firstVector, lastVector, firstSample, lastSample):
        """getBufferDims(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample) -> RowColSizeT"""
        return _cphd.Wideband_getBufferDims(self, channel, firstVector, lastVector, firstSample, lastSample)


    def getSampleType(self):
        """getSampleType(Wideband self) -> SampleType"""
        return _cphd.Wideband_getSampleType(self)


    def readImpl(self, channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, data):
        """readImpl(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, RowColSizeT dims, long long data)"""
        return _cphd.Wideband_readImpl(self, channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, data)

    __swig_destroy__ = _cphd.delete_Wideband
    __del__ = lambda self: None
Wideband_swigregister = _cphd.Wideband_swigregister
Wideband_swigregister(Wideband)
Wideband.ALL = _cphd.cvar.Wideband_ALL

class CPHDReader(_object):
    """Proxy of C++ cphd::CPHDReader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::CPHDReader self, mem::SharedPtr< io::SeekableInputStream > inStream, size_t numThreads, mem::SharedPtr< logging::Logger > logger) -> CPHDReader
        __init__(cphd::CPHDReader self, mem::SharedPtr< io::SeekableInputStream > inStream, size_t numThreads) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads, mem::SharedPtr< logging::Logger > logger) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads) -> CPHDReader
        """
        this = _cphd.new_CPHDReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumChannels(self):
        """getNumChannels(CPHDReader self) -> size_t"""
        return _cphd.CPHDReader_getNumChannels(self)


    def getNumVectors(self, channel):
        """getNumVectors(CPHDReader self, size_t channel) -> size_t"""
        return _cphd.CPHDReader_getNumVectors(self, channel)


    def getNumSamples(self, channel):
        """getNumSamples(CPHDReader self, size_t channel) -> size_t"""
        return _cphd.CPHDReader_getNumSamples(self, channel)


    def getNumBytesPerSample(self):
        """getNumBytesPerSample(CPHDReader self) -> size_t"""
        return _cphd.CPHDReader_getNumBytesPerSample(self)


    def getFileOffset(self, channel, vector, sample):
        """getFileOffset(CPHDReader self, size_t channel, size_t vector, size_t sample) -> sys::Off_T"""
        return _cphd.CPHDReader_getFileOffset(self, channel, vector, sample)


    def isFX(self):
        """isFX(CPHDReader self) -> bool"""
        return _cphd.CPHDReader_isFX(self)


    def isTOA(self):
        """isTOA(CPHDReader self) -> bool"""
        return _cphd.CPHDReader_isTOA(self)


    def getDomainTypeString(self):
        """getDomainTypeString(CPHDReader self) -> std::string"""
        return _cphd.CPHDReader_getDomainTypeString(self)


    def getDomainType(self):
        """getDomainType(CPHDReader self) -> DomainType"""
        return _cphd.CPHDReader_getDomainType(self)


    def getFileHeader(self):
        """getFileHeader(CPHDReader self) -> FileHeader"""
        return _cphd.CPHDReader_getFileHeader(self)


    def getMetadata(self):
        """getMetadata(CPHDReader self) -> Metadata"""
        return _cphd.CPHDReader_getMetadata(self)


    def getVBM(self):
        """getVBM(CPHDReader self) -> VBM"""
        return _cphd.CPHDReader_getVBM(self)


    def getWideband(self):
        """getWideband(CPHDReader self) -> Wideband"""
        return _cphd.CPHDReader_getWideband(self)

    __swig_destroy__ = _cphd.delete_CPHDReader
    __del__ = lambda self: None
CPHDReader_swigregister = _cphd.CPHDReader_swigregister
CPHDReader_swigregister(CPHDReader)

class CPHDWriter(_object):
    """Proxy of C++ cphd::CPHDWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDWriter, name)
    __repr__ = _swig_repr

    def __init__(self, metadata, numThreads=0, scratchSpaceSize=4):
        """
        __init__(cphd::CPHDWriter self, Metadata metadata, size_t numThreads=0, size_t scratchSpaceSize=4) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, size_t numThreads=0) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata) -> CPHDWriter
        """
        this = _cphd.new_CPHDWriter(metadata, numThreads, scratchSpaceSize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def writeMetadata(self, *args):
        """
        writeMetadata(CPHDWriter self, std::string const & pathname, VBM vbm, std::string const & classification, std::string const & releaseInfo)
        writeMetadata(CPHDWriter self, std::string const & pathname, VBM vbm, std::string const & classification)
        writeMetadata(CPHDWriter self, std::string const & pathname, VBM vbm)
        writeMetadata(CPHDWriter self, mem::SharedPtr< io::OutputStream > outStream, VBM vbm, std::string const & classification, std::string const & releaseInfo)
        writeMetadata(CPHDWriter self, mem::SharedPtr< io::OutputStream > outStream, VBM vbm, std::string const & classification)
        writeMetadata(CPHDWriter self, mem::SharedPtr< io::OutputStream > outStream, VBM vbm)
        """
        return _cphd.CPHDWriter_writeMetadata(self, *args)


    def write(self, *args):
        """
        write(CPHDWriter self, std::string const & pathname, std::string const & classification, std::string const & releaseInfo)
        write(CPHDWriter self, std::string const & pathname, std::string const & classification)
        write(CPHDWriter self, std::string const & pathname)
        write(CPHDWriter self, mem::SharedPtr< io::OutputStream > outStream, std::string const & classification, std::string const & releaseInfo)
        write(CPHDWriter self, mem::SharedPtr< io::OutputStream > outStream, std::string const & classification)
        write(CPHDWriter self, mem::SharedPtr< io::OutputStream > outStream)
        """
        return _cphd.CPHDWriter_write(self, *args)


    def close(self):
        """close(CPHDWriter self)"""
        return _cphd.CPHDWriter_close(self)


    def addImageImpl(self, image, dims, vbm):
        """addImageImpl(CPHDWriter self, long long image, RowColSizeT dims, long long vbm)"""
        return _cphd.CPHDWriter_addImageImpl(self, image, dims, vbm)

    __swig_destroy__ = _cphd.delete_CPHDWriter
    __del__ = lambda self: None
CPHDWriter_swigregister = _cphd.CPHDWriter_swigregister
CPHDWriter_swigregister(CPHDWriter)


import numpy
import multiprocessing
from coda.coda_types import RowColSizeT

def toBuffer(self, channel = 0):

    numpyArray = numpy.empty(shape = ((self.getVBMsize(channel) / 8)), dtype = 'double')
    pointer, ro = numpyArray.__array_interface__['data']

    self.getVBMdata(channel, pointer)
    return numpyArray

VBM.toBuffer = toBuffer

def write(self, pathname, data, vbm, channel):
    '''
    Write CPHD data to a file

    Args:
        pathname: Name of file to write to
        data: Numpy array of complex64 wideband data of size [npulse, nsamps]
        vbm: VBM object
        channel: Channel of VBM to write

    Throws:
        TypeError if trying to write non-complex64 wideband data
    '''
    if data.dtype != numpy.dtype('complex64'):
        raise TypeError('Python CPHDWriter only supports complex float data')

    imagePointer, _ = data.__array_interface__['data']
    vbmBuffer = vbm.toBuffer(channel)
    vbmPointer, _ = vbmBuffer.__array_interface__['data']

    dims = RowColSizeT(data.shape[0], data.shape[1])
    self.addImageImpl(imagePointer, dims, vbmPointer)
    self.write(pathname)

def __del__(self):
    self.close()

CPHDWriter.writeCPHD = write
CPHDWriter.__del__ = __del__

def read(self,
         channel = 0,
         firstVector = 0,
         lastVector = Wideband.ALL,
         firstSample = 0,
         lastSample = Wideband.ALL,
         numThreads = multiprocessing.cpu_count()):

    dims = self.getBufferDims(channel, firstVector, lastVector, firstSample, lastSample)
    sampleType = self.getSampleType()

# RF32F_IM32F
    if sampleType == 1:
        dtype = 'complex64'
    else:
        raise Exception('Unknown element type')


    numpyArray = numpy.empty(shape = (dims.row, dims.col), dtype = dtype)
    pointer, ro = numpyArray.__array_interface__['data']
    self.readImpl(channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, pointer)
    return numpyArray

Wideband.read = read

class VectorArraySize(_object):
    """Proxy of C++ std::vector<(cphd::ArraySize)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorArraySize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorArraySize, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorArraySize self) -> SwigPyIterator"""
        return _cphd.VectorArraySize_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorArraySize self) -> bool"""
        return _cphd.VectorArraySize___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorArraySize self) -> bool"""
        return _cphd.VectorArraySize___bool__(self)


    def __len__(self):
        """__len__(VectorArraySize self) -> std::vector< cphd::ArraySize >::size_type"""
        return _cphd.VectorArraySize___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i, std::vector< cphd::ArraySize >::difference_type j) -> VectorArraySize"""
        return _cphd.VectorArraySize___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i, std::vector< cphd::ArraySize >::difference_type j)
        __setslice__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i, std::vector< cphd::ArraySize >::difference_type j, VectorArraySize v)
        """
        return _cphd.VectorArraySize___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i, std::vector< cphd::ArraySize >::difference_type j)"""
        return _cphd.VectorArraySize___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i)
        __delitem__(VectorArraySize self, PySliceObject * slice)
        """
        return _cphd.VectorArraySize___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorArraySize self, PySliceObject * slice) -> VectorArraySize
        __getitem__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i) -> ArraySize
        """
        return _cphd.VectorArraySize___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorArraySize self, PySliceObject * slice, VectorArraySize v)
        __setitem__(VectorArraySize self, PySliceObject * slice)
        __setitem__(VectorArraySize self, std::vector< cphd::ArraySize >::difference_type i, ArraySize x)
        """
        return _cphd.VectorArraySize___setitem__(self, *args)


    def pop(self):
        """pop(VectorArraySize self) -> ArraySize"""
        return _cphd.VectorArraySize_pop(self)


    def append(self, x):
        """append(VectorArraySize self, ArraySize x)"""
        return _cphd.VectorArraySize_append(self, x)


    def empty(self):
        """empty(VectorArraySize self) -> bool"""
        return _cphd.VectorArraySize_empty(self)


    def size(self):
        """size(VectorArraySize self) -> std::vector< cphd::ArraySize >::size_type"""
        return _cphd.VectorArraySize_size(self)


    def swap(self, v):
        """swap(VectorArraySize self, VectorArraySize v)"""
        return _cphd.VectorArraySize_swap(self, v)


    def begin(self):
        """begin(VectorArraySize self) -> std::vector< cphd::ArraySize >::iterator"""
        return _cphd.VectorArraySize_begin(self)


    def end(self):
        """end(VectorArraySize self) -> std::vector< cphd::ArraySize >::iterator"""
        return _cphd.VectorArraySize_end(self)


    def rbegin(self):
        """rbegin(VectorArraySize self) -> std::vector< cphd::ArraySize >::reverse_iterator"""
        return _cphd.VectorArraySize_rbegin(self)


    def rend(self):
        """rend(VectorArraySize self) -> std::vector< cphd::ArraySize >::reverse_iterator"""
        return _cphd.VectorArraySize_rend(self)


    def clear(self):
        """clear(VectorArraySize self)"""
        return _cphd.VectorArraySize_clear(self)


    def get_allocator(self):
        """get_allocator(VectorArraySize self) -> std::vector< cphd::ArraySize >::allocator_type"""
        return _cphd.VectorArraySize_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorArraySize self)"""
        return _cphd.VectorArraySize_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorArraySize self, std::vector< cphd::ArraySize >::iterator pos) -> std::vector< cphd::ArraySize >::iterator
        erase(VectorArraySize self, std::vector< cphd::ArraySize >::iterator first, std::vector< cphd::ArraySize >::iterator last) -> std::vector< cphd::ArraySize >::iterator
        """
        return _cphd.VectorArraySize_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::ArraySize)> self) -> VectorArraySize
        __init__(std::vector<(cphd::ArraySize)> self, VectorArraySize arg2) -> VectorArraySize
        __init__(std::vector<(cphd::ArraySize)> self, std::vector< cphd::ArraySize >::size_type size) -> VectorArraySize
        __init__(std::vector<(cphd::ArraySize)> self, std::vector< cphd::ArraySize >::size_type size, ArraySize value) -> VectorArraySize
        """
        this = _cphd.new_VectorArraySize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorArraySize self, ArraySize x)"""
        return _cphd.VectorArraySize_push_back(self, x)


    def front(self):
        """front(VectorArraySize self) -> ArraySize"""
        return _cphd.VectorArraySize_front(self)


    def back(self):
        """back(VectorArraySize self) -> ArraySize"""
        return _cphd.VectorArraySize_back(self)


    def assign(self, n, x):
        """assign(VectorArraySize self, std::vector< cphd::ArraySize >::size_type n, ArraySize x)"""
        return _cphd.VectorArraySize_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorArraySize self, std::vector< cphd::ArraySize >::size_type new_size)
        resize(VectorArraySize self, std::vector< cphd::ArraySize >::size_type new_size, ArraySize x)
        """
        return _cphd.VectorArraySize_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorArraySize self, std::vector< cphd::ArraySize >::iterator pos, ArraySize x) -> std::vector< cphd::ArraySize >::iterator
        insert(VectorArraySize self, std::vector< cphd::ArraySize >::iterator pos, std::vector< cphd::ArraySize >::size_type n, ArraySize x)
        """
        return _cphd.VectorArraySize_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorArraySize self, std::vector< cphd::ArraySize >::size_type n)"""
        return _cphd.VectorArraySize_reserve(self, n)


    def capacity(self):
        """capacity(VectorArraySize self) -> std::vector< cphd::ArraySize >::size_type"""
        return _cphd.VectorArraySize_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorArraySize
    __del__ = lambda self: None
VectorArraySize_swigregister = _cphd.VectorArraySize_swigregister
VectorArraySize_swigregister(VectorArraySize)

class VectorVector3(_object):
    """Proxy of C++ std::vector<(math::linear::VectorN<(3,double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVector3, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorVector3 self) -> SwigPyIterator"""
        return _cphd.VectorVector3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3___bool__(self)


    def __len__(self):
        """__len__(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j) -> Vector3Coefficients"""
        return _cphd.VectorVector3___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)
        __setslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j, Vector3Coefficients v)
        """
        return _cphd.VectorVector3___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)"""
        return _cphd.VectorVector3___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i)
        __delitem__(VectorVector3 self, PySliceObject * slice)
        """
        return _cphd.VectorVector3___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorVector3 self, PySliceObject * slice) -> Vector3Coefficients
        __getitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i) -> Vector3
        """
        return _cphd.VectorVector3___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorVector3 self, PySliceObject * slice, Vector3Coefficients v)
        __setitem__(VectorVector3 self, PySliceObject * slice)
        __setitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, Vector3 x)
        """
        return _cphd.VectorVector3___setitem__(self, *args)


    def pop(self):
        """pop(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_pop(self)


    def append(self, x):
        """append(VectorVector3 self, Vector3 x)"""
        return _cphd.VectorVector3_append(self, x)


    def empty(self):
        """empty(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3_empty(self)


    def size(self):
        """size(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3_size(self)


    def swap(self, v):
        """swap(VectorVector3 self, Vector3Coefficients v)"""
        return _cphd.VectorVector3_swap(self, v)


    def begin(self):
        """begin(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
        return _cphd.VectorVector3_begin(self)


    def end(self):
        """end(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
        return _cphd.VectorVector3_end(self)


    def rbegin(self):
        """rbegin(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
        return _cphd.VectorVector3_rbegin(self)


    def rend(self):
        """rend(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
        return _cphd.VectorVector3_rend(self)


    def clear(self):
        """clear(VectorVector3 self)"""
        return _cphd.VectorVector3_clear(self)


    def get_allocator(self):
        """get_allocator(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::allocator_type"""
        return _cphd.VectorVector3_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorVector3 self)"""
        return _cphd.VectorVector3_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        erase(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator first, std::vector< math::linear::VectorN< 3,double > >::iterator last) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        """
        return _cphd.VectorVector3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, Vector3Coefficients arg2) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size, Vector3 value) -> VectorVector3
        """
        this = _cphd.new_VectorVector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorVector3 self, Vector3 x)"""
        return _cphd.VectorVector3_push_back(self, x)


    def front(self):
        """front(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_front(self)


    def back(self):
        """back(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_back(self)


    def assign(self, n, x):
        """assign(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)"""
        return _cphd.VectorVector3_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size)
        resize(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size, Vector3 x)
        """
        return _cphd.VectorVector3_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, Vector3 x) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        insert(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)
        """
        return _cphd.VectorVector3_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type n)"""
        return _cphd.VectorVector3_reserve(self, n)


    def capacity(self):
        """capacity(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorVector3
    __del__ = lambda self: None
VectorVector3_swigregister = _cphd.VectorVector3_swigregister
VectorVector3_swigregister(VectorVector3)

class VectorChannelParameters(_object):
    """Proxy of C++ std::vector<(cphd::ChannelParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChannelParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorChannelParameters self) -> SwigPyIterator"""
        return _cphd.VectorChannelParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorChannelParameters self) -> bool"""
        return _cphd.VectorChannelParameters___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorChannelParameters self) -> bool"""
        return _cphd.VectorChannelParameters___bool__(self)


    def __len__(self):
        """__len__(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::size_type"""
        return _cphd.VectorChannelParameters___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i, std::vector< cphd::ChannelParameters >::difference_type j) -> VectorChannelParameters"""
        return _cphd.VectorChannelParameters___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i, std::vector< cphd::ChannelParameters >::difference_type j)
        __setslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i, std::vector< cphd::ChannelParameters >::difference_type j, VectorChannelParameters v)
        """
        return _cphd.VectorChannelParameters___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i, std::vector< cphd::ChannelParameters >::difference_type j)"""
        return _cphd.VectorChannelParameters___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i)
        __delitem__(VectorChannelParameters self, PySliceObject * slice)
        """
        return _cphd.VectorChannelParameters___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorChannelParameters self, PySliceObject * slice) -> VectorChannelParameters
        __getitem__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i) -> ChannelParameters
        """
        return _cphd.VectorChannelParameters___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorChannelParameters self, PySliceObject * slice, VectorChannelParameters v)
        __setitem__(VectorChannelParameters self, PySliceObject * slice)
        __setitem__(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::difference_type i, ChannelParameters x)
        """
        return _cphd.VectorChannelParameters___setitem__(self, *args)


    def pop(self):
        """pop(VectorChannelParameters self) -> ChannelParameters"""
        return _cphd.VectorChannelParameters_pop(self)


    def append(self, x):
        """append(VectorChannelParameters self, ChannelParameters x)"""
        return _cphd.VectorChannelParameters_append(self, x)


    def empty(self):
        """empty(VectorChannelParameters self) -> bool"""
        return _cphd.VectorChannelParameters_empty(self)


    def size(self):
        """size(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::size_type"""
        return _cphd.VectorChannelParameters_size(self)


    def swap(self, v):
        """swap(VectorChannelParameters self, VectorChannelParameters v)"""
        return _cphd.VectorChannelParameters_swap(self, v)


    def begin(self):
        """begin(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::iterator"""
        return _cphd.VectorChannelParameters_begin(self)


    def end(self):
        """end(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::iterator"""
        return _cphd.VectorChannelParameters_end(self)


    def rbegin(self):
        """rbegin(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::reverse_iterator"""
        return _cphd.VectorChannelParameters_rbegin(self)


    def rend(self):
        """rend(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::reverse_iterator"""
        return _cphd.VectorChannelParameters_rend(self)


    def clear(self):
        """clear(VectorChannelParameters self)"""
        return _cphd.VectorChannelParameters_clear(self)


    def get_allocator(self):
        """get_allocator(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::allocator_type"""
        return _cphd.VectorChannelParameters_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorChannelParameters self)"""
        return _cphd.VectorChannelParameters_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::iterator pos) -> std::vector< cphd::ChannelParameters >::iterator
        erase(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::iterator first, std::vector< cphd::ChannelParameters >::iterator last) -> std::vector< cphd::ChannelParameters >::iterator
        """
        return _cphd.VectorChannelParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::ChannelParameters)> self) -> VectorChannelParameters
        __init__(std::vector<(cphd::ChannelParameters)> self, VectorChannelParameters arg2) -> VectorChannelParameters
        __init__(std::vector<(cphd::ChannelParameters)> self, std::vector< cphd::ChannelParameters >::size_type size) -> VectorChannelParameters
        __init__(std::vector<(cphd::ChannelParameters)> self, std::vector< cphd::ChannelParameters >::size_type size, ChannelParameters value) -> VectorChannelParameters
        """
        this = _cphd.new_VectorChannelParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorChannelParameters self, ChannelParameters x)"""
        return _cphd.VectorChannelParameters_push_back(self, x)


    def front(self):
        """front(VectorChannelParameters self) -> ChannelParameters"""
        return _cphd.VectorChannelParameters_front(self)


    def back(self):
        """back(VectorChannelParameters self) -> ChannelParameters"""
        return _cphd.VectorChannelParameters_back(self)


    def assign(self, n, x):
        """assign(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::size_type n, ChannelParameters x)"""
        return _cphd.VectorChannelParameters_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::size_type new_size)
        resize(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::size_type new_size, ChannelParameters x)
        """
        return _cphd.VectorChannelParameters_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::iterator pos, ChannelParameters x) -> std::vector< cphd::ChannelParameters >::iterator
        insert(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::iterator pos, std::vector< cphd::ChannelParameters >::size_type n, ChannelParameters x)
        """
        return _cphd.VectorChannelParameters_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorChannelParameters self, std::vector< cphd::ChannelParameters >::size_type n)"""
        return _cphd.VectorChannelParameters_reserve(self, n)


    def capacity(self):
        """capacity(VectorChannelParameters self) -> std::vector< cphd::ChannelParameters >::size_type"""
        return _cphd.VectorChannelParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorChannelParameters
    __del__ = lambda self: None
VectorChannelParameters_swigregister = _cphd.VectorChannelParameters_swigregister
VectorChannelParameters_swigregister(VectorChannelParameters)

class VectorAntennaParameters(_object):
    """Proxy of C++ std::vector<(six::sicd::AntennaParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAntennaParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorAntennaParameters self) -> SwigPyIterator"""
        return _cphd.VectorAntennaParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters___bool__(self)


    def __len__(self):
        """__len__(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j) -> VectorAntennaParameters"""
        return _cphd.VectorAntennaParameters___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j)
        __setslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j, VectorAntennaParameters v)
        """
        return _cphd.VectorAntennaParameters___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j)"""
        return _cphd.VectorAntennaParameters___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i)
        __delitem__(VectorAntennaParameters self, PySliceObject * slice)
        """
        return _cphd.VectorAntennaParameters___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorAntennaParameters self, PySliceObject * slice) -> VectorAntennaParameters
        __getitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i) -> AntennaParameters
        """
        return _cphd.VectorAntennaParameters___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorAntennaParameters self, PySliceObject * slice, VectorAntennaParameters v)
        __setitem__(VectorAntennaParameters self, PySliceObject * slice)
        __setitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters___setitem__(self, *args)


    def pop(self):
        """pop(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_pop(self)


    def append(self, x):
        """append(VectorAntennaParameters self, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_append(self, x)


    def empty(self):
        """empty(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters_empty(self)


    def size(self):
        """size(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters_size(self)


    def swap(self, v):
        """swap(VectorAntennaParameters self, VectorAntennaParameters v)"""
        return _cphd.VectorAntennaParameters_swap(self, v)


    def begin(self):
        """begin(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::iterator"""
        return _cphd.VectorAntennaParameters_begin(self)


    def end(self):
        """end(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::iterator"""
        return _cphd.VectorAntennaParameters_end(self)


    def rbegin(self):
        """rbegin(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::reverse_iterator"""
        return _cphd.VectorAntennaParameters_rbegin(self)


    def rend(self):
        """rend(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::reverse_iterator"""
        return _cphd.VectorAntennaParameters_rend(self)


    def clear(self):
        """clear(VectorAntennaParameters self)"""
        return _cphd.VectorAntennaParameters_clear(self)


    def get_allocator(self):
        """get_allocator(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::allocator_type"""
        return _cphd.VectorAntennaParameters_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorAntennaParameters self)"""
        return _cphd.VectorAntennaParameters_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos) -> std::vector< six::sicd::AntennaParameters >::iterator
        erase(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator first, std::vector< six::sicd::AntennaParameters >::iterator last) -> std::vector< six::sicd::AntennaParameters >::iterator
        """
        return _cphd.VectorAntennaParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::AntennaParameters)> self) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, VectorAntennaParameters arg2) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, std::vector< six::sicd::AntennaParameters >::size_type size) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, std::vector< six::sicd::AntennaParameters >::size_type size, AntennaParameters value) -> VectorAntennaParameters
        """
        this = _cphd.new_VectorAntennaParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorAntennaParameters self, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_push_back(self, x)


    def front(self):
        """front(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_front(self)


    def back(self):
        """back(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_back(self)


    def assign(self, n, x):
        """assign(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type n, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type new_size)
        resize(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type new_size, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos, AntennaParameters x) -> std::vector< six::sicd::AntennaParameters >::iterator
        insert(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos, std::vector< six::sicd::AntennaParameters >::size_type n, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type n)"""
        return _cphd.VectorAntennaParameters_reserve(self, n)


    def capacity(self):
        """capacity(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorAntennaParameters
    __del__ = lambda self: None
VectorAntennaParameters_swigregister = _cphd.VectorAntennaParameters_swigregister
VectorAntennaParameters_swigregister(VectorAntennaParameters)

class StdAutoDwellTimeParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::DwellTimeParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoDwellTimeParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoDwellTimeParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::DwellTimeParameters)> self) -> StdAutoDwellTimeParameters"""
        this = _cphd.new_StdAutoDwellTimeParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoDwellTimeParameters
    __del__ = lambda self: None
StdAutoDwellTimeParameters_swigregister = _cphd.StdAutoDwellTimeParameters_swigregister
StdAutoDwellTimeParameters_swigregister(StdAutoDwellTimeParameters)

class ScopedCopyableDwellTimeParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::DwellTimeParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableDwellTimeParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableDwellTimeParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::DwellTimeParameters)> self, DwellTimeParameters ptr=None) -> ScopedCopyableDwellTimeParameters
        __init__(mem::ScopedCopyablePtr<(cphd::DwellTimeParameters)> self) -> ScopedCopyableDwellTimeParameters
        __init__(mem::ScopedCopyablePtr<(cphd::DwellTimeParameters)> self, ScopedCopyableDwellTimeParameters rhs) -> ScopedCopyableDwellTimeParameters
        """
        this = _cphd.new_ScopedCopyableDwellTimeParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableDwellTimeParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableDwellTimeParameters self) -> DwellTimeParameters"""
        return _cphd.ScopedCopyableDwellTimeParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableDwellTimeParameters self) -> DwellTimeParameters"""
        return _cphd.ScopedCopyableDwellTimeParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableDwellTimeParameters self) -> DwellTimeParameters"""
        return _cphd.ScopedCopyableDwellTimeParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableDwellTimeParameters self, DwellTimeParameters ptr=None)
        reset(ScopedCopyableDwellTimeParameters self)
        """
        return _cphd.ScopedCopyableDwellTimeParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableDwellTimeParameters
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableDwellTimeParameters self, DwellTimeParameters other) -> bool"""
        return _cphd.ScopedCopyableDwellTimeParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableDwellTimeParameters self, DwellTimeParameters other) -> bool"""
        return _cphd.ScopedCopyableDwellTimeParameters___ne__(self, other)

    __swig_setmethods__["codTimePoly"] = _cphd.ScopedCopyableDwellTimeParameters_codTimePoly_set
    __swig_getmethods__["codTimePoly"] = _cphd.ScopedCopyableDwellTimeParameters_codTimePoly_get
    if _newclass:
        codTimePoly = _swig_property(_cphd.ScopedCopyableDwellTimeParameters_codTimePoly_get, _cphd.ScopedCopyableDwellTimeParameters_codTimePoly_set)
    __swig_setmethods__["dwellTimePoly"] = _cphd.ScopedCopyableDwellTimeParameters_dwellTimePoly_set
    __swig_getmethods__["dwellTimePoly"] = _cphd.ScopedCopyableDwellTimeParameters_dwellTimePoly_get
    if _newclass:
        dwellTimePoly = _swig_property(_cphd.ScopedCopyableDwellTimeParameters_dwellTimePoly_get, _cphd.ScopedCopyableDwellTimeParameters_dwellTimePoly_set)
ScopedCopyableDwellTimeParameters_swigregister = _cphd.ScopedCopyableDwellTimeParameters_swigregister
ScopedCopyableDwellTimeParameters_swigregister(ScopedCopyableDwellTimeParameters)


def makeScopedCopyableDwellTimeParameters():
    """makeScopedCopyableDwellTimeParameters() -> ScopedCopyableDwellTimeParameters"""
    return _cphd.makeScopedCopyableDwellTimeParameters()
class ScopedCopyableAreaPlane(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::AreaPlane)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAreaPlane, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::AreaPlane)> self, AreaPlane ptr=None) -> ScopedCopyableAreaPlane
        __init__(mem::ScopedCopyablePtr<(cphd::AreaPlane)> self) -> ScopedCopyableAreaPlane
        __init__(mem::ScopedCopyablePtr<(cphd::AreaPlane)> self, ScopedCopyableAreaPlane rhs) -> ScopedCopyableAreaPlane
        """
        this = _cphd.new_ScopedCopyableAreaPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableAreaPlane___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableAreaPlane self) -> AreaPlane"""
        return _cphd.ScopedCopyableAreaPlane_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableAreaPlane self) -> AreaPlane"""
        return _cphd.ScopedCopyableAreaPlane___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableAreaPlane self) -> AreaPlane"""
        return _cphd.ScopedCopyableAreaPlane___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableAreaPlane self, AreaPlane ptr=None)
        reset(ScopedCopyableAreaPlane self)
        """
        return _cphd.ScopedCopyableAreaPlane_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableAreaPlane
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableAreaPlane self, AreaPlane other) -> bool"""
        return _cphd.ScopedCopyableAreaPlane___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableAreaPlane self, AreaPlane other) -> bool"""
        return _cphd.ScopedCopyableAreaPlane___ne__(self, other)

    __swig_setmethods__["referencePoint"] = _cphd.ScopedCopyableAreaPlane_referencePoint_set
    __swig_getmethods__["referencePoint"] = _cphd.ScopedCopyableAreaPlane_referencePoint_get
    if _newclass:
        referencePoint = _swig_property(_cphd.ScopedCopyableAreaPlane_referencePoint_get, _cphd.ScopedCopyableAreaPlane_referencePoint_set)
    __swig_setmethods__["xDirection"] = _cphd.ScopedCopyableAreaPlane_xDirection_set
    __swig_getmethods__["xDirection"] = _cphd.ScopedCopyableAreaPlane_xDirection_get
    if _newclass:
        xDirection = _swig_property(_cphd.ScopedCopyableAreaPlane_xDirection_get, _cphd.ScopedCopyableAreaPlane_xDirection_set)
    __swig_setmethods__["yDirection"] = _cphd.ScopedCopyableAreaPlane_yDirection_set
    __swig_getmethods__["yDirection"] = _cphd.ScopedCopyableAreaPlane_yDirection_get
    if _newclass:
        yDirection = _swig_property(_cphd.ScopedCopyableAreaPlane_yDirection_get, _cphd.ScopedCopyableAreaPlane_yDirection_set)
    __swig_setmethods__["dwellTime"] = _cphd.ScopedCopyableAreaPlane_dwellTime_set
    __swig_getmethods__["dwellTime"] = _cphd.ScopedCopyableAreaPlane_dwellTime_get
    if _newclass:
        dwellTime = _swig_property(_cphd.ScopedCopyableAreaPlane_dwellTime_get, _cphd.ScopedCopyableAreaPlane_dwellTime_set)
ScopedCopyableAreaPlane_swigregister = _cphd.ScopedCopyableAreaPlane_swigregister
ScopedCopyableAreaPlane_swigregister(ScopedCopyableAreaPlane)


def makeScopedCopyableAreaPlane():
    """makeScopedCopyableAreaPlane() -> ScopedCopyableAreaPlane"""
    return _cphd.makeScopedCopyableAreaPlane()
class StdAutoFxParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::FxParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoFxParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoFxParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::FxParameters)> self) -> StdAutoFxParameters"""
        this = _cphd.new_StdAutoFxParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoFxParameters
    __del__ = lambda self: None
StdAutoFxParameters_swigregister = _cphd.StdAutoFxParameters_swigregister
StdAutoFxParameters_swigregister(StdAutoFxParameters)

class ScopedCopyableFxParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::FxParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableFxParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableFxParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::FxParameters)> self, FxParameters ptr=None) -> ScopedCopyableFxParameters
        __init__(mem::ScopedCopyablePtr<(cphd::FxParameters)> self) -> ScopedCopyableFxParameters
        __init__(mem::ScopedCopyablePtr<(cphd::FxParameters)> self, ScopedCopyableFxParameters rhs) -> ScopedCopyableFxParameters
        """
        this = _cphd.new_ScopedCopyableFxParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableFxParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableFxParameters self) -> FxParameters"""
        return _cphd.ScopedCopyableFxParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableFxParameters self) -> FxParameters"""
        return _cphd.ScopedCopyableFxParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableFxParameters self) -> FxParameters"""
        return _cphd.ScopedCopyableFxParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableFxParameters self, FxParameters ptr=None)
        reset(ScopedCopyableFxParameters self)
        """
        return _cphd.ScopedCopyableFxParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableFxParameters
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableFxParameters self, FxParameters other) -> bool"""
        return _cphd.ScopedCopyableFxParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableFxParameters self, FxParameters other) -> bool"""
        return _cphd.ScopedCopyableFxParameters___ne__(self, other)

    __swig_setmethods__["Fx0"] = _cphd.ScopedCopyableFxParameters_Fx0_set
    __swig_getmethods__["Fx0"] = _cphd.ScopedCopyableFxParameters_Fx0_get
    if _newclass:
        Fx0 = _swig_property(_cphd.ScopedCopyableFxParameters_Fx0_get, _cphd.ScopedCopyableFxParameters_Fx0_set)
    __swig_setmethods__["FxSS"] = _cphd.ScopedCopyableFxParameters_FxSS_set
    __swig_getmethods__["FxSS"] = _cphd.ScopedCopyableFxParameters_FxSS_get
    if _newclass:
        FxSS = _swig_property(_cphd.ScopedCopyableFxParameters_FxSS_get, _cphd.ScopedCopyableFxParameters_FxSS_set)
    __swig_setmethods__["Fx1"] = _cphd.ScopedCopyableFxParameters_Fx1_set
    __swig_getmethods__["Fx1"] = _cphd.ScopedCopyableFxParameters_Fx1_get
    if _newclass:
        Fx1 = _swig_property(_cphd.ScopedCopyableFxParameters_Fx1_get, _cphd.ScopedCopyableFxParameters_Fx1_set)
    __swig_setmethods__["Fx2"] = _cphd.ScopedCopyableFxParameters_Fx2_set
    __swig_getmethods__["Fx2"] = _cphd.ScopedCopyableFxParameters_Fx2_get
    if _newclass:
        Fx2 = _swig_property(_cphd.ScopedCopyableFxParameters_Fx2_get, _cphd.ScopedCopyableFxParameters_Fx2_set)
ScopedCopyableFxParameters_swigregister = _cphd.ScopedCopyableFxParameters_swigregister
ScopedCopyableFxParameters_swigregister(ScopedCopyableFxParameters)


def makeScopedCopyableFxParameters():
    """makeScopedCopyableFxParameters() -> ScopedCopyableFxParameters"""
    return _cphd.makeScopedCopyableFxParameters()
class StdAutoTOAParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TOAParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTOAParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTOAParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TOAParameters)> self) -> StdAutoTOAParameters"""
        this = _cphd.new_StdAutoTOAParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTOAParameters
    __del__ = lambda self: None
StdAutoTOAParameters_swigregister = _cphd.StdAutoTOAParameters_swigregister
StdAutoTOAParameters_swigregister(StdAutoTOAParameters)

class ScopedCopyableTOAParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TOAParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTOAParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTOAParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TOAParameters)> self, TOAParameters ptr=None) -> ScopedCopyableTOAParameters
        __init__(mem::ScopedCopyablePtr<(cphd::TOAParameters)> self) -> ScopedCopyableTOAParameters
        __init__(mem::ScopedCopyablePtr<(cphd::TOAParameters)> self, ScopedCopyableTOAParameters rhs) -> ScopedCopyableTOAParameters
        """
        this = _cphd.new_ScopedCopyableTOAParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTOAParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableTOAParameters self) -> TOAParameters"""
        return _cphd.ScopedCopyableTOAParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableTOAParameters self) -> TOAParameters"""
        return _cphd.ScopedCopyableTOAParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableTOAParameters self) -> TOAParameters"""
        return _cphd.ScopedCopyableTOAParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableTOAParameters self, TOAParameters ptr=None)
        reset(ScopedCopyableTOAParameters self)
        """
        return _cphd.ScopedCopyableTOAParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTOAParameters
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableTOAParameters self, TOAParameters other) -> bool"""
        return _cphd.ScopedCopyableTOAParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableTOAParameters self, TOAParameters other) -> bool"""
        return _cphd.ScopedCopyableTOAParameters___ne__(self, other)

    __swig_setmethods__["deltaTOA0"] = _cphd.ScopedCopyableTOAParameters_deltaTOA0_set
    __swig_getmethods__["deltaTOA0"] = _cphd.ScopedCopyableTOAParameters_deltaTOA0_get
    if _newclass:
        deltaTOA0 = _swig_property(_cphd.ScopedCopyableTOAParameters_deltaTOA0_get, _cphd.ScopedCopyableTOAParameters_deltaTOA0_set)
    __swig_setmethods__["toaSS"] = _cphd.ScopedCopyableTOAParameters_toaSS_set
    __swig_getmethods__["toaSS"] = _cphd.ScopedCopyableTOAParameters_toaSS_get
    if _newclass:
        toaSS = _swig_property(_cphd.ScopedCopyableTOAParameters_toaSS_get, _cphd.ScopedCopyableTOAParameters_toaSS_set)
ScopedCopyableTOAParameters_swigregister = _cphd.ScopedCopyableTOAParameters_swigregister
ScopedCopyableTOAParameters_swigregister(ScopedCopyableTOAParameters)


def makeScopedCopyableTOAParameters():
    """makeScopedCopyableTOAParameters() -> ScopedCopyableTOAParameters"""
    return _cphd.makeScopedCopyableTOAParameters()
class StdAutoCphdAntenna(_object):
    """Proxy of C++ std::auto_ptr<(cphd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoCphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoCphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::Antenna)> self) -> StdAutoCphdAntenna"""
        this = _cphd.new_StdAutoCphdAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoCphdAntenna
    __del__ = lambda self: None
StdAutoCphdAntenna_swigregister = _cphd.StdAutoCphdAntenna_swigregister
StdAutoCphdAntenna_swigregister(StdAutoCphdAntenna)

class ScopedCopyableCphdAntenna(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableCphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableCphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self, CphdAntenna ptr=None) -> ScopedCopyableCphdAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self) -> ScopedCopyableCphdAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self, ScopedCopyableCphdAntenna rhs) -> ScopedCopyableCphdAntenna
        """
        this = _cphd.new_ScopedCopyableCphdAntenna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableCphdAntenna___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableCphdAntenna self, CphdAntenna ptr=None)
        reset(ScopedCopyableCphdAntenna self)
        """
        return _cphd.ScopedCopyableCphdAntenna_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableCphdAntenna
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableCphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.ScopedCopyableCphdAntenna___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableCphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.ScopedCopyableCphdAntenna___ne__(self, other)

    __swig_setmethods__["numTxAnt"] = _cphd.ScopedCopyableCphdAntenna_numTxAnt_set
    __swig_getmethods__["numTxAnt"] = _cphd.ScopedCopyableCphdAntenna_numTxAnt_get
    if _newclass:
        numTxAnt = _swig_property(_cphd.ScopedCopyableCphdAntenna_numTxAnt_get, _cphd.ScopedCopyableCphdAntenna_numTxAnt_set)
    __swig_setmethods__["numRcvAnt"] = _cphd.ScopedCopyableCphdAntenna_numRcvAnt_set
    __swig_getmethods__["numRcvAnt"] = _cphd.ScopedCopyableCphdAntenna_numRcvAnt_get
    if _newclass:
        numRcvAnt = _swig_property(_cphd.ScopedCopyableCphdAntenna_numRcvAnt_get, _cphd.ScopedCopyableCphdAntenna_numRcvAnt_set)
    __swig_setmethods__["numTWAnt"] = _cphd.ScopedCopyableCphdAntenna_numTWAnt_set
    __swig_getmethods__["numTWAnt"] = _cphd.ScopedCopyableCphdAntenna_numTWAnt_get
    if _newclass:
        numTWAnt = _swig_property(_cphd.ScopedCopyableCphdAntenna_numTWAnt_get, _cphd.ScopedCopyableCphdAntenna_numTWAnt_set)
    __swig_setmethods__["tx"] = _cphd.ScopedCopyableCphdAntenna_tx_set
    __swig_getmethods__["tx"] = _cphd.ScopedCopyableCphdAntenna_tx_get
    if _newclass:
        tx = _swig_property(_cphd.ScopedCopyableCphdAntenna_tx_get, _cphd.ScopedCopyableCphdAntenna_tx_set)
    __swig_setmethods__["rcv"] = _cphd.ScopedCopyableCphdAntenna_rcv_set
    __swig_getmethods__["rcv"] = _cphd.ScopedCopyableCphdAntenna_rcv_get
    if _newclass:
        rcv = _swig_property(_cphd.ScopedCopyableCphdAntenna_rcv_get, _cphd.ScopedCopyableCphdAntenna_rcv_set)
    __swig_setmethods__["twoWay"] = _cphd.ScopedCopyableCphdAntenna_twoWay_set
    __swig_getmethods__["twoWay"] = _cphd.ScopedCopyableCphdAntenna_twoWay_get
    if _newclass:
        twoWay = _swig_property(_cphd.ScopedCopyableCphdAntenna_twoWay_get, _cphd.ScopedCopyableCphdAntenna_twoWay_set)
ScopedCopyableCphdAntenna_swigregister = _cphd.ScopedCopyableCphdAntenna_swigregister
ScopedCopyableCphdAntenna_swigregister(ScopedCopyableCphdAntenna)


def makeScopedCopyableCphdAntenna():
    """makeScopedCopyableCphdAntenna() -> ScopedCopyableCphdAntenna"""
    return _cphd.makeScopedCopyableCphdAntenna()
# This file is compatible with both classic and new-style classes.


