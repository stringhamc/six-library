# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_six_sicd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_six_sicd')
    _six_sicd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_six_sicd', [dirname(__file__)])
        except ImportError:
            import _six_sicd
            return _six_sicd
        try:
            _mod = imp.load_module('_six_sicd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _six_sicd = swig_import_helper()
    del swig_import_helper
else:
    import _six_sicd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _six_sicd.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _six_sicd.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _six_sicd.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _six_sicd.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _six_sicd.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _six_sicd.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _six_sicd.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _six_sicd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ComponentInfoDestructor(_object):
    """Proxy of C++ nitf::ComponentInfoDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentInfoDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentInfoDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_ComponentInfoDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(ComponentInfoDestructor self, nitf_ComponentInfo * nativeObject)"""
        return _six_sicd.ComponentInfoDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::ComponentInfoDestructor self) -> ComponentInfoDestructor"""
        this = _six_sicd.new_ComponentInfoDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ComponentInfoDestructor_swigregister = _six_sicd.ComponentInfoDestructor_swigregister
ComponentInfoDestructor_swigregister(ComponentInfoDestructor)

class ComponentInfo(_object):
    """Proxy of C++ nitf::ComponentInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::ComponentInfo self, ComponentInfo x) -> ComponentInfo
        __init__(nitf::ComponentInfo self, nitf_ComponentInfo * x) -> ComponentInfo
        """
        this = _six_sicd.new_ComponentInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(ComponentInfo self) -> ComponentInfo"""
        return _six_sicd.ComponentInfo_clone(self)

    __swig_destroy__ = _six_sicd.delete_ComponentInfo
    __del__ = lambda self: None

    def getLengthSubheader(self):
        """getLengthSubheader(ComponentInfo self) -> Field"""
        return _six_sicd.ComponentInfo_getLengthSubheader(self)


    def getLengthData(self):
        """getLengthData(ComponentInfo self) -> Field"""
        return _six_sicd.ComponentInfo_getLengthData(self)

ComponentInfo_swigregister = _six_sicd.ComponentInfo_swigregister
ComponentInfo_swigregister(ComponentInfo)

class DESegmentDestructor(_object):
    """Proxy of C++ nitf::DESegmentDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DESegmentDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DESegmentDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_DESegmentDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(DESegmentDestructor self, nitf_DESegment * nativeObject)"""
        return _six_sicd.DESegmentDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::DESegmentDestructor self) -> DESegmentDestructor"""
        this = _six_sicd.new_DESegmentDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DESegmentDestructor_swigregister = _six_sicd.DESegmentDestructor_swigregister
DESegmentDestructor_swigregister(DESegmentDestructor)

class DESegment(_object):
    """Proxy of C++ nitf::DESegment class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DESegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DESegment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::DESegment self, DESegment x) -> DESegment
        __init__(nitf::DESegment self, nitf_DESegment * x) -> DESegment
        __init__(nitf::DESegment self) -> DESegment
        __init__(nitf::DESegment self, NITF_DATA * x) -> DESegment
        """
        this = _six_sicd.new_DESegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(DESegment self) -> DESegment"""
        return _six_sicd.DESegment_clone(self)

    __swig_destroy__ = _six_sicd.delete_DESegment
    __del__ = lambda self: None

    def getSubheader(self):
        """getSubheader(DESegment self) -> DESubheader"""
        return _six_sicd.DESegment_getSubheader(self)


    def setSubheader(self, value):
        """setSubheader(DESegment self, DESubheader value)"""
        return _six_sicd.DESegment_setSubheader(self, value)


    def getOffset(self):
        """getOffset(DESegment self) -> nitf::Uint64"""
        return _six_sicd.DESegment_getOffset(self)


    def setOffset(self, value):
        """setOffset(DESegment self, nitf::Uint64 value)"""
        return _six_sicd.DESegment_setOffset(self, value)


    def getEnd(self):
        """getEnd(DESegment self) -> nitf::Uint64"""
        return _six_sicd.DESegment_getEnd(self)


    def setEnd(self, value):
        """setEnd(DESegment self, nitf::Uint64 value)"""
        return _six_sicd.DESegment_setEnd(self, value)

DESegment_swigregister = _six_sicd.DESegment_swigregister
DESegment_swigregister(DESegment)

class DESubheaderDestructor(_object):
    """Proxy of C++ nitf::DESubheaderDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DESubheaderDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DESubheaderDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_DESubheaderDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(DESubheaderDestructor self, nitf_DESubheader * nativeObject)"""
        return _six_sicd.DESubheaderDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::DESubheaderDestructor self) -> DESubheaderDestructor"""
        this = _six_sicd.new_DESubheaderDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DESubheaderDestructor_swigregister = _six_sicd.DESubheaderDestructor_swigregister
DESubheaderDestructor_swigregister(DESubheaderDestructor)

class DESubheader(_object):
    """Proxy of C++ nitf::DESubheader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DESubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DESubheader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::DESubheader self, DESubheader x) -> DESubheader
        __init__(nitf::DESubheader self, nitf_DESubheader * x) -> DESubheader
        __init__(nitf::DESubheader self) -> DESubheader
        """
        this = _six_sicd.new_DESubheader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(DESubheader self) -> DESubheader"""
        return _six_sicd.DESubheader_clone(self)

    __swig_destroy__ = _six_sicd.delete_DESubheader
    __del__ = lambda self: None

    def getFilePartType(self):
        """getFilePartType(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getFilePartType(self)


    def getTypeID(self):
        """getTypeID(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getTypeID(self)


    def getVersion(self):
        """getVersion(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getVersion(self)


    def getSecurityClass(self):
        """getSecurityClass(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getSecurityClass(self)


    def getSecurityGroup(self):
        """getSecurityGroup(DESubheader self) -> nitf::FileSecurity"""
        return _six_sicd.DESubheader_getSecurityGroup(self)


    def setSecurityGroup(self, value):
        """setSecurityGroup(DESubheader self, nitf::FileSecurity value)"""
        return _six_sicd.DESubheader_setSecurityGroup(self, value)


    def getOverflowedHeaderType(self):
        """getOverflowedHeaderType(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getOverflowedHeaderType(self)


    def getDataItemOverflowed(self):
        """getDataItemOverflowed(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getDataItemOverflowed(self)


    def getSubheaderFieldsLength(self):
        """getSubheaderFieldsLength(DESubheader self) -> Field"""
        return _six_sicd.DESubheader_getSubheaderFieldsLength(self)


    def getSubheaderFields(self):
        """getSubheaderFields(DESubheader self) -> TRE"""
        return _six_sicd.DESubheader_getSubheaderFields(self)


    def setSubheaderFields(self, fields):
        """setSubheaderFields(DESubheader self, TRE fields)"""
        return _six_sicd.DESubheader_setSubheaderFields(self, fields)


    def getDataLength(self):
        """getDataLength(DESubheader self) -> nitf::Uint32"""
        return _six_sicd.DESubheader_getDataLength(self)


    def setDataLength(self, value):
        """setDataLength(DESubheader self, nitf::Uint32 value)"""
        return _six_sicd.DESubheader_setDataLength(self, value)


    def getUserDefinedSection(self):
        """getUserDefinedSection(DESubheader self) -> Extensions"""
        return _six_sicd.DESubheader_getUserDefinedSection(self)


    def setUserDefinedSection(self, value):
        """setUserDefinedSection(DESubheader self, Extensions value)"""
        return _six_sicd.DESubheader_setUserDefinedSection(self, value)

DESubheader_swigregister = _six_sicd.DESubheader_swigregister
DESubheader_swigregister(DESubheader)

class ExtensionsIterator(_object):
    """Proxy of C++ nitf::ExtensionsIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtensionsIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtensionsIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_ExtensionsIterator
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(nitf::ExtensionsIterator self) -> ExtensionsIterator
        __init__(nitf::ExtensionsIterator self, ExtensionsIterator x) -> ExtensionsIterator
        __init__(nitf::ExtensionsIterator self, nitf_ExtensionsIterator x) -> ExtensionsIterator
        """
        this = _six_sicd.new_ExtensionsIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHandle(self):
        """getHandle(ExtensionsIterator self) -> nitf_ExtensionsIterator &"""
        return _six_sicd.ExtensionsIterator_getHandle(self)


    def setHandle(self, x):
        """setHandle(ExtensionsIterator self, nitf_ExtensionsIterator x)"""
        return _six_sicd.ExtensionsIterator_setHandle(self, x)


    def equals(self, it2):
        """equals(ExtensionsIterator self, ExtensionsIterator it2) -> bool"""
        return _six_sicd.ExtensionsIterator_equals(self, it2)


    def __eq__(self, it2):
        """__eq__(ExtensionsIterator self, ExtensionsIterator it2) -> bool"""
        return _six_sicd.ExtensionsIterator___eq__(self, it2)


    def notEqualTo(self, it2):
        """notEqualTo(ExtensionsIterator self, ExtensionsIterator it2) -> bool"""
        return _six_sicd.ExtensionsIterator_notEqualTo(self, it2)


    def __ne__(self, it2):
        """__ne__(ExtensionsIterator self, ExtensionsIterator it2) -> bool"""
        return _six_sicd.ExtensionsIterator___ne__(self, it2)


    def increment(self):
        """increment(ExtensionsIterator self)"""
        return _six_sicd.ExtensionsIterator_increment(self)


    def __ref__(self):
        """__ref__(ExtensionsIterator self) -> TRE"""
        return _six_sicd.ExtensionsIterator___ref__(self)


    def get(self):
        """get(ExtensionsIterator self) -> TRE"""
        return _six_sicd.ExtensionsIterator_get(self)

ExtensionsIterator_swigregister = _six_sicd.ExtensionsIterator_swigregister
ExtensionsIterator_swigregister(ExtensionsIterator)

class ExtensionsDestructor(_object):
    """Proxy of C++ nitf::ExtensionsDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtensionsDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtensionsDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_ExtensionsDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(ExtensionsDestructor self, nitf_Extensions * nativeObject)"""
        return _six_sicd.ExtensionsDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::ExtensionsDestructor self) -> ExtensionsDestructor"""
        this = _six_sicd.new_ExtensionsDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ExtensionsDestructor_swigregister = _six_sicd.ExtensionsDestructor_swigregister
ExtensionsDestructor_swigregister(ExtensionsDestructor)

class Extensions(_object):
    """Proxy of C++ nitf::Extensions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Extensions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Extensions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::Extensions self, Extensions x) -> Extensions
        __init__(nitf::Extensions self, nitf_Extensions * x) -> Extensions
        __init__(nitf::Extensions self) -> Extensions
        """
        this = _six_sicd.new_Extensions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(Extensions self) -> Extensions"""
        return _six_sicd.Extensions_clone(self)

    __swig_destroy__ = _six_sicd.delete_Extensions
    __del__ = lambda self: None

    def appendTRE(self, tre):
        """appendTRE(Extensions self, TRE tre)"""
        return _six_sicd.Extensions_appendTRE(self, tre)


    def getTREsByName(self, name):
        """getTREsByName(Extensions self, std::string const & name) -> nitf::List"""
        return _six_sicd.Extensions_getTREsByName(self, name)


    def removeTREsByName(self, name):
        """removeTREsByName(Extensions self, std::string const & name)"""
        return _six_sicd.Extensions_removeTREsByName(self, name)


    def remove(self, iter):
        """remove(Extensions self, ExtensionsIterator iter)"""
        return _six_sicd.Extensions_remove(self, iter)


    def getHash(self):
        """getHash(Extensions self) -> nitf::HashTable"""
        return _six_sicd.Extensions_getHash(self)


    def setHash(self, value):
        """setHash(Extensions self, nitf::HashTable & value)"""
        return _six_sicd.Extensions_setHash(self, value)


    def exists(self, key):
        """exists(Extensions self, std::string const & key) -> bool"""
        return _six_sicd.Extensions_exists(self, key)


    def begin(self):
        """begin(Extensions self) -> ExtensionsIterator"""
        return _six_sicd.Extensions_begin(self)


    def end(self):
        """end(Extensions self) -> ExtensionsIterator"""
        return _six_sicd.Extensions_end(self)


    def computeLength(self, version):
        """computeLength(Extensions self, nitf::Version version) -> nitf::Uint64"""
        return _six_sicd.Extensions_computeLength(self, version)

Extensions_swigregister = _six_sicd.Extensions_swigregister
Extensions_swigregister(Extensions)

class Field(_object):
    """Proxy of C++ nitf::Field class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    BCS_A = _six_sicd.Field_BCS_A
    BCS_N = _six_sicd.Field_BCS_N
    BINARY = _six_sicd.Field_BINARY

    def __init__(self, *args):
        """
        __init__(nitf::Field self, Field x) -> Field
        __init__(nitf::Field self, nitf_Field * field) -> Field
        __init__(nitf::Field self, NITF_DATA * x) -> Field
        """
        this = _six_sicd.new_Field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_Field
    __del__ = lambda self: None

    def set(self, *args):
        """
        set(Field self, nitf::Uint8 data)
        set(Field self, nitf::Uint16 data)
        set(Field self, nitf::Uint32 data)
        set(Field self, nitf::Uint64 data)
        set(Field self, nitf::Int8 data)
        set(Field self, nitf::Int16 data)
        set(Field self, nitf::Int32 data)
        set(Field self, nitf::Int64 data)
        set(Field self, float data)
        set(Field self, double data)
        set(Field self, char const * data)
        set(Field self, std::string const & data)
        set(Field self, DateTime dateTime, std::string const & format)
        set(Field self, DateTime dateTime)
        """
        return _six_sicd.Field_set(self, *args)


    def asDateTime(self, *args):
        """
        asDateTime(Field self, std::string const & format) -> DateTime
        asDateTime(Field self) -> DateTime
        """
        return _six_sicd.Field_asDateTime(self, *args)


    def getType(self):
        """getType(Field self) -> nitf::Field::FieldType"""
        return _six_sicd.Field_getType(self)


    def setType(self, type):
        """setType(Field self, nitf::Field::FieldType type)"""
        return _six_sicd.Field_setType(self, type)


    def getRawData(self):
        """getRawData(Field self) -> char *"""
        return _six_sicd.Field_getRawData(self)


    def setRawData(self, raw, length):
        """setRawData(Field self, char * raw, size_t length)"""
        return _six_sicd.Field_setRawData(self, raw, length)


    def getLength(self):
        """getLength(Field self) -> size_t"""
        return _six_sicd.Field_getLength(self)


    def resize(self, length):
        """resize(Field self, size_t length)"""
        return _six_sicd.Field_resize(self, length)


    def toString(self):
        """toString(Field self) -> std::string"""
        return _six_sicd.Field_toString(self)


    def parse(self):
        data = self.getRawData()
        try:
            data = float(data)
            if data - int(data) == 0:
                data = int(data)
            return data
        except ValueError:
            return str(data)

Field_swigregister = _six_sicd.Field_swigregister
Field_swigregister(Field)

class FileHeaderDestructor(_object):
    """Proxy of C++ nitf::FileHeaderDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHeaderDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileHeaderDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_FileHeaderDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(FileHeaderDestructor self, nitf_FileHeader * nativeObject)"""
        return _six_sicd.FileHeaderDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::FileHeaderDestructor self) -> FileHeaderDestructor"""
        this = _six_sicd.new_FileHeaderDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FileHeaderDestructor_swigregister = _six_sicd.FileHeaderDestructor_swigregister
FileHeaderDestructor_swigregister(FileHeaderDestructor)

class FileHeader(_object):
    """Proxy of C++ nitf::FileHeader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileHeader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::FileHeader self, FileHeader x) -> FileHeader
        __init__(nitf::FileHeader self, nitf_FileHeader * x) -> FileHeader
        __init__(nitf::FileHeader self) -> FileHeader
        """
        this = _six_sicd.new_FileHeader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(FileHeader self) -> FileHeader"""
        return _six_sicd.FileHeader_clone(self)

    __swig_destroy__ = _six_sicd.delete_FileHeader
    __del__ = lambda self: None

    def getFileHeader(self):
        """getFileHeader(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getFileHeader(self)


    def getFileVersion(self):
        """getFileVersion(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getFileVersion(self)


    def getComplianceLevel(self):
        """getComplianceLevel(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getComplianceLevel(self)


    def getSystemType(self):
        """getSystemType(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getSystemType(self)


    def getOriginStationID(self):
        """getOriginStationID(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getOriginStationID(self)


    def getFileDateTime(self):
        """getFileDateTime(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getFileDateTime(self)


    def getFileTitle(self):
        """getFileTitle(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getFileTitle(self)


    def getClassification(self):
        """getClassification(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getClassification(self)


    def getSecurityGroup(self):
        """getSecurityGroup(FileHeader self) -> nitf::FileSecurity"""
        return _six_sicd.FileHeader_getSecurityGroup(self)


    def setSecurityGroup(self, value):
        """setSecurityGroup(FileHeader self, nitf::FileSecurity value)"""
        return _six_sicd.FileHeader_setSecurityGroup(self, value)


    def getMessageCopyNum(self):
        """getMessageCopyNum(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getMessageCopyNum(self)


    def getMessageNumCopies(self):
        """getMessageNumCopies(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getMessageNumCopies(self)


    def getEncrypted(self):
        """getEncrypted(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getEncrypted(self)


    def getBackgroundColor(self):
        """getBackgroundColor(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getBackgroundColor(self)


    def getOriginatorName(self):
        """getOriginatorName(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getOriginatorName(self)


    def getOriginatorPhone(self):
        """getOriginatorPhone(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getOriginatorPhone(self)


    def getFileLength(self):
        """getFileLength(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getFileLength(self)


    def getHeaderLength(self):
        """getHeaderLength(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getHeaderLength(self)


    def getNumImages(self):
        """getNumImages(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getNumImages(self)


    def getNumGraphics(self):
        """getNumGraphics(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getNumGraphics(self)


    def getNumLabels(self):
        """getNumLabels(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getNumLabels(self)


    def getNumTexts(self):
        """getNumTexts(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getNumTexts(self)


    def getNumDataExtensions(self):
        """getNumDataExtensions(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getNumDataExtensions(self)


    def getNumReservedExtensions(self):
        """getNumReservedExtensions(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getNumReservedExtensions(self)


    def getImageInfo(self, i):
        """getImageInfo(FileHeader self, int i) -> ComponentInfo"""
        return _six_sicd.FileHeader_getImageInfo(self, i)


    def getGraphicInfo(self, i):
        """getGraphicInfo(FileHeader self, int i) -> ComponentInfo"""
        return _six_sicd.FileHeader_getGraphicInfo(self, i)


    def getLabelInfo(self, i):
        """getLabelInfo(FileHeader self, int i) -> ComponentInfo"""
        return _six_sicd.FileHeader_getLabelInfo(self, i)


    def getTextInfo(self, i):
        """getTextInfo(FileHeader self, int i) -> ComponentInfo"""
        return _six_sicd.FileHeader_getTextInfo(self, i)


    def getDataExtensionInfo(self, i):
        """getDataExtensionInfo(FileHeader self, int i) -> ComponentInfo"""
        return _six_sicd.FileHeader_getDataExtensionInfo(self, i)


    def getReservedExtensionInfo(self, i):
        """getReservedExtensionInfo(FileHeader self, int i) -> ComponentInfo"""
        return _six_sicd.FileHeader_getReservedExtensionInfo(self, i)


    def getUserDefinedHeaderLength(self):
        """getUserDefinedHeaderLength(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getUserDefinedHeaderLength(self)


    def getUserDefinedOverflow(self):
        """getUserDefinedOverflow(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getUserDefinedOverflow(self)


    def getExtendedHeaderLength(self):
        """getExtendedHeaderLength(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getExtendedHeaderLength(self)


    def getExtendedHeaderOverflow(self):
        """getExtendedHeaderOverflow(FileHeader self) -> Field"""
        return _six_sicd.FileHeader_getExtendedHeaderOverflow(self)


    def getUserDefinedSection(self):
        """getUserDefinedSection(FileHeader self) -> Extensions"""
        return _six_sicd.FileHeader_getUserDefinedSection(self)


    def setUserDefinedSection(self, value):
        """setUserDefinedSection(FileHeader self, Extensions value)"""
        return _six_sicd.FileHeader_setUserDefinedSection(self, value)


    def getExtendedSection(self):
        """getExtendedSection(FileHeader self) -> Extensions"""
        return _six_sicd.FileHeader_getExtendedSection(self)


    def setExtendedSection(self, value):
        """setExtendedSection(FileHeader self, Extensions value)"""
        return _six_sicd.FileHeader_setExtendedSection(self, value)

FileHeader_swigregister = _six_sicd.FileHeader_swigregister
FileHeader_swigregister(FileHeader)

class ImageSegmentDestructor(_object):
    """Proxy of C++ nitf::ImageSegmentDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSegmentDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSegmentDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_ImageSegmentDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(ImageSegmentDestructor self, nitf_ImageSegment * nativeObject)"""
        return _six_sicd.ImageSegmentDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::ImageSegmentDestructor self) -> ImageSegmentDestructor"""
        this = _six_sicd.new_ImageSegmentDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ImageSegmentDestructor_swigregister = _six_sicd.ImageSegmentDestructor_swigregister
ImageSegmentDestructor_swigregister(ImageSegmentDestructor)

class ImageSegment(_object):
    """Proxy of C++ nitf::ImageSegment class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSegment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::ImageSegment self, ImageSegment x) -> ImageSegment
        __init__(nitf::ImageSegment self, nitf_ImageSegment * x) -> ImageSegment
        __init__(nitf::ImageSegment self) -> ImageSegment
        __init__(nitf::ImageSegment self, NITF_DATA * x) -> ImageSegment
        """
        this = _six_sicd.new_ImageSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(ImageSegment self) -> ImageSegment"""
        return _six_sicd.ImageSegment_clone(self)

    __swig_destroy__ = _six_sicd.delete_ImageSegment
    __del__ = lambda self: None

    def getSubheader(self):
        """getSubheader(ImageSegment self) -> ImageSubheader"""
        return _six_sicd.ImageSegment_getSubheader(self)


    def setSubheader(self, value):
        """setSubheader(ImageSegment self, ImageSubheader value)"""
        return _six_sicd.ImageSegment_setSubheader(self, value)


    def getImageOffset(self):
        """getImageOffset(ImageSegment self) -> nitf::Uint64"""
        return _six_sicd.ImageSegment_getImageOffset(self)


    def setImageOffset(self, value):
        """setImageOffset(ImageSegment self, nitf::Uint64 value)"""
        return _six_sicd.ImageSegment_setImageOffset(self, value)


    def getImageEnd(self):
        """getImageEnd(ImageSegment self) -> nitf::Uint64"""
        return _six_sicd.ImageSegment_getImageEnd(self)


    def setImageEnd(self, value):
        """setImageEnd(ImageSegment self, nitf::Uint64 value)"""
        return _six_sicd.ImageSegment_setImageEnd(self, value)

ImageSegment_swigregister = _six_sicd.ImageSegment_swigregister
ImageSegment_swigregister(ImageSegment)

class ImageSourceDestructor(_object):
    """Proxy of C++ nitf::ImageSourceDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSourceDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSourceDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_ImageSourceDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(ImageSourceDestructor self, nitf_ImageSource * nativeObject)"""
        return _six_sicd.ImageSourceDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::ImageSourceDestructor self) -> ImageSourceDestructor"""
        this = _six_sicd.new_ImageSourceDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ImageSourceDestructor_swigregister = _six_sicd.ImageSourceDestructor_swigregister
ImageSourceDestructor_swigregister(ImageSourceDestructor)

class ImageSource(_object):
    """Proxy of C++ nitf::ImageSource class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::ImageSource self, ImageSource x) -> ImageSource
        __init__(nitf::ImageSource self, nitf_ImageSource * x) -> ImageSource
        __init__(nitf::ImageSource self) -> ImageSource
        """
        this = _six_sicd.new_ImageSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ImageSource
    __del__ = lambda self: None

    def addBand(self, bandSource):
        """addBand(ImageSource self, nitf::BandSource bandSource)"""
        return _six_sicd.ImageSource_addBand(self, bandSource)


    def getBand(self, n):
        """getBand(ImageSource self, int n) -> nitf::BandSource"""
        return _six_sicd.ImageSource_getBand(self, n)

ImageSource_swigregister = _six_sicd.ImageSource_swigregister
ImageSource_swigregister(ImageSource)

class ImageSubheaderDestructor(_object):
    """Proxy of C++ nitf::ImageSubheaderDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSubheaderDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSubheaderDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_ImageSubheaderDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(ImageSubheaderDestructor self, nitf_ImageSubheader * nativeObject)"""
        return _six_sicd.ImageSubheaderDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::ImageSubheaderDestructor self) -> ImageSubheaderDestructor"""
        this = _six_sicd.new_ImageSubheaderDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ImageSubheaderDestructor_swigregister = _six_sicd.ImageSubheaderDestructor_swigregister
ImageSubheaderDestructor_swigregister(ImageSubheaderDestructor)

class ImageSubheader(_object):
    """Proxy of C++ nitf::ImageSubheader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSubheader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::ImageSubheader self, ImageSubheader x) -> ImageSubheader
        __init__(nitf::ImageSubheader self, nitf_ImageSubheader * x) -> ImageSubheader
        __init__(nitf::ImageSubheader self) -> ImageSubheader
        """
        this = _six_sicd.new_ImageSubheader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(ImageSubheader self) -> ImageSubheader"""
        return _six_sicd.ImageSubheader_clone(self)

    __swig_destroy__ = _six_sicd.delete_ImageSubheader
    __del__ = lambda self: None

    def setPixelInformation(self, pvtype, nbpp, abpp, justification, irep, icat, bands):
        """setPixelInformation(ImageSubheader self, std::string pvtype, nitf::Uint32 nbpp, nitf::Uint32 abpp, std::string justification, std::string irep, std::string icat, std::vector< nitf::BandInfo,std::allocator< nitf::BandInfo > > & bands)"""
        return _six_sicd.ImageSubheader_setPixelInformation(self, pvtype, nbpp, abpp, justification, irep, icat, bands)


    def setCornersFromLatLons(self, type, corners):
        """setCornersFromLatLons(ImageSubheader self, nitf::CornersType type, double [4][2] corners)"""
        return _six_sicd.ImageSubheader_setCornersFromLatLons(self, type, corners)


    def getCornersAsLatLons(self, corners):
        """getCornersAsLatLons(ImageSubheader self, double [4][2] corners)"""
        return _six_sicd.ImageSubheader_getCornersAsLatLons(self, corners)


    def getCornersType(self):
        """getCornersType(ImageSubheader self) -> nitf::CornersType"""
        return _six_sicd.ImageSubheader_getCornersType(self)


    def setBlocking(self, numRows, numCols, numRowsPerBlock, numColsPerBlock, imode):
        """setBlocking(ImageSubheader self, nitf::Uint32 numRows, nitf::Uint32 numCols, nitf::Uint32 numRowsPerBlock, nitf::Uint32 numColsPerBlock, std::string const & imode)"""
        return _six_sicd.ImageSubheader_setBlocking(self, numRows, numCols, numRowsPerBlock, numColsPerBlock, imode)


    def computeBlocking(numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerCol, numBlocksPerRow):
        """computeBlocking(nitf::Uint32 numRows, nitf::Uint32 numCols, nitf::Uint32 & numRowsPerBlock, nitf::Uint32 & numColsPerBlock, nitf::Uint32 & numBlocksPerCol, nitf::Uint32 & numBlocksPerRow)"""
        return _six_sicd.ImageSubheader_computeBlocking(numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerCol, numBlocksPerRow)

    computeBlocking = staticmethod(computeBlocking)

    def setDimensions(self, numRows, numCols):
        """setDimensions(ImageSubheader self, nitf::Uint32 numRows, nitf::Uint32 numCols)"""
        return _six_sicd.ImageSubheader_setDimensions(self, numRows, numCols)


    def getBandCount(self):
        """getBandCount(ImageSubheader self) -> nitf::Uint32"""
        return _six_sicd.ImageSubheader_getBandCount(self)


    def createBands(self, numBands):
        """createBands(ImageSubheader self, nitf::Uint32 numBands)"""
        return _six_sicd.ImageSubheader_createBands(self, numBands)


    def insertImageComment(self, comment, index):
        """insertImageComment(ImageSubheader self, std::string comment, int index) -> int"""
        return _six_sicd.ImageSubheader_insertImageComment(self, comment, index)


    def removeImageComment(self, index):
        """removeImageComment(ImageSubheader self, int index)"""
        return _six_sicd.ImageSubheader_removeImageComment(self, index)


    def getFilePartType(self):
        """getFilePartType(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getFilePartType(self)


    def getImageId(self):
        """getImageId(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageId(self)


    def getImageDateAndTime(self):
        """getImageDateAndTime(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageDateAndTime(self)


    def getTargetId(self):
        """getTargetId(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getTargetId(self)


    def getImageTitle(self):
        """getImageTitle(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageTitle(self)


    def getImageSecurityClass(self):
        """getImageSecurityClass(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageSecurityClass(self)


    def getSecurityGroup(self):
        """getSecurityGroup(ImageSubheader self) -> nitf::FileSecurity"""
        return _six_sicd.ImageSubheader_getSecurityGroup(self)


    def setSecurityGroup(self, value):
        """setSecurityGroup(ImageSubheader self, nitf::FileSecurity value)"""
        return _six_sicd.ImageSubheader_setSecurityGroup(self, value)


    def getEncrypted(self):
        """getEncrypted(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getEncrypted(self)


    def getImageSource(self):
        """getImageSource(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageSource(self)


    def getNumRows(self):
        """getNumRows(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumRows(self)


    def getNumCols(self):
        """getNumCols(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumCols(self)


    def getPixelValueType(self):
        """getPixelValueType(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getPixelValueType(self)


    def getImageRepresentation(self):
        """getImageRepresentation(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageRepresentation(self)


    def getImageCategory(self):
        """getImageCategory(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageCategory(self)


    def getActualBitsPerPixel(self):
        """getActualBitsPerPixel(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getActualBitsPerPixel(self)


    def getPixelJustification(self):
        """getPixelJustification(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getPixelJustification(self)


    def getImageCoordinateSystem(self):
        """getImageCoordinateSystem(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageCoordinateSystem(self)


    def getCornerCoordinates(self):
        """getCornerCoordinates(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getCornerCoordinates(self)


    def getNumImageComments(self):
        """getNumImageComments(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumImageComments(self)


    def getImageComments(self):
        """getImageComments(ImageSubheader self) -> nitf::List"""
        return _six_sicd.ImageSubheader_getImageComments(self)


    def getImageCompression(self):
        """getImageCompression(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageCompression(self)


    def getCompressionRate(self):
        """getCompressionRate(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getCompressionRate(self)


    def getNumImageBands(self):
        """getNumImageBands(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumImageBands(self)


    def getNumMultispectralImageBands(self):
        """getNumMultispectralImageBands(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumMultispectralImageBands(self)


    def getBandInfo(self, band):
        """getBandInfo(ImageSubheader self, nitf::Uint32 band) -> nitf::BandInfo"""
        return _six_sicd.ImageSubheader_getBandInfo(self, band)


    def getImageSyncCode(self):
        """getImageSyncCode(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageSyncCode(self)


    def getImageMode(self):
        """getImageMode(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageMode(self)


    def getNumBlocksPerRow(self):
        """getNumBlocksPerRow(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumBlocksPerRow(self)


    def getNumBlocksPerCol(self):
        """getNumBlocksPerCol(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumBlocksPerCol(self)


    def getNumPixelsPerHorizBlock(self):
        """getNumPixelsPerHorizBlock(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumPixelsPerHorizBlock(self)


    def getNumPixelsPerVertBlock(self):
        """getNumPixelsPerVertBlock(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumPixelsPerVertBlock(self)


    def getNumBitsPerPixel(self):
        """getNumBitsPerPixel(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getNumBitsPerPixel(self)


    def getImageDisplayLevel(self):
        """getImageDisplayLevel(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageDisplayLevel(self)


    def getImageAttachmentLevel(self):
        """getImageAttachmentLevel(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageAttachmentLevel(self)


    def getImageLocation(self):
        """getImageLocation(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageLocation(self)


    def getImageMagnification(self):
        """getImageMagnification(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getImageMagnification(self)


    def getUserDefinedImageDataLength(self):
        """getUserDefinedImageDataLength(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getUserDefinedImageDataLength(self)


    def getUserDefinedOverflow(self):
        """getUserDefinedOverflow(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getUserDefinedOverflow(self)


    def getExtendedHeaderLength(self):
        """getExtendedHeaderLength(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getExtendedHeaderLength(self)


    def getExtendedHeaderOverflow(self):
        """getExtendedHeaderOverflow(ImageSubheader self) -> Field"""
        return _six_sicd.ImageSubheader_getExtendedHeaderOverflow(self)


    def getUserDefinedSection(self):
        """getUserDefinedSection(ImageSubheader self) -> Extensions"""
        return _six_sicd.ImageSubheader_getUserDefinedSection(self)


    def setUserDefinedSection(self, value):
        """setUserDefinedSection(ImageSubheader self, Extensions value)"""
        return _six_sicd.ImageSubheader_setUserDefinedSection(self, value)


    def getExtendedSection(self):
        """getExtendedSection(ImageSubheader self) -> Extensions"""
        return _six_sicd.ImageSubheader_getExtendedSection(self)


    def setExtendedSection(self, value):
        """setExtendedSection(ImageSubheader self, Extensions value)"""
        return _six_sicd.ImageSubheader_setExtendedSection(self, value)


    def getActualImageDim(dim, numDimsPerBlock):
        """getActualImageDim(size_t dim, size_t numDimsPerBlock) -> size_t"""
        return _six_sicd.ImageSubheader_getActualImageDim(dim, numDimsPerBlock)

    getActualImageDim = staticmethod(getActualImageDim)

    def getNumBytesOfImageData(self):
        """getNumBytesOfImageData(ImageSubheader self) -> size_t"""
        return _six_sicd.ImageSubheader_getNumBytesOfImageData(self)

ImageSubheader_swigregister = _six_sicd.ImageSubheader_swigregister
ImageSubheader_swigregister(ImageSubheader)

def ImageSubheader_computeBlocking(numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerCol, numBlocksPerRow):
    """ImageSubheader_computeBlocking(nitf::Uint32 numRows, nitf::Uint32 numCols, nitf::Uint32 & numRowsPerBlock, nitf::Uint32 & numColsPerBlock, nitf::Uint32 & numBlocksPerCol, nitf::Uint32 & numBlocksPerRow)"""
    return _six_sicd.ImageSubheader_computeBlocking(numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerCol, numBlocksPerRow)

def ImageSubheader_getActualImageDim(dim, numDimsPerBlock):
    """ImageSubheader_getActualImageDim(size_t dim, size_t numDimsPerBlock) -> size_t"""
    return _six_sicd.ImageSubheader_getActualImageDim(dim, numDimsPerBlock)

NITF_VER_20 = _six_sicd.NITF_VER_20
NITF_VER_21 = _six_sicd.NITF_VER_21
NITF_VER_UNKNOWN = _six_sicd.NITF_VER_UNKNOWN
class SICDMeshes(_object):
    """Proxy of C++ six::sicd::SICDMeshes class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SICDMeshes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SICDMeshes, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::SICDMeshes self) -> SICDMeshes"""
        this = _six_sicd.new_SICDMeshes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_SICDMeshes
    __del__ = lambda self: None
SICDMeshes_swigregister = _six_sicd.SICDMeshes_swigregister
SICDMeshes_swigregister(SICDMeshes)
cvar = _six_sicd.cvar
SICDMeshes.SLANT_PLANE_MESH_ID = _six_sicd.cvar.SICDMeshes_SLANT_PLANE_MESH_ID
SICDMeshes.OUTPUT_PLANE_MESH_ID = _six_sicd.cvar.SICDMeshes_OUTPUT_PLANE_MESH_ID
SICDMeshes.NOISE_MESH_ID = _six_sicd.cvar.SICDMeshes_NOISE_MESH_ID

class PlanarCoordinateMesh(_object):
    """Proxy of C++ six::sicd::PlanarCoordinateMesh class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlanarCoordinateMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlanarCoordinateMesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(six::sicd::PlanarCoordinateMesh self, std::string const & name) -> PlanarCoordinateMesh
        __init__(six::sicd::PlanarCoordinateMesh self, std::string const & name, RowColSizeT meshDims, std_vector_double x, std_vector_double y) -> PlanarCoordinateMesh
        """
        this = _six_sicd.new_PlanarCoordinateMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getName(self):
        """getName(PlanarCoordinateMesh self) -> std::string"""
        return _six_sicd.PlanarCoordinateMesh_getName(self)


    def getMeshDims(self):
        """getMeshDims(PlanarCoordinateMesh self) -> RowColSizeT"""
        return _six_sicd.PlanarCoordinateMesh_getMeshDims(self)


    def getX(self):
        """getX(PlanarCoordinateMesh self) -> std_vector_double"""
        return _six_sicd.PlanarCoordinateMesh_getX(self)


    def getY(self):
        """getY(PlanarCoordinateMesh self) -> std_vector_double"""
        return _six_sicd.PlanarCoordinateMesh_getY(self)


    def getFields(self):
        """getFields(PlanarCoordinateMesh self) -> std::vector< Mesh::Field,std::allocator< Mesh::Field > >"""
        return _six_sicd.PlanarCoordinateMesh_getFields(self)


    def serialize(self, values):
        """serialize(PlanarCoordinateMesh self, std::vector< sys::byte,std::allocator< sys::byte > > & values)"""
        return _six_sicd.PlanarCoordinateMesh_serialize(self, values)


    def deserialize(self, values):
        """deserialize(PlanarCoordinateMesh self, sys::byte const *& values)"""
        return _six_sicd.PlanarCoordinateMesh_deserialize(self, values)

    __swig_destroy__ = _six_sicd.delete_PlanarCoordinateMesh
    __del__ = lambda self: None
PlanarCoordinateMesh_swigregister = _six_sicd.PlanarCoordinateMesh_swigregister
PlanarCoordinateMesh_swigregister(PlanarCoordinateMesh)

class NoiseMesh(PlanarCoordinateMesh):
    """Proxy of C++ six::sicd::NoiseMesh class."""

    __swig_setmethods__ = {}
    for _s in [PlanarCoordinateMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [PlanarCoordinateMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseMesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(six::sicd::NoiseMesh self, std::string const & name) -> NoiseMesh
        __init__(six::sicd::NoiseMesh self, std::string const & name, RowColSizeT meshDims, std_vector_double x, std_vector_double y, std_vector_double mainBeamNoise, std_vector_double azimuthAmbiguityNoise, std_vector_double combinedNoise) -> NoiseMesh
        """
        this = _six_sicd.new_NoiseMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMainBeamNoise(self):
        """getMainBeamNoise(NoiseMesh self) -> std_vector_double"""
        return _six_sicd.NoiseMesh_getMainBeamNoise(self)


    def getAzimuthAmbiguityNoise(self):
        """getAzimuthAmbiguityNoise(NoiseMesh self) -> std_vector_double"""
        return _six_sicd.NoiseMesh_getAzimuthAmbiguityNoise(self)


    def getCombinedNoise(self):
        """getCombinedNoise(NoiseMesh self) -> std_vector_double"""
        return _six_sicd.NoiseMesh_getCombinedNoise(self)


    def getFields(self):
        """getFields(NoiseMesh self) -> std::vector< Mesh::Field,std::allocator< Mesh::Field > >"""
        return _six_sicd.NoiseMesh_getFields(self)


    def serialize(self, values):
        """serialize(NoiseMesh self, std::vector< sys::byte,std::allocator< sys::byte > > & values)"""
        return _six_sicd.NoiseMesh_serialize(self, values)


    def deserialize(self, values):
        """deserialize(NoiseMesh self, sys::byte const *& values)"""
        return _six_sicd.NoiseMesh_deserialize(self, values)

    __swig_destroy__ = _six_sicd.delete_NoiseMesh
    __del__ = lambda self: None
NoiseMesh_swigregister = _six_sicd.NoiseMesh_swigregister
NoiseMesh_swigregister(NoiseMesh)

import coda.math_poly
import coda.math_linear
import coda.coda_except
import coda.coda_types
import coda.coda_sys
import pysix.six_base
import pysix.scene
import coda.mem
import coda.coda_io
class RecordDestructor(_object):
    """Proxy of C++ nitf::RecordDestructor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordDestructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecordDestructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_RecordDestructor
    __del__ = lambda self: None

    def __call__(self, nativeObject):
        """__call__(RecordDestructor self, nitf_Record * nativeObject)"""
        return _six_sicd.RecordDestructor___call__(self, nativeObject)


    def __init__(self):
        """__init__(nitf::RecordDestructor self) -> RecordDestructor"""
        this = _six_sicd.new_RecordDestructor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
RecordDestructor_swigregister = _six_sicd.RecordDestructor_swigregister
RecordDestructor_swigregister(RecordDestructor)

class Record(_object):
    """Proxy of C++ nitf::Record class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Record, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(nitf::Record self, Record x) -> Record
        __init__(nitf::Record self, nitf_Record * x) -> Record
        __init__(nitf::Record self, nitf::Version version=NITF_VER_21) -> Record
        __init__(nitf::Record self) -> Record
        """
        this = _six_sicd.new_Record(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(Record self) -> Record"""
        return _six_sicd.Record_clone(self)

    __swig_destroy__ = _six_sicd.delete_Record
    __del__ = lambda self: None

    def getVersion(self):
        """getVersion(Record self) -> nitf::Version"""
        return _six_sicd.Record_getVersion(self)


    def getHeader(self):
        """getHeader(Record self) -> FileHeader"""
        return _six_sicd.Record_getHeader(self)


    def setHeader(self, value):
        """setHeader(Record self, FileHeader value)"""
        return _six_sicd.Record_setHeader(self, value)


    def getNumImages(self):
        """getNumImages(Record self) -> nitf::Uint32"""
        return _six_sicd.Record_getNumImages(self)


    def getNumGraphics(self):
        """getNumGraphics(Record self) -> nitf::Uint32"""
        return _six_sicd.Record_getNumGraphics(self)


    def getNumLabels(self):
        """getNumLabels(Record self) -> nitf::Uint32"""
        return _six_sicd.Record_getNumLabels(self)


    def getNumTexts(self):
        """getNumTexts(Record self) -> nitf::Uint32"""
        return _six_sicd.Record_getNumTexts(self)


    def getNumDataExtensions(self):
        """getNumDataExtensions(Record self) -> nitf::Uint32"""
        return _six_sicd.Record_getNumDataExtensions(self)


    def getNumReservedExtensions(self):
        """getNumReservedExtensions(Record self) -> nitf::Uint32"""
        return _six_sicd.Record_getNumReservedExtensions(self)


    def newImageSegment(self, index=-1):
        """
        newImageSegment(Record self, int index=-1) -> ImageSegment
        newImageSegment(Record self) -> ImageSegment
        """
        return _six_sicd.Record_newImageSegment(self, index)


    def newGraphicSegment(self, index=-1):
        """
        newGraphicSegment(Record self, int index=-1) -> nitf::GraphicSegment
        newGraphicSegment(Record self) -> nitf::GraphicSegment
        """
        return _six_sicd.Record_newGraphicSegment(self, index)


    def newTextSegment(self, index=-1):
        """
        newTextSegment(Record self, int index=-1) -> nitf::TextSegment
        newTextSegment(Record self) -> nitf::TextSegment
        """
        return _six_sicd.Record_newTextSegment(self, index)


    def newDataExtensionSegment(self, index=-1):
        """
        newDataExtensionSegment(Record self, int index=-1) -> DESegment
        newDataExtensionSegment(Record self) -> DESegment
        """
        return _six_sicd.Record_newDataExtensionSegment(self, index)


    def removeImageSegment(self, index):
        """removeImageSegment(Record self, nitf::Uint32 index)"""
        return _six_sicd.Record_removeImageSegment(self, index)


    def removeGraphicSegment(self, index):
        """removeGraphicSegment(Record self, nitf::Uint32 index)"""
        return _six_sicd.Record_removeGraphicSegment(self, index)


    def removeTextSegment(self, index):
        """removeTextSegment(Record self, nitf::Uint32 index)"""
        return _six_sicd.Record_removeTextSegment(self, index)


    def removeLabelSegment(self, index):
        """removeLabelSegment(Record self, nitf::Uint32 index)"""
        return _six_sicd.Record_removeLabelSegment(self, index)


    def removeDataExtensionSegment(self, index):
        """removeDataExtensionSegment(Record self, nitf::Uint32 index)"""
        return _six_sicd.Record_removeDataExtensionSegment(self, index)


    def removeReservedExtensionSegment(self, index):
        """removeReservedExtensionSegment(Record self, nitf::Uint32 index)"""
        return _six_sicd.Record_removeReservedExtensionSegment(self, index)


    def moveImageSegment(self, oldIndex, newIndex=-1):
        """
        moveImageSegment(Record self, nitf::Uint32 oldIndex, int newIndex=-1)
        moveImageSegment(Record self, nitf::Uint32 oldIndex)
        """
        return _six_sicd.Record_moveImageSegment(self, oldIndex, newIndex)


    def moveTextSegment(self, oldIndex, newIndex=-1):
        """
        moveTextSegment(Record self, nitf::Uint32 oldIndex, int newIndex=-1)
        moveTextSegment(Record self, nitf::Uint32 oldIndex)
        """
        return _six_sicd.Record_moveTextSegment(self, oldIndex, newIndex)


    def moveGraphicSegment(self, oldIndex, newIndex=-1):
        """
        moveGraphicSegment(Record self, nitf::Uint32 oldIndex, int newIndex=-1)
        moveGraphicSegment(Record self, nitf::Uint32 oldIndex)
        """
        return _six_sicd.Record_moveGraphicSegment(self, oldIndex, newIndex)


    def moveLabelSegment(self, oldIndex, newIndex=-1):
        """
        moveLabelSegment(Record self, nitf::Uint32 oldIndex, int newIndex=-1)
        moveLabelSegment(Record self, nitf::Uint32 oldIndex)
        """
        return _six_sicd.Record_moveLabelSegment(self, oldIndex, newIndex)


    def moveDataExtensionSegment(self, oldIndex, newIndex=-1):
        """
        moveDataExtensionSegment(Record self, nitf::Uint32 oldIndex, int newIndex=-1)
        moveDataExtensionSegment(Record self, nitf::Uint32 oldIndex)
        """
        return _six_sicd.Record_moveDataExtensionSegment(self, oldIndex, newIndex)


    def moveReservedExtensionSegment(self, oldIndex, newIndex=-1):
        """
        moveReservedExtensionSegment(Record self, nitf::Uint32 oldIndex, int newIndex=-1)
        moveReservedExtensionSegment(Record self, nitf::Uint32 oldIndex)
        """
        return _six_sicd.Record_moveReservedExtensionSegment(self, oldIndex, newIndex)


    def setComplexityLevelIfUnset(self):
        """setComplexityLevelIfUnset(Record self)"""
        return _six_sicd.Record_setComplexityLevelIfUnset(self)


    def getImageSegment(self, index):
        """getImageSegment(Record self, size_t index) -> ImageSegment"""
        return _six_sicd.Record_getImageSegment(self, index)


    def getDataExtension(self, index):
        """getDataExtension(Record self, size_t index) -> DESegment"""
        return _six_sicd.Record_getDataExtension(self, index)

Record_swigregister = _six_sicd.Record_swigregister
Record_swigregister(Record)


def asComplexData(data):
    """asComplexData(Data data) -> ComplexData"""
    return _six_sicd.asComplexData(data)

def writeNITF(pathname, schemaPaths, data, imageAdr):
    """writeNITF(std::string const & pathname, VectorString schemaPaths, ComplexData data, long long imageAdr)"""
    return _six_sicd.writeNITF(pathname, schemaPaths, data, imageAdr)

def readNITF(pathname, schemaPaths):
    """readNITF(std::string const & pathname, VectorString schemaPaths) -> Data *"""
    return _six_sicd.readNITF(pathname, schemaPaths)

def _readRecord(pathname):
    """_readRecord(std::string const & pathname) -> Record"""
    return _six_sicd._readRecord(pathname)

import os
import sys

from coda.math_poly import Poly2D


def schema_path():
    """Provide an absolute path to the schemas."""
    try:
        pysix_path = os.path.dirname(__file__)
    except NameError:
# Must be running as __main__, so use sys.argv
        pysix_path = os.path.dirname(sys.argv[0])
    return os.path.abspath(os.path.join(pysix_path, 'schemas'))

class ProjectionPolynomialFitter(_object):
    """Proxy of C++ scene::ProjectionPolynomialFitter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionPolynomialFitter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionPolynomialFitter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::ProjectionPolynomialFitter self, ProjectionModel projModel, GridECEFTransform gridTransform, RowColDouble outPixelStart, RowColSizeT outExtent, size_t numPoints1D) -> ProjectionPolynomialFitter
        __init__(scene::ProjectionPolynomialFitter self, ProjectionModel projModel, GridECEFTransform gridTransform, RowColDouble outPixelStart, RowColSizeT outExtent) -> ProjectionPolynomialFitter
        __init__(scene::ProjectionPolynomialFitter self, ProjectionModel projModel, GridECEFTransform gridTransform, RowColSizeT fullExtent, RowColDouble outPixelStart, RowColSizeT outExtent, VectorRowColDouble polygon, size_t numPoints1D) -> ProjectionPolynomialFitter
        __init__(scene::ProjectionPolynomialFitter self, ProjectionModel projModel, GridECEFTransform gridTransform, RowColSizeT fullExtent, RowColDouble outPixelStart, RowColSizeT outExtent, VectorRowColDouble polygon) -> ProjectionPolynomialFitter
        """
        this = _six_sicd.new_ProjectionPolynomialFitter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getOutputPlaneRows(self):
        """getOutputPlaneRows(ProjectionPolynomialFitter self) -> MatrixDouble"""
        return _six_sicd.ProjectionPolynomialFitter_getOutputPlaneRows(self)


    def getOutputPlaneCols(self):
        """getOutputPlaneCols(ProjectionPolynomialFitter self) -> MatrixDouble"""
        return _six_sicd.ProjectionPolynomialFitter_getOutputPlaneCols(self)


    def getSceneCoordinates(self):
        """getSceneCoordinates(ProjectionPolynomialFitter self) -> math::linear::Matrix2D< types::RowCol< double > > const &"""
        return _six_sicd.ProjectionPolynomialFitter_getSceneCoordinates(self)


    def getTimeCOA(self):
        """getTimeCOA(ProjectionPolynomialFitter self) -> MatrixDouble"""
        return _six_sicd.ProjectionPolynomialFitter_getTimeCOA(self)


    def _fitPolyImpl(self, inPixelStart, inSceneCenter, interimSceneCenter, interimSampleSpacing, polyOrderX, polyOrderY, outputToSlantRow, outputToSlantCol, meanResidualErrorRow=None, meanResidualErrorCol=None):
        """
        _fitPolyImpl(ProjectionPolynomialFitter self, RowColSizeT inPixelStart, RowColDouble inSceneCenter, RowColDouble interimSceneCenter, RowColDouble interimSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D outputToSlantRow, Poly2D outputToSlantCol, double * meanResidualErrorRow=None, double * meanResidualErrorCol=None)
        _fitPolyImpl(ProjectionPolynomialFitter self, RowColSizeT inPixelStart, RowColDouble inSceneCenter, RowColDouble interimSceneCenter, RowColDouble interimSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D outputToSlantRow, Poly2D outputToSlantCol, double * meanResidualErrorRow=None)
        _fitPolyImpl(ProjectionPolynomialFitter self, RowColSizeT inPixelStart, RowColDouble inSceneCenter, RowColDouble interimSceneCenter, RowColDouble interimSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D outputToSlantRow, Poly2D outputToSlantCol)
        """
        return _six_sicd.ProjectionPolynomialFitter__fitPolyImpl(self, inPixelStart, inSceneCenter, interimSceneCenter, interimSampleSpacing, polyOrderX, polyOrderY, outputToSlantRow, outputToSlantCol, meanResidualErrorRow, meanResidualErrorCol)


    def fitSlantToOutputPolynomials(self, inPixelStart, inSceneCenter, interimSceneCenter, interimSampleSpacing, polyOrderX, polyOrderY, slantToOutputRow, slantToOutputCol, meanResidualErrorRow=None, meanResidualErrorCol=None):
        """
        fitSlantToOutputPolynomials(ProjectionPolynomialFitter self, RowColSizeT inPixelStart, RowColDouble inSceneCenter, RowColDouble interimSceneCenter, RowColDouble interimSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D slantToOutputRow, Poly2D slantToOutputCol, double * meanResidualErrorRow=None, double * meanResidualErrorCol=None)
        fitSlantToOutputPolynomials(ProjectionPolynomialFitter self, RowColSizeT inPixelStart, RowColDouble inSceneCenter, RowColDouble interimSceneCenter, RowColDouble interimSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D slantToOutputRow, Poly2D slantToOutputCol, double * meanResidualErrorRow=None)
        fitSlantToOutputPolynomials(ProjectionPolynomialFitter self, RowColSizeT inPixelStart, RowColDouble inSceneCenter, RowColDouble interimSceneCenter, RowColDouble interimSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D slantToOutputRow, Poly2D slantToOutputCol)
        """
        return _six_sicd.ProjectionPolynomialFitter_fitSlantToOutputPolynomials(self, inPixelStart, inSceneCenter, interimSceneCenter, interimSampleSpacing, polyOrderX, polyOrderY, slantToOutputRow, slantToOutputCol, meanResidualErrorRow, meanResidualErrorCol)


    def fitTimeCOAPolynomial(self, outSceneCenter, outSampleSpacing, polyOrderX, polyOrderY, timeCOAPoly, meanResidualError=None):
        """
        fitTimeCOAPolynomial(ProjectionPolynomialFitter self, RowColDouble outSceneCenter, RowColDouble outSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D timeCOAPoly, double * meanResidualError=None)
        fitTimeCOAPolynomial(ProjectionPolynomialFitter self, RowColDouble outSceneCenter, RowColDouble outSampleSpacing, size_t polyOrderX, size_t polyOrderY, Poly2D timeCOAPoly)
        """
        return _six_sicd.ProjectionPolynomialFitter_fitTimeCOAPolynomial(self, outSceneCenter, outSampleSpacing, polyOrderX, polyOrderY, timeCOAPoly, meanResidualError)


    def fitPixelBasedTimeCOAPolynomial(self, outPixelShift, polyOrderX, polyOrderY, timeCOAPoly, meanResidualError=None):
        """
        fitPixelBasedTimeCOAPolynomial(ProjectionPolynomialFitter self, RowColDouble outPixelShift, size_t polyOrderX, size_t polyOrderY, Poly2D timeCOAPoly, double * meanResidualError=None)
        fitPixelBasedTimeCOAPolynomial(ProjectionPolynomialFitter self, RowColDouble outPixelShift, size_t polyOrderX, size_t polyOrderY, Poly2D timeCOAPoly)
        """
        return _six_sicd.ProjectionPolynomialFitter_fitPixelBasedTimeCOAPolynomial(self, outPixelShift, polyOrderX, polyOrderY, timeCOAPoly, meanResidualError)


    def fitOutputToSlantPolynomials(
            self, offset, inSceneCenter,
            interimSceneCenter, interimSampleSpacing,
            polyOrderX, polyOrderY):
        toSlantRow = Poly2D()
        toSlantCol = Poly2D()
        self._fitPolyImpl(
            offset, inSceneCenter, interimSceneCenter, interimSampleSpacing,
            polyOrderX, polyOrderY, toSlantRow, toSlantCol)
        return (toSlantRow, toSlantCol)


    __swig_destroy__ = _six_sicd.delete_ProjectionPolynomialFitter
    __del__ = lambda self: None
ProjectionPolynomialFitter_swigregister = _six_sicd.ProjectionPolynomialFitter_swigregister
ProjectionPolynomialFitter_swigregister(ProjectionPolynomialFitter)
ProjectionPolynomialFitter.DEFAULTS_POINTS_1D = _six_sicd.cvar.ProjectionPolynomialFitter_DEFAULTS_POINTS_1D

class ComplexClassification(pysix.six_base.Classification):
    """Proxy of C++ six::sicd::ComplexClassification class."""

    __swig_setmethods__ = {}
    for _s in [pysix.six_base.Classification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexClassification, name, value)
    __swig_getmethods__ = {}
    for _s in [pysix.six_base.Classification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexClassification, name)
    __repr__ = _swig_repr

    def getLevel(self):
        """getLevel(ComplexClassification self) -> std::string"""
        return _six_sicd.ComplexClassification_getLevel(self)


    def put(self, os):
        """put(ComplexClassification self, std::ostream & os) -> std::ostream &"""
        return _six_sicd.ComplexClassification_put(self, os)


    def __eq__(self, rhs):
        """__eq__(ComplexClassification self, ComplexClassification rhs) -> bool"""
        return _six_sicd.ComplexClassification___eq__(self, rhs)

    __swig_setmethods__["level"] = _six_sicd.ComplexClassification_level_set
    __swig_getmethods__["level"] = _six_sicd.ComplexClassification_level_get
    if _newclass:
        level = _swig_property(_six_sicd.ComplexClassification_level_get, _six_sicd.ComplexClassification_level_set)

    def __init__(self):
        """__init__(six::sicd::ComplexClassification self) -> ComplexClassification"""
        this = _six_sicd.new_ComplexClassification()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexClassification
    __del__ = lambda self: None
ComplexClassification_swigregister = _six_sicd.ComplexClassification_swigregister
ComplexClassification_swigregister(ComplexClassification)

class CollectionInformation(_object):
    """Proxy of C++ six::sicd::CollectionInformation class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionInformation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectorName"] = _six_sicd.CollectionInformation_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.CollectionInformation_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.CollectionInformation_collectorName_get, _six_sicd.CollectionInformation_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.CollectionInformation_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.CollectionInformation_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.CollectionInformation_illuminatorName_get, _six_sicd.CollectionInformation_illuminatorName_set)
    __swig_setmethods__["coreName"] = _six_sicd.CollectionInformation_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.CollectionInformation_coreName_get
    if _newclass:
        coreName = _swig_property(_six_sicd.CollectionInformation_coreName_get, _six_sicd.CollectionInformation_coreName_set)
    __swig_setmethods__["collectType"] = _six_sicd.CollectionInformation_collectType_set
    __swig_getmethods__["collectType"] = _six_sicd.CollectionInformation_collectType_get
    if _newclass:
        collectType = _swig_property(_six_sicd.CollectionInformation_collectType_get, _six_sicd.CollectionInformation_collectType_set)
    __swig_setmethods__["radarMode"] = _six_sicd.CollectionInformation_radarMode_set
    __swig_getmethods__["radarMode"] = _six_sicd.CollectionInformation_radarMode_get
    if _newclass:
        radarMode = _swig_property(_six_sicd.CollectionInformation_radarMode_get, _six_sicd.CollectionInformation_radarMode_set)
    __swig_setmethods__["radarModeID"] = _six_sicd.CollectionInformation_radarModeID_set
    __swig_getmethods__["radarModeID"] = _six_sicd.CollectionInformation_radarModeID_get
    if _newclass:
        radarModeID = _swig_property(_six_sicd.CollectionInformation_radarModeID_get, _six_sicd.CollectionInformation_radarModeID_set)
    __swig_setmethods__["classification"] = _six_sicd.CollectionInformation_classification_set
    __swig_getmethods__["classification"] = _six_sicd.CollectionInformation_classification_get
    if _newclass:
        classification = _swig_property(_six_sicd.CollectionInformation_classification_get, _six_sicd.CollectionInformation_classification_set)
    __swig_setmethods__["countryCodes"] = _six_sicd.CollectionInformation_countryCodes_set
    __swig_getmethods__["countryCodes"] = _six_sicd.CollectionInformation_countryCodes_get
    if _newclass:
        countryCodes = _swig_property(_six_sicd.CollectionInformation_countryCodes_get, _six_sicd.CollectionInformation_countryCodes_set)
    __swig_setmethods__["parameters"] = _six_sicd.CollectionInformation_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.CollectionInformation_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.CollectionInformation_parameters_get, _six_sicd.CollectionInformation_parameters_set)

    def __init__(self):
        """__init__(six::sicd::CollectionInformation self) -> CollectionInformation"""
        this = _six_sicd.new_CollectionInformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_CollectionInformation
    __del__ = lambda self: None

    def clone(self):
        """clone(CollectionInformation self) -> CollectionInformation"""
        return _six_sicd.CollectionInformation_clone(self)


    def __eq__(self, other):
        """__eq__(CollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.CollectionInformation___eq__(self, other)


    def __ne__(self, other):
        """__ne__(CollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.CollectionInformation___ne__(self, other)

CollectionInformation_swigregister = _six_sicd.CollectionInformation_swigregister
CollectionInformation_swigregister(CollectionInformation)

class ImageCreation(_object):
    """Proxy of C++ six::sicd::ImageCreation class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageCreation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["application"] = _six_sicd.ImageCreation_application_set
    __swig_getmethods__["application"] = _six_sicd.ImageCreation_application_get
    if _newclass:
        application = _swig_property(_six_sicd.ImageCreation_application_get, _six_sicd.ImageCreation_application_set)
    __swig_setmethods__["dateTime"] = _six_sicd.ImageCreation_dateTime_set
    __swig_getmethods__["dateTime"] = _six_sicd.ImageCreation_dateTime_get
    if _newclass:
        dateTime = _swig_property(_six_sicd.ImageCreation_dateTime_get, _six_sicd.ImageCreation_dateTime_set)
    __swig_setmethods__["site"] = _six_sicd.ImageCreation_site_set
    __swig_getmethods__["site"] = _six_sicd.ImageCreation_site_get
    if _newclass:
        site = _swig_property(_six_sicd.ImageCreation_site_get, _six_sicd.ImageCreation_site_set)
    __swig_setmethods__["profile"] = _six_sicd.ImageCreation_profile_set
    __swig_getmethods__["profile"] = _six_sicd.ImageCreation_profile_get
    if _newclass:
        profile = _swig_property(_six_sicd.ImageCreation_profile_get, _six_sicd.ImageCreation_profile_set)

    def clone(self):
        """clone(ImageCreation self) -> ImageCreation"""
        return _six_sicd.ImageCreation_clone(self)


    def __eq__(self, rhs):
        """__eq__(ImageCreation self, ImageCreation rhs) -> bool"""
        return _six_sicd.ImageCreation___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ImageCreation self, ImageCreation rhs) -> bool"""
        return _six_sicd.ImageCreation___ne__(self, rhs)


    def __init__(self):
        """__init__(six::sicd::ImageCreation self) -> ImageCreation"""
        this = _six_sicd.new_ImageCreation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ImageCreation
    __del__ = lambda self: None
ImageCreation_swigregister = _six_sicd.ImageCreation_swigregister
ImageCreation_swigregister(ImageCreation)

class ImageData(_object):
    """Proxy of C++ six::sicd::ImageData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ImageData self) -> ImageData"""
        this = _six_sicd.new_ImageData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["pixelType"] = _six_sicd.ImageData_pixelType_set
    __swig_getmethods__["pixelType"] = _six_sicd.ImageData_pixelType_get
    if _newclass:
        pixelType = _swig_property(_six_sicd.ImageData_pixelType_get, _six_sicd.ImageData_pixelType_set)
    __swig_setmethods__["amplitudeTable"] = _six_sicd.ImageData_amplitudeTable_set
    __swig_getmethods__["amplitudeTable"] = _six_sicd.ImageData_amplitudeTable_get
    if _newclass:
        amplitudeTable = _swig_property(_six_sicd.ImageData_amplitudeTable_get, _six_sicd.ImageData_amplitudeTable_set)
    __swig_setmethods__["numRows"] = _six_sicd.ImageData_numRows_set
    __swig_getmethods__["numRows"] = _six_sicd.ImageData_numRows_get
    if _newclass:
        numRows = _swig_property(_six_sicd.ImageData_numRows_get, _six_sicd.ImageData_numRows_set)
    __swig_setmethods__["numCols"] = _six_sicd.ImageData_numCols_set
    __swig_getmethods__["numCols"] = _six_sicd.ImageData_numCols_get
    if _newclass:
        numCols = _swig_property(_six_sicd.ImageData_numCols_get, _six_sicd.ImageData_numCols_set)
    __swig_setmethods__["firstRow"] = _six_sicd.ImageData_firstRow_set
    __swig_getmethods__["firstRow"] = _six_sicd.ImageData_firstRow_get
    if _newclass:
        firstRow = _swig_property(_six_sicd.ImageData_firstRow_get, _six_sicd.ImageData_firstRow_set)
    __swig_setmethods__["firstCol"] = _six_sicd.ImageData_firstCol_set
    __swig_getmethods__["firstCol"] = _six_sicd.ImageData_firstCol_get
    if _newclass:
        firstCol = _swig_property(_six_sicd.ImageData_firstCol_get, _six_sicd.ImageData_firstCol_set)
    __swig_setmethods__["fullImage"] = _six_sicd.ImageData_fullImage_set
    __swig_getmethods__["fullImage"] = _six_sicd.ImageData_fullImage_get
    if _newclass:
        fullImage = _swig_property(_six_sicd.ImageData_fullImage_get, _six_sicd.ImageData_fullImage_set)
    __swig_setmethods__["scpPixel"] = _six_sicd.ImageData_scpPixel_set
    __swig_getmethods__["scpPixel"] = _six_sicd.ImageData_scpPixel_get
    if _newclass:
        scpPixel = _swig_property(_six_sicd.ImageData_scpPixel_get, _six_sicd.ImageData_scpPixel_set)
    __swig_setmethods__["validData"] = _six_sicd.ImageData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ImageData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.ImageData_validData_get, _six_sicd.ImageData_validData_set)

    def __eq__(self, rhs):
        """__eq__(ImageData self, ImageData rhs) -> bool"""
        return _six_sicd.ImageData___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ImageData self, ImageData rhs) -> bool"""
        return _six_sicd.ImageData___ne__(self, rhs)


    def validate(self, geoData, log):
        """validate(ImageData self, GeoData geoData, logging::Logger & log) -> bool"""
        return _six_sicd.ImageData_validate(self, geoData, log)

    __swig_destroy__ = _six_sicd.delete_ImageData
    __del__ = lambda self: None
ImageData_swigregister = _six_sicd.ImageData_swigregister
ImageData_swigregister(ImageData)

class GeoInfo(_object):
    """Proxy of C++ six::sicd::GeoInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::GeoInfo self) -> GeoInfo"""
        this = _six_sicd.new_GeoInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_GeoInfo
    __del__ = lambda self: None

    def clone(self):
        """clone(GeoInfo self) -> GeoInfo"""
        return _six_sicd.GeoInfo_clone(self)

    __swig_setmethods__["name"] = _six_sicd.GeoInfo_name_set
    __swig_getmethods__["name"] = _six_sicd.GeoInfo_name_get
    if _newclass:
        name = _swig_property(_six_sicd.GeoInfo_name_get, _six_sicd.GeoInfo_name_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.GeoInfo_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.GeoInfo_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.GeoInfo_geoInfos_get, _six_sicd.GeoInfo_geoInfos_set)
    __swig_setmethods__["desc"] = _six_sicd.GeoInfo_desc_set
    __swig_getmethods__["desc"] = _six_sicd.GeoInfo_desc_get
    if _newclass:
        desc = _swig_property(_six_sicd.GeoInfo_desc_get, _six_sicd.GeoInfo_desc_set)
    __swig_setmethods__["geometryLatLon"] = _six_sicd.GeoInfo_geometryLatLon_set
    __swig_getmethods__["geometryLatLon"] = _six_sicd.GeoInfo_geometryLatLon_get
    if _newclass:
        geometryLatLon = _swig_property(_six_sicd.GeoInfo_geometryLatLon_get, _six_sicd.GeoInfo_geometryLatLon_set)

    def __eq__(self, rhs):
        """__eq__(GeoInfo self, GeoInfo rhs) -> bool"""
        return _six_sicd.GeoInfo___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(GeoInfo self, GeoInfo rhs) -> bool"""
        return _six_sicd.GeoInfo___ne__(self, rhs)

GeoInfo_swigregister = _six_sicd.GeoInfo_swigregister
GeoInfo_swigregister(GeoInfo)

class GeoData(_object):
    """Proxy of C++ six::sicd::GeoData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::GeoData self) -> GeoData"""
        this = _six_sicd.new_GeoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(GeoData self) -> GeoData"""
        return _six_sicd.GeoData_clone(self)

    __swig_setmethods__["earthModel"] = _six_sicd.GeoData_earthModel_set
    __swig_getmethods__["earthModel"] = _six_sicd.GeoData_earthModel_get
    if _newclass:
        earthModel = _swig_property(_six_sicd.GeoData_earthModel_get, _six_sicd.GeoData_earthModel_set)
    __swig_setmethods__["scp"] = _six_sicd.GeoData_scp_set
    __swig_getmethods__["scp"] = _six_sicd.GeoData_scp_get
    if _newclass:
        scp = _swig_property(_six_sicd.GeoData_scp_get, _six_sicd.GeoData_scp_set)
    __swig_setmethods__["imageCorners"] = _six_sicd.GeoData_imageCorners_set
    __swig_getmethods__["imageCorners"] = _six_sicd.GeoData_imageCorners_get
    if _newclass:
        imageCorners = _swig_property(_six_sicd.GeoData_imageCorners_get, _six_sicd.GeoData_imageCorners_set)
    __swig_setmethods__["validData"] = _six_sicd.GeoData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.GeoData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.GeoData_validData_get, _six_sicd.GeoData_validData_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.GeoData_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.GeoData_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.GeoData_geoInfos_get, _six_sicd.GeoData_geoInfos_set)

    def __eq__(self, rhs):
        """__eq__(GeoData self, GeoData rhs) -> bool"""
        return _six_sicd.GeoData___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(GeoData self, GeoData rhs) -> bool"""
        return _six_sicd.GeoData___ne__(self, rhs)


    def fillDerivedFields(self, imageData, model):
        """fillDerivedFields(GeoData self, ImageData imageData, ProjectionModel model)"""
        return _six_sicd.GeoData_fillDerivedFields(self, imageData, model)


    def validate(self, log):
        """validate(GeoData self, logging::Logger & log) -> bool"""
        return _six_sicd.GeoData_validate(self, log)

    __swig_destroy__ = _six_sicd.delete_GeoData
    __del__ = lambda self: None
GeoData_swigregister = _six_sicd.GeoData_swigregister
GeoData_swigregister(GeoData)

class WeightType(_object):
    """Proxy of C++ six::sicd::WeightType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeightType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::WeightType self) -> WeightType"""
        this = _six_sicd.new_WeightType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["windowName"] = _six_sicd.WeightType_windowName_set
    __swig_getmethods__["windowName"] = _six_sicd.WeightType_windowName_get
    if _newclass:
        windowName = _swig_property(_six_sicd.WeightType_windowName_get, _six_sicd.WeightType_windowName_set)
    __swig_setmethods__["parameters"] = _six_sicd.WeightType_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.WeightType_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.WeightType_parameters_get, _six_sicd.WeightType_parameters_set)

    def __eq__(self, rhs):
        """__eq__(WeightType self, WeightType rhs) -> bool"""
        return _six_sicd.WeightType___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(WeightType self, WeightType rhs) -> bool"""
        return _six_sicd.WeightType___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_WeightType
    __del__ = lambda self: None
WeightType_swigregister = _six_sicd.WeightType_swigregister
WeightType_swigregister(WeightType)

class DirectionParameters(_object):
    """Proxy of C++ six::sicd::DirectionParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::DirectionParameters self) -> DirectionParameters"""
        this = _six_sicd.new_DirectionParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(DirectionParameters self) -> DirectionParameters"""
        return _six_sicd.DirectionParameters_clone(self)

    __swig_setmethods__["unitVector"] = _six_sicd.DirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.DirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.DirectionParameters_unitVector_get, _six_sicd.DirectionParameters_unitVector_set)
    __swig_setmethods__["sampleSpacing"] = _six_sicd.DirectionParameters_sampleSpacing_set
    __swig_getmethods__["sampleSpacing"] = _six_sicd.DirectionParameters_sampleSpacing_get
    if _newclass:
        sampleSpacing = _swig_property(_six_sicd.DirectionParameters_sampleSpacing_get, _six_sicd.DirectionParameters_sampleSpacing_set)
    __swig_setmethods__["impulseResponseWidth"] = _six_sicd.DirectionParameters_impulseResponseWidth_set
    __swig_getmethods__["impulseResponseWidth"] = _six_sicd.DirectionParameters_impulseResponseWidth_get
    if _newclass:
        impulseResponseWidth = _swig_property(_six_sicd.DirectionParameters_impulseResponseWidth_get, _six_sicd.DirectionParameters_impulseResponseWidth_set)
    __swig_setmethods__["sign"] = _six_sicd.DirectionParameters_sign_set
    __swig_getmethods__["sign"] = _six_sicd.DirectionParameters_sign_get
    if _newclass:
        sign = _swig_property(_six_sicd.DirectionParameters_sign_get, _six_sicd.DirectionParameters_sign_set)
    __swig_setmethods__["impulseResponseBandwidth"] = _six_sicd.DirectionParameters_impulseResponseBandwidth_set
    __swig_getmethods__["impulseResponseBandwidth"] = _six_sicd.DirectionParameters_impulseResponseBandwidth_get
    if _newclass:
        impulseResponseBandwidth = _swig_property(_six_sicd.DirectionParameters_impulseResponseBandwidth_get, _six_sicd.DirectionParameters_impulseResponseBandwidth_set)
    __swig_setmethods__["kCenter"] = _six_sicd.DirectionParameters_kCenter_set
    __swig_getmethods__["kCenter"] = _six_sicd.DirectionParameters_kCenter_get
    if _newclass:
        kCenter = _swig_property(_six_sicd.DirectionParameters_kCenter_get, _six_sicd.DirectionParameters_kCenter_set)
    __swig_setmethods__["deltaK1"] = _six_sicd.DirectionParameters_deltaK1_set
    __swig_getmethods__["deltaK1"] = _six_sicd.DirectionParameters_deltaK1_get
    if _newclass:
        deltaK1 = _swig_property(_six_sicd.DirectionParameters_deltaK1_get, _six_sicd.DirectionParameters_deltaK1_set)
    __swig_setmethods__["deltaK2"] = _six_sicd.DirectionParameters_deltaK2_set
    __swig_getmethods__["deltaK2"] = _six_sicd.DirectionParameters_deltaK2_get
    if _newclass:
        deltaK2 = _swig_property(_six_sicd.DirectionParameters_deltaK2_get, _six_sicd.DirectionParameters_deltaK2_set)
    __swig_setmethods__["deltaKCOAPoly"] = _six_sicd.DirectionParameters_deltaKCOAPoly_set
    __swig_getmethods__["deltaKCOAPoly"] = _six_sicd.DirectionParameters_deltaKCOAPoly_get
    if _newclass:
        deltaKCOAPoly = _swig_property(_six_sicd.DirectionParameters_deltaKCOAPoly_get, _six_sicd.DirectionParameters_deltaKCOAPoly_set)
    __swig_setmethods__["weightType"] = _six_sicd.DirectionParameters_weightType_set
    __swig_getmethods__["weightType"] = _six_sicd.DirectionParameters_weightType_get
    if _newclass:
        weightType = _swig_property(_six_sicd.DirectionParameters_weightType_get, _six_sicd.DirectionParameters_weightType_set)
    __swig_setmethods__["weights"] = _six_sicd.DirectionParameters_weights_set
    __swig_getmethods__["weights"] = _six_sicd.DirectionParameters_weights_get
    if _newclass:
        weights = _swig_property(_six_sicd.DirectionParameters_weights_get, _six_sicd.DirectionParameters_weights_set)

    def __eq__(self, rhs):
        """__eq__(DirectionParameters self, DirectionParameters rhs) -> bool"""
        return _six_sicd.DirectionParameters___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(DirectionParameters self, DirectionParameters rhs) -> bool"""
        return _six_sicd.DirectionParameters___ne__(self, rhs)


    def validate(self, *args):
        """
        validate(DirectionParameters self, ImageData imageData, logging::Logger & log) -> bool
        validate(DirectionParameters self, RgAzComp rgAzComp, logging::Logger & log, double offset=0) -> bool
        validate(DirectionParameters self, RgAzComp rgAzComp, logging::Logger & log) -> bool
        """
        return _six_sicd.DirectionParameters_validate(self, *args)


    def fillDerivedFields(self, *args):
        """
        fillDerivedFields(DirectionParameters self, ImageData imageData)
        fillDerivedFields(DirectionParameters self, RgAzComp rgAzComp, double offset=0)
        fillDerivedFields(DirectionParameters self, RgAzComp rgAzComp)
        """
        return _six_sicd.DirectionParameters_fillDerivedFields(self, *args)

    __swig_destroy__ = _six_sicd.delete_DirectionParameters
    __del__ = lambda self: None
DirectionParameters_swigregister = _six_sicd.DirectionParameters_swigregister
DirectionParameters_swigregister(DirectionParameters)

class Grid(_object):
    """Proxy of C++ six::sicd::Grid class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Grid self) -> Grid"""
        this = _six_sicd.new_Grid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(Grid self) -> Grid"""
        return _six_sicd.Grid_clone(self)

    __swig_setmethods__["imagePlane"] = _six_sicd.Grid_imagePlane_set
    __swig_getmethods__["imagePlane"] = _six_sicd.Grid_imagePlane_get
    if _newclass:
        imagePlane = _swig_property(_six_sicd.Grid_imagePlane_get, _six_sicd.Grid_imagePlane_set)
    __swig_setmethods__["type"] = _six_sicd.Grid_type_set
    __swig_getmethods__["type"] = _six_sicd.Grid_type_get
    if _newclass:
        type = _swig_property(_six_sicd.Grid_type_get, _six_sicd.Grid_type_set)
    __swig_setmethods__["timeCOAPoly"] = _six_sicd.Grid_timeCOAPoly_set
    __swig_getmethods__["timeCOAPoly"] = _six_sicd.Grid_timeCOAPoly_get
    if _newclass:
        timeCOAPoly = _swig_property(_six_sicd.Grid_timeCOAPoly_get, _six_sicd.Grid_timeCOAPoly_set)
    __swig_setmethods__["row"] = _six_sicd.Grid_row_set
    __swig_getmethods__["row"] = _six_sicd.Grid_row_get
    if _newclass:
        row = _swig_property(_six_sicd.Grid_row_get, _six_sicd.Grid_row_set)
    __swig_setmethods__["col"] = _six_sicd.Grid_col_set
    __swig_getmethods__["col"] = _six_sicd.Grid_col_get
    if _newclass:
        col = _swig_property(_six_sicd.Grid_col_get, _six_sicd.Grid_col_set)

    def __eq__(self, rhs):
        """__eq__(Grid self, Grid rhs) -> bool"""
        return _six_sicd.Grid___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Grid self, Grid rhs) -> bool"""
        return _six_sicd.Grid___ne__(self, rhs)


    def validate(self, *args):
        """
        validate(Grid self, CollectionInformation collectionInformation, ImageData imageData, logging::Logger & log) -> bool
        validate(Grid self, RMA const & rma, Vector3 scp, PolyVector3 arpPoly, double fc, logging::Logger & log) -> bool
        validate(Grid self, PFA pfa, RadarCollection const & radarCollection, double fc, logging::Logger & log) -> bool
        validate(Grid self, RgAzComp rgAzComp, GeoData geoData, SCPCOA scpcoa, double fc, logging::Logger & log) -> bool
        """
        return _six_sicd.Grid_validate(self, *args)


    def fillDerivedFields(self, *args):
        """
        fillDerivedFields(Grid self, CollectionInformation collectionInformation, ImageData imageData, SCPCOA scpcoa)
        fillDerivedFields(Grid self, RMA const & rma, Vector3 scp, PolyVector3 arpPoly)
        fillDerivedFields(Grid self, RgAzComp rgAzComp, GeoData geoData, SCPCOA scpcoa, double fc)
        """
        return _six_sicd.Grid_fillDerivedFields(self, *args)


    def fillDefaultFields(self, *args):
        """
        fillDefaultFields(Grid self, RMA const & rma, double fc)
        fillDefaultFields(Grid self, PFA pfa, double fc)
        """
        return _six_sicd.Grid_fillDefaultFields(self, *args)

    __swig_destroy__ = _six_sicd.delete_Grid
    __del__ = lambda self: None
Grid_swigregister = _six_sicd.Grid_swigregister
Grid_swigregister(Grid)

class TimelineSet(_object):
    """Proxy of C++ six::sicd::TimelineSet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimelineSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimelineSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::TimelineSet self) -> TimelineSet"""
        this = _six_sicd.new_TimelineSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["tStart"] = _six_sicd.TimelineSet_tStart_set
    __swig_getmethods__["tStart"] = _six_sicd.TimelineSet_tStart_get
    if _newclass:
        tStart = _swig_property(_six_sicd.TimelineSet_tStart_get, _six_sicd.TimelineSet_tStart_set)
    __swig_setmethods__["tEnd"] = _six_sicd.TimelineSet_tEnd_set
    __swig_getmethods__["tEnd"] = _six_sicd.TimelineSet_tEnd_get
    if _newclass:
        tEnd = _swig_property(_six_sicd.TimelineSet_tEnd_get, _six_sicd.TimelineSet_tEnd_set)
    __swig_setmethods__["interPulsePeriodStart"] = _six_sicd.TimelineSet_interPulsePeriodStart_set
    __swig_getmethods__["interPulsePeriodStart"] = _six_sicd.TimelineSet_interPulsePeriodStart_get
    if _newclass:
        interPulsePeriodStart = _swig_property(_six_sicd.TimelineSet_interPulsePeriodStart_get, _six_sicd.TimelineSet_interPulsePeriodStart_set)
    __swig_setmethods__["interPulsePeriodEnd"] = _six_sicd.TimelineSet_interPulsePeriodEnd_set
    __swig_getmethods__["interPulsePeriodEnd"] = _six_sicd.TimelineSet_interPulsePeriodEnd_get
    if _newclass:
        interPulsePeriodEnd = _swig_property(_six_sicd.TimelineSet_interPulsePeriodEnd_get, _six_sicd.TimelineSet_interPulsePeriodEnd_set)
    __swig_setmethods__["interPulsePeriodPoly"] = _six_sicd.TimelineSet_interPulsePeriodPoly_set
    __swig_getmethods__["interPulsePeriodPoly"] = _six_sicd.TimelineSet_interPulsePeriodPoly_get
    if _newclass:
        interPulsePeriodPoly = _swig_property(_six_sicd.TimelineSet_interPulsePeriodPoly_get, _six_sicd.TimelineSet_interPulsePeriodPoly_set)

    def __eq__(self, rhs):
        """__eq__(TimelineSet self, TimelineSet rhs) -> bool"""
        return _six_sicd.TimelineSet___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(TimelineSet self, TimelineSet rhs) -> bool"""
        return _six_sicd.TimelineSet___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_TimelineSet
    __del__ = lambda self: None
TimelineSet_swigregister = _six_sicd.TimelineSet_swigregister
TimelineSet_swigregister(TimelineSet)

class InterPulsePeriod(_object):
    """Proxy of C++ six::sicd::InterPulsePeriod class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterPulsePeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterPulsePeriod, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::InterPulsePeriod self) -> InterPulsePeriod"""
        this = _six_sicd.new_InterPulsePeriod()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["sets"] = _six_sicd.InterPulsePeriod_sets_set
    __swig_getmethods__["sets"] = _six_sicd.InterPulsePeriod_sets_get
    if _newclass:
        sets = _swig_property(_six_sicd.InterPulsePeriod_sets_get, _six_sicd.InterPulsePeriod_sets_set)

    def __eq__(self, rhs):
        """__eq__(InterPulsePeriod self, InterPulsePeriod rhs) -> bool"""
        return _six_sicd.InterPulsePeriod___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(InterPulsePeriod self, InterPulsePeriod rhs) -> bool"""
        return _six_sicd.InterPulsePeriod___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_InterPulsePeriod
    __del__ = lambda self: None
InterPulsePeriod_swigregister = _six_sicd.InterPulsePeriod_swigregister
InterPulsePeriod_swigregister(InterPulsePeriod)

class Timeline(_object):
    """Proxy of C++ six::sicd::Timeline class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timeline, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Timeline self) -> Timeline"""
        this = _six_sicd.new_Timeline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["collectStart"] = _six_sicd.Timeline_collectStart_set
    __swig_getmethods__["collectStart"] = _six_sicd.Timeline_collectStart_get
    if _newclass:
        collectStart = _swig_property(_six_sicd.Timeline_collectStart_get, _six_sicd.Timeline_collectStart_set)
    __swig_setmethods__["collectDuration"] = _six_sicd.Timeline_collectDuration_set
    __swig_getmethods__["collectDuration"] = _six_sicd.Timeline_collectDuration_get
    if _newclass:
        collectDuration = _swig_property(_six_sicd.Timeline_collectDuration_get, _six_sicd.Timeline_collectDuration_set)
    __swig_setmethods__["interPulsePeriod"] = _six_sicd.Timeline_interPulsePeriod_set
    __swig_getmethods__["interPulsePeriod"] = _six_sicd.Timeline_interPulsePeriod_get
    if _newclass:
        interPulsePeriod = _swig_property(_six_sicd.Timeline_interPulsePeriod_get, _six_sicd.Timeline_interPulsePeriod_set)

    def __eq__(self, rhs):
        """__eq__(Timeline self, Timeline rhs) -> bool"""
        return _six_sicd.Timeline___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Timeline self, Timeline rhs) -> bool"""
        return _six_sicd.Timeline___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_Timeline
    __del__ = lambda self: None
Timeline_swigregister = _six_sicd.Timeline_swigregister
Timeline_swigregister(Timeline)

class RcvAPC(_object):
    """Proxy of C++ six::sicd::RcvAPC class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvAPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcvAPC, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RcvAPC self) -> RcvAPC"""
        this = _six_sicd.new_RcvAPC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["rcvAPCPolys"] = _six_sicd.RcvAPC_rcvAPCPolys_set
    __swig_getmethods__["rcvAPCPolys"] = _six_sicd.RcvAPC_rcvAPCPolys_get
    if _newclass:
        rcvAPCPolys = _swig_property(_six_sicd.RcvAPC_rcvAPCPolys_get, _six_sicd.RcvAPC_rcvAPCPolys_set)

    def __eq__(self, rhs):
        """__eq__(RcvAPC self, RcvAPC rhs) -> bool"""
        return _six_sicd.RcvAPC___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RcvAPC self, RcvAPC rhs) -> bool"""
        return _six_sicd.RcvAPC___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_RcvAPC
    __del__ = lambda self: None
RcvAPC_swigregister = _six_sicd.RcvAPC_swigregister
RcvAPC_swigregister(RcvAPC)

class Position(_object):
    """Proxy of C++ six::sicd::Position class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arpPoly"] = _six_sicd.Position_arpPoly_set
    __swig_getmethods__["arpPoly"] = _six_sicd.Position_arpPoly_get
    if _newclass:
        arpPoly = _swig_property(_six_sicd.Position_arpPoly_get, _six_sicd.Position_arpPoly_set)
    __swig_setmethods__["grpPoly"] = _six_sicd.Position_grpPoly_set
    __swig_getmethods__["grpPoly"] = _six_sicd.Position_grpPoly_get
    if _newclass:
        grpPoly = _swig_property(_six_sicd.Position_grpPoly_get, _six_sicd.Position_grpPoly_set)
    __swig_setmethods__["txAPCPoly"] = _six_sicd.Position_txAPCPoly_set
    __swig_getmethods__["txAPCPoly"] = _six_sicd.Position_txAPCPoly_get
    if _newclass:
        txAPCPoly = _swig_property(_six_sicd.Position_txAPCPoly_get, _six_sicd.Position_txAPCPoly_set)
    __swig_setmethods__["rcvAPC"] = _six_sicd.Position_rcvAPC_set
    __swig_getmethods__["rcvAPC"] = _six_sicd.Position_rcvAPC_get
    if _newclass:
        rcvAPC = _swig_property(_six_sicd.Position_rcvAPC_get, _six_sicd.Position_rcvAPC_set)

    def __init__(self):
        """__init__(six::sicd::Position self) -> Position"""
        this = _six_sicd.new_Position()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, rhs):
        """__eq__(Position self, Position rhs) -> bool"""
        return _six_sicd.Position___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Position self, Position rhs) -> bool"""
        return _six_sicd.Position___ne__(self, rhs)


    def fillDerivedFields(self, scpcoa):
        """fillDerivedFields(Position self, SCPCOA scpcoa)"""
        return _six_sicd.Position_fillDerivedFields(self, scpcoa)


    def validate(self, log):
        """validate(Position self, logging::Logger & log) -> bool"""
        return _six_sicd.Position_validate(self, log)

    __swig_destroy__ = _six_sicd.delete_Position
    __del__ = lambda self: None
Position_swigregister = _six_sicd.Position_swigregister
Position_swigregister(Position)

class TxStep(_object):
    """Proxy of C++ six::sicd::TxStep class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxStep, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::TxStep self) -> TxStep"""
        this = _six_sicd.new_TxStep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_TxStep
    __del__ = lambda self: None

    def clone(self):
        """clone(TxStep self) -> TxStep"""
        return _six_sicd.TxStep_clone(self)

    __swig_setmethods__["waveformIndex"] = _six_sicd.TxStep_waveformIndex_set
    __swig_getmethods__["waveformIndex"] = _six_sicd.TxStep_waveformIndex_get
    if _newclass:
        waveformIndex = _swig_property(_six_sicd.TxStep_waveformIndex_get, _six_sicd.TxStep_waveformIndex_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.TxStep_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.TxStep_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.TxStep_txPolarization_get, _six_sicd.TxStep_txPolarization_set)

    def __eq__(self, rhs):
        """__eq__(TxStep self, TxStep rhs) -> bool"""
        return _six_sicd.TxStep___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(TxStep self, TxStep rhs) -> bool"""
        return _six_sicd.TxStep___ne__(self, rhs)

TxStep_swigregister = _six_sicd.TxStep_swigregister
TxStep_swigregister(TxStep)

class WaveformParameters(_object):
    """Proxy of C++ six::sicd::WaveformParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::WaveformParameters self) -> WaveformParameters"""
        this = _six_sicd.new_WaveformParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_WaveformParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(WaveformParameters self) -> WaveformParameters"""
        return _six_sicd.WaveformParameters_clone(self)

    __swig_setmethods__["txPulseLength"] = _six_sicd.WaveformParameters_txPulseLength_set
    __swig_getmethods__["txPulseLength"] = _six_sicd.WaveformParameters_txPulseLength_get
    if _newclass:
        txPulseLength = _swig_property(_six_sicd.WaveformParameters_txPulseLength_get, _six_sicd.WaveformParameters_txPulseLength_set)
    __swig_setmethods__["txRFBandwidth"] = _six_sicd.WaveformParameters_txRFBandwidth_set
    __swig_getmethods__["txRFBandwidth"] = _six_sicd.WaveformParameters_txRFBandwidth_get
    if _newclass:
        txRFBandwidth = _swig_property(_six_sicd.WaveformParameters_txRFBandwidth_get, _six_sicd.WaveformParameters_txRFBandwidth_set)
    __swig_setmethods__["txFrequencyStart"] = _six_sicd.WaveformParameters_txFrequencyStart_set
    __swig_getmethods__["txFrequencyStart"] = _six_sicd.WaveformParameters_txFrequencyStart_get
    if _newclass:
        txFrequencyStart = _swig_property(_six_sicd.WaveformParameters_txFrequencyStart_get, _six_sicd.WaveformParameters_txFrequencyStart_set)
    __swig_setmethods__["txFMRate"] = _six_sicd.WaveformParameters_txFMRate_set
    __swig_getmethods__["txFMRate"] = _six_sicd.WaveformParameters_txFMRate_get
    if _newclass:
        txFMRate = _swig_property(_six_sicd.WaveformParameters_txFMRate_get, _six_sicd.WaveformParameters_txFMRate_set)
    __swig_setmethods__["rcvDemodType"] = _six_sicd.WaveformParameters_rcvDemodType_set
    __swig_getmethods__["rcvDemodType"] = _six_sicd.WaveformParameters_rcvDemodType_get
    if _newclass:
        rcvDemodType = _swig_property(_six_sicd.WaveformParameters_rcvDemodType_get, _six_sicd.WaveformParameters_rcvDemodType_set)
    __swig_setmethods__["rcvWindowLength"] = _six_sicd.WaveformParameters_rcvWindowLength_set
    __swig_getmethods__["rcvWindowLength"] = _six_sicd.WaveformParameters_rcvWindowLength_get
    if _newclass:
        rcvWindowLength = _swig_property(_six_sicd.WaveformParameters_rcvWindowLength_get, _six_sicd.WaveformParameters_rcvWindowLength_set)
    __swig_setmethods__["adcSampleRate"] = _six_sicd.WaveformParameters_adcSampleRate_set
    __swig_getmethods__["adcSampleRate"] = _six_sicd.WaveformParameters_adcSampleRate_get
    if _newclass:
        adcSampleRate = _swig_property(_six_sicd.WaveformParameters_adcSampleRate_get, _six_sicd.WaveformParameters_adcSampleRate_set)
    __swig_setmethods__["rcvIFBandwidth"] = _six_sicd.WaveformParameters_rcvIFBandwidth_set
    __swig_getmethods__["rcvIFBandwidth"] = _six_sicd.WaveformParameters_rcvIFBandwidth_get
    if _newclass:
        rcvIFBandwidth = _swig_property(_six_sicd.WaveformParameters_rcvIFBandwidth_get, _six_sicd.WaveformParameters_rcvIFBandwidth_set)
    __swig_setmethods__["rcvFrequencyStart"] = _six_sicd.WaveformParameters_rcvFrequencyStart_set
    __swig_getmethods__["rcvFrequencyStart"] = _six_sicd.WaveformParameters_rcvFrequencyStart_get
    if _newclass:
        rcvFrequencyStart = _swig_property(_six_sicd.WaveformParameters_rcvFrequencyStart_get, _six_sicd.WaveformParameters_rcvFrequencyStart_set)
    __swig_setmethods__["rcvFMRate"] = _six_sicd.WaveformParameters_rcvFMRate_set
    __swig_getmethods__["rcvFMRate"] = _six_sicd.WaveformParameters_rcvFMRate_get
    if _newclass:
        rcvFMRate = _swig_property(_six_sicd.WaveformParameters_rcvFMRate_get, _six_sicd.WaveformParameters_rcvFMRate_set)

    def __eq__(self, rhs):
        """__eq__(WaveformParameters self, WaveformParameters rhs) -> bool"""
        return _six_sicd.WaveformParameters___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(WaveformParameters self, WaveformParameters rhs) -> bool"""
        return _six_sicd.WaveformParameters___ne__(self, rhs)


    def fillDerivedFields(self):
        """fillDerivedFields(WaveformParameters self)"""
        return _six_sicd.WaveformParameters_fillDerivedFields(self)


    def validate(self, refFrequencyIndex, log):
        """validate(WaveformParameters self, int refFrequencyIndex, logging::Logger & log) -> bool"""
        return _six_sicd.WaveformParameters_validate(self, refFrequencyIndex, log)

WaveformParameters_swigregister = _six_sicd.WaveformParameters_swigregister
WaveformParameters_swigregister(WaveformParameters)

class ChannelParameters(_object):
    """Proxy of C++ six::sicd::ChannelParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ChannelParameters self) -> ChannelParameters"""
        this = _six_sicd.new_ChannelParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(ChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ChannelParameters_clone(self)

    __swig_setmethods__["txRcvPolarization"] = _six_sicd.ChannelParameters_txRcvPolarization_set
    __swig_getmethods__["txRcvPolarization"] = _six_sicd.ChannelParameters_txRcvPolarization_get
    if _newclass:
        txRcvPolarization = _swig_property(_six_sicd.ChannelParameters_txRcvPolarization_get, _six_sicd.ChannelParameters_txRcvPolarization_set)
    __swig_setmethods__["rcvAPCIndex"] = _six_sicd.ChannelParameters_rcvAPCIndex_set
    __swig_getmethods__["rcvAPCIndex"] = _six_sicd.ChannelParameters_rcvAPCIndex_get
    if _newclass:
        rcvAPCIndex = _swig_property(_six_sicd.ChannelParameters_rcvAPCIndex_get, _six_sicd.ChannelParameters_rcvAPCIndex_set)

    def __eq__(self, rhs):
        """__eq__(ChannelParameters self, ChannelParameters rhs) -> bool"""
        return _six_sicd.ChannelParameters___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ChannelParameters self, ChannelParameters rhs) -> bool"""
        return _six_sicd.ChannelParameters___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_ChannelParameters
    __del__ = lambda self: None
ChannelParameters_swigregister = _six_sicd.ChannelParameters_swigregister
ChannelParameters_swigregister(ChannelParameters)

class AreaDirectionParameters(_object):
    """Proxy of C++ six::sicd::AreaDirectionParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::AreaDirectionParameters self) -> AreaDirectionParameters"""
        this = _six_sicd.new_AreaDirectionParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(AreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.AreaDirectionParameters_clone(self)

    __swig_setmethods__["unitVector"] = _six_sicd.AreaDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.AreaDirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.AreaDirectionParameters_unitVector_get, _six_sicd.AreaDirectionParameters_unitVector_set)
    __swig_setmethods__["spacing"] = _six_sicd.AreaDirectionParameters_spacing_set
    __swig_getmethods__["spacing"] = _six_sicd.AreaDirectionParameters_spacing_get
    if _newclass:
        spacing = _swig_property(_six_sicd.AreaDirectionParameters_spacing_get, _six_sicd.AreaDirectionParameters_spacing_set)
    __swig_setmethods__["elements"] = _six_sicd.AreaDirectionParameters_elements_set
    __swig_getmethods__["elements"] = _six_sicd.AreaDirectionParameters_elements_get
    if _newclass:
        elements = _swig_property(_six_sicd.AreaDirectionParameters_elements_get, _six_sicd.AreaDirectionParameters_elements_set)
    __swig_setmethods__["first"] = _six_sicd.AreaDirectionParameters_first_set
    __swig_getmethods__["first"] = _six_sicd.AreaDirectionParameters_first_get
    if _newclass:
        first = _swig_property(_six_sicd.AreaDirectionParameters_first_get, _six_sicd.AreaDirectionParameters_first_set)

    def getExtentInMeters(self):
        """getExtentInMeters(AreaDirectionParameters self) -> double"""
        return _six_sicd.AreaDirectionParameters_getExtentInMeters(self)


    def __eq__(self, other):
        """__eq__(AreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.AreaDirectionParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(AreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.AreaDirectionParameters___ne__(self, other)

    __swig_destroy__ = _six_sicd.delete_AreaDirectionParameters
    __del__ = lambda self: None
AreaDirectionParameters_swigregister = _six_sicd.AreaDirectionParameters_swigregister
AreaDirectionParameters_swigregister(AreaDirectionParameters)

class Segment(_object):
    """Proxy of C++ six::sicd::Segment class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Segment self) -> Segment"""
        this = _six_sicd.new_Segment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_Segment
    __del__ = lambda self: None

    def clone(self):
        """clone(Segment self) -> Segment"""
        return _six_sicd.Segment_clone(self)


    def getNumLines(self):
        """getNumLines(Segment self) -> size_t"""
        return _six_sicd.Segment_getNumLines(self)


    def getNumSamples(self):
        """getNumSamples(Segment self) -> size_t"""
        return _six_sicd.Segment_getNumSamples(self)

    __swig_setmethods__["startLine"] = _six_sicd.Segment_startLine_set
    __swig_getmethods__["startLine"] = _six_sicd.Segment_startLine_get
    if _newclass:
        startLine = _swig_property(_six_sicd.Segment_startLine_get, _six_sicd.Segment_startLine_set)
    __swig_setmethods__["startSample"] = _six_sicd.Segment_startSample_set
    __swig_getmethods__["startSample"] = _six_sicd.Segment_startSample_get
    if _newclass:
        startSample = _swig_property(_six_sicd.Segment_startSample_get, _six_sicd.Segment_startSample_set)
    __swig_setmethods__["endLine"] = _six_sicd.Segment_endLine_set
    __swig_getmethods__["endLine"] = _six_sicd.Segment_endLine_get
    if _newclass:
        endLine = _swig_property(_six_sicd.Segment_endLine_get, _six_sicd.Segment_endLine_set)
    __swig_setmethods__["endSample"] = _six_sicd.Segment_endSample_set
    __swig_getmethods__["endSample"] = _six_sicd.Segment_endSample_get
    if _newclass:
        endSample = _swig_property(_six_sicd.Segment_endSample_get, _six_sicd.Segment_endSample_set)
    __swig_setmethods__["identifier"] = _six_sicd.Segment_identifier_set
    __swig_getmethods__["identifier"] = _six_sicd.Segment_identifier_get
    if _newclass:
        identifier = _swig_property(_six_sicd.Segment_identifier_get, _six_sicd.Segment_identifier_set)

    def __eq__(self, rhs):
        """__eq__(Segment self, Segment rhs) -> bool"""
        return _six_sicd.Segment___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Segment self, Segment rhs) -> bool"""
        return _six_sicd.Segment___ne__(self, rhs)


    def rotateCCW(self, numColumns):
        """rotateCCW(Segment self, size_t numColumns)"""
        return _six_sicd.Segment_rotateCCW(self, numColumns)

Segment_swigregister = _six_sicd.Segment_swigregister
Segment_swigregister(Segment)

class AreaPlane(_object):
    """Proxy of C++ six::sicd::AreaPlane class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaPlane, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::AreaPlane self) -> AreaPlane"""
        this = _six_sicd.new_AreaPlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(AreaPlane self) -> AreaPlane"""
        return _six_sicd.AreaPlane_clone(self)


    def getAdjustedReferencePoint(self):
        """getAdjustedReferencePoint(AreaPlane self) -> RowColDouble"""
        return _six_sicd.AreaPlane_getAdjustedReferencePoint(self)

    __swig_setmethods__["referencePoint"] = _six_sicd.AreaPlane_referencePoint_set
    __swig_getmethods__["referencePoint"] = _six_sicd.AreaPlane_referencePoint_get
    if _newclass:
        referencePoint = _swig_property(_six_sicd.AreaPlane_referencePoint_get, _six_sicd.AreaPlane_referencePoint_set)
    __swig_setmethods__["xDirection"] = _six_sicd.AreaPlane_xDirection_set
    __swig_getmethods__["xDirection"] = _six_sicd.AreaPlane_xDirection_get
    if _newclass:
        xDirection = _swig_property(_six_sicd.AreaPlane_xDirection_get, _six_sicd.AreaPlane_xDirection_set)
    __swig_setmethods__["yDirection"] = _six_sicd.AreaPlane_yDirection_set
    __swig_getmethods__["yDirection"] = _six_sicd.AreaPlane_yDirection_get
    if _newclass:
        yDirection = _swig_property(_six_sicd.AreaPlane_yDirection_get, _six_sicd.AreaPlane_yDirection_set)
    __swig_setmethods__["segmentList"] = _six_sicd.AreaPlane_segmentList_set
    __swig_getmethods__["segmentList"] = _six_sicd.AreaPlane_segmentList_get
    if _newclass:
        segmentList = _swig_property(_six_sicd.AreaPlane_segmentList_get, _six_sicd.AreaPlane_segmentList_set)
    __swig_setmethods__["orientation"] = _six_sicd.AreaPlane_orientation_set
    __swig_getmethods__["orientation"] = _six_sicd.AreaPlane_orientation_get
    if _newclass:
        orientation = _swig_property(_six_sicd.AreaPlane_orientation_get, _six_sicd.AreaPlane_orientation_set)

    def __eq__(self, rhs):
        """__eq__(AreaPlane self, AreaPlane rhs) -> bool"""
        return _six_sicd.AreaPlane___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(AreaPlane self, AreaPlane rhs) -> bool"""
        return _six_sicd.AreaPlane___ne__(self, rhs)


    def getSegment(self, segmentId):
        """getSegment(AreaPlane self, std::string const & segmentId) -> Segment"""
        return _six_sicd.AreaPlane_getSegment(self, segmentId)


    def rotateCCW(self):
        """rotateCCW(AreaPlane self)"""
        return _six_sicd.AreaPlane_rotateCCW(self)


    def rotateToShadowsDown(self):
        """rotateToShadowsDown(AreaPlane self)"""
        return _six_sicd.AreaPlane_rotateToShadowsDown(self)

    __swig_destroy__ = _six_sicd.delete_AreaPlane
    __del__ = lambda self: None
AreaPlane_swigregister = _six_sicd.AreaPlane_swigregister
AreaPlane_swigregister(AreaPlane)

class Area(_object):
    """Proxy of C++ six::sicd::Area class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Area self) -> Area"""
        this = _six_sicd.new_Area()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(Area self) -> Area"""
        return _six_sicd.Area_clone(self)

    __swig_setmethods__["acpCorners"] = _six_sicd.Area_acpCorners_set
    __swig_getmethods__["acpCorners"] = _six_sicd.Area_acpCorners_get
    if _newclass:
        acpCorners = _swig_property(_six_sicd.Area_acpCorners_get, _six_sicd.Area_acpCorners_set)
    __swig_setmethods__["plane"] = _six_sicd.Area_plane_set
    __swig_getmethods__["plane"] = _six_sicd.Area_plane_get
    if _newclass:
        plane = _swig_property(_six_sicd.Area_plane_get, _six_sicd.Area_plane_set)

    def __eq__(self, rhs):
        """__eq__(Area self, Area rhs) -> bool"""
        return _six_sicd.Area___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Area self, Area rhs) -> bool"""
        return _six_sicd.Area___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_Area
    __del__ = lambda self: None
Area_swigregister = _six_sicd.Area_swigregister
Area_swigregister(Area)

class RadarCollection(_object):
    """Proxy of C++ six::sicd::RadarCollection class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarCollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RadarCollection self) -> RadarCollection"""
        this = _six_sicd.new_RadarCollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(RadarCollection self) -> RadarCollection"""
        return _six_sicd.RadarCollection_clone(self)

    __swig_setmethods__["refFrequencyIndex"] = _six_sicd.RadarCollection_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _six_sicd.RadarCollection_refFrequencyIndex_get
    if _newclass:
        refFrequencyIndex = _swig_property(_six_sicd.RadarCollection_refFrequencyIndex_get, _six_sicd.RadarCollection_refFrequencyIndex_set)
    __swig_setmethods__["txFrequencyMin"] = _six_sicd.RadarCollection_txFrequencyMin_set
    __swig_getmethods__["txFrequencyMin"] = _six_sicd.RadarCollection_txFrequencyMin_get
    if _newclass:
        txFrequencyMin = _swig_property(_six_sicd.RadarCollection_txFrequencyMin_get, _six_sicd.RadarCollection_txFrequencyMin_set)
    __swig_setmethods__["txFrequencyMax"] = _six_sicd.RadarCollection_txFrequencyMax_set
    __swig_getmethods__["txFrequencyMax"] = _six_sicd.RadarCollection_txFrequencyMax_get
    if _newclass:
        txFrequencyMax = _swig_property(_six_sicd.RadarCollection_txFrequencyMax_get, _six_sicd.RadarCollection_txFrequencyMax_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.RadarCollection_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.RadarCollection_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.RadarCollection_txPolarization_get, _six_sicd.RadarCollection_txPolarization_set)
    __swig_setmethods__["polarizationHVAnglePoly"] = _six_sicd.RadarCollection_polarizationHVAnglePoly_set
    __swig_getmethods__["polarizationHVAnglePoly"] = _six_sicd.RadarCollection_polarizationHVAnglePoly_get
    if _newclass:
        polarizationHVAnglePoly = _swig_property(_six_sicd.RadarCollection_polarizationHVAnglePoly_get, _six_sicd.RadarCollection_polarizationHVAnglePoly_set)
    __swig_setmethods__["txSequence"] = _six_sicd.RadarCollection_txSequence_set
    __swig_getmethods__["txSequence"] = _six_sicd.RadarCollection_txSequence_get
    if _newclass:
        txSequence = _swig_property(_six_sicd.RadarCollection_txSequence_get, _six_sicd.RadarCollection_txSequence_set)
    __swig_setmethods__["waveform"] = _six_sicd.RadarCollection_waveform_set
    __swig_getmethods__["waveform"] = _six_sicd.RadarCollection_waveform_get
    if _newclass:
        waveform = _swig_property(_six_sicd.RadarCollection_waveform_get, _six_sicd.RadarCollection_waveform_set)
    __swig_setmethods__["rcvChannels"] = _six_sicd.RadarCollection_rcvChannels_set
    __swig_getmethods__["rcvChannels"] = _six_sicd.RadarCollection_rcvChannels_get
    if _newclass:
        rcvChannels = _swig_property(_six_sicd.RadarCollection_rcvChannels_get, _six_sicd.RadarCollection_rcvChannels_set)
    __swig_setmethods__["area"] = _six_sicd.RadarCollection_area_set
    __swig_getmethods__["area"] = _six_sicd.RadarCollection_area_get
    if _newclass:
        area = _swig_property(_six_sicd.RadarCollection_area_get, _six_sicd.RadarCollection_area_set)
    __swig_setmethods__["parameters"] = _six_sicd.RadarCollection_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.RadarCollection_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.RadarCollection_parameters_get, _six_sicd.RadarCollection_parameters_set)

    def __eq__(self, rhs):
        """__eq__(RadarCollection self, RadarCollection rhs) -> bool"""
        return _six_sicd.RadarCollection___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RadarCollection self, RadarCollection rhs) -> bool"""
        return _six_sicd.RadarCollection___ne__(self, rhs)


    def fillDerivedFields(self):
        """fillDerivedFields(RadarCollection self)"""
        return _six_sicd.RadarCollection_fillDerivedFields(self)


    def validate(self, log):
        """validate(RadarCollection self, logging::Logger & log) -> bool"""
        return _six_sicd.RadarCollection_validate(self, log)

    __swig_destroy__ = _six_sicd.delete_RadarCollection
    __del__ = lambda self: None
RadarCollection_swigregister = _six_sicd.RadarCollection_swigregister
RadarCollection_swigregister(RadarCollection)

class RcvChannelProcessed(_object):
    """Proxy of C++ six::sicd::RcvChannelProcessed class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcvChannelProcessed, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RcvChannelProcessed self) -> RcvChannelProcessed"""
        this = _six_sicd.new_RcvChannelProcessed()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["numChannelsProcessed"] = _six_sicd.RcvChannelProcessed_numChannelsProcessed_set
    __swig_getmethods__["numChannelsProcessed"] = _six_sicd.RcvChannelProcessed_numChannelsProcessed_get
    if _newclass:
        numChannelsProcessed = _swig_property(_six_sicd.RcvChannelProcessed_numChannelsProcessed_get, _six_sicd.RcvChannelProcessed_numChannelsProcessed_set)
    __swig_setmethods__["prfScaleFactor"] = _six_sicd.RcvChannelProcessed_prfScaleFactor_set
    __swig_getmethods__["prfScaleFactor"] = _six_sicd.RcvChannelProcessed_prfScaleFactor_get
    if _newclass:
        prfScaleFactor = _swig_property(_six_sicd.RcvChannelProcessed_prfScaleFactor_get, _six_sicd.RcvChannelProcessed_prfScaleFactor_set)
    __swig_setmethods__["channelIndex"] = _six_sicd.RcvChannelProcessed_channelIndex_set
    __swig_getmethods__["channelIndex"] = _six_sicd.RcvChannelProcessed_channelIndex_get
    if _newclass:
        channelIndex = _swig_property(_six_sicd.RcvChannelProcessed_channelIndex_get, _six_sicd.RcvChannelProcessed_channelIndex_set)

    def __eq__(self, rhs):
        """__eq__(RcvChannelProcessed self, RcvChannelProcessed rhs) -> bool"""
        return _six_sicd.RcvChannelProcessed___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RcvChannelProcessed self, RcvChannelProcessed rhs) -> bool"""
        return _six_sicd.RcvChannelProcessed___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_RcvChannelProcessed
    __del__ = lambda self: None
RcvChannelProcessed_swigregister = _six_sicd.RcvChannelProcessed_swigregister
RcvChannelProcessed_swigregister(RcvChannelProcessed)

class Distortion(_object):
    """Proxy of C++ six::sicd::Distortion class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distortion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Distortion, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Distortion self) -> Distortion"""
        this = _six_sicd.new_Distortion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["calibrationDate"] = _six_sicd.Distortion_calibrationDate_set
    __swig_getmethods__["calibrationDate"] = _six_sicd.Distortion_calibrationDate_get
    if _newclass:
        calibrationDate = _swig_property(_six_sicd.Distortion_calibrationDate_get, _six_sicd.Distortion_calibrationDate_set)
    __swig_setmethods__["a"] = _six_sicd.Distortion_a_set
    __swig_getmethods__["a"] = _six_sicd.Distortion_a_get
    if _newclass:
        a = _swig_property(_six_sicd.Distortion_a_get, _six_sicd.Distortion_a_set)
    __swig_setmethods__["f1"] = _six_sicd.Distortion_f1_set
    __swig_getmethods__["f1"] = _six_sicd.Distortion_f1_get
    if _newclass:
        f1 = _swig_property(_six_sicd.Distortion_f1_get, _six_sicd.Distortion_f1_set)
    __swig_setmethods__["q1"] = _six_sicd.Distortion_q1_set
    __swig_getmethods__["q1"] = _six_sicd.Distortion_q1_get
    if _newclass:
        q1 = _swig_property(_six_sicd.Distortion_q1_get, _six_sicd.Distortion_q1_set)
    __swig_setmethods__["q2"] = _six_sicd.Distortion_q2_set
    __swig_getmethods__["q2"] = _six_sicd.Distortion_q2_get
    if _newclass:
        q2 = _swig_property(_six_sicd.Distortion_q2_get, _six_sicd.Distortion_q2_set)
    __swig_setmethods__["f2"] = _six_sicd.Distortion_f2_set
    __swig_getmethods__["f2"] = _six_sicd.Distortion_f2_get
    if _newclass:
        f2 = _swig_property(_six_sicd.Distortion_f2_get, _six_sicd.Distortion_f2_set)
    __swig_setmethods__["q3"] = _six_sicd.Distortion_q3_set
    __swig_getmethods__["q3"] = _six_sicd.Distortion_q3_get
    if _newclass:
        q3 = _swig_property(_six_sicd.Distortion_q3_get, _six_sicd.Distortion_q3_set)
    __swig_setmethods__["q4"] = _six_sicd.Distortion_q4_set
    __swig_getmethods__["q4"] = _six_sicd.Distortion_q4_get
    if _newclass:
        q4 = _swig_property(_six_sicd.Distortion_q4_get, _six_sicd.Distortion_q4_set)
    __swig_setmethods__["gainErrorA"] = _six_sicd.Distortion_gainErrorA_set
    __swig_getmethods__["gainErrorA"] = _six_sicd.Distortion_gainErrorA_get
    if _newclass:
        gainErrorA = _swig_property(_six_sicd.Distortion_gainErrorA_get, _six_sicd.Distortion_gainErrorA_set)
    __swig_setmethods__["gainErrorF1"] = _six_sicd.Distortion_gainErrorF1_set
    __swig_getmethods__["gainErrorF1"] = _six_sicd.Distortion_gainErrorF1_get
    if _newclass:
        gainErrorF1 = _swig_property(_six_sicd.Distortion_gainErrorF1_get, _six_sicd.Distortion_gainErrorF1_set)
    __swig_setmethods__["gainErrorF2"] = _six_sicd.Distortion_gainErrorF2_set
    __swig_getmethods__["gainErrorF2"] = _six_sicd.Distortion_gainErrorF2_get
    if _newclass:
        gainErrorF2 = _swig_property(_six_sicd.Distortion_gainErrorF2_get, _six_sicd.Distortion_gainErrorF2_set)
    __swig_setmethods__["phaseErrorF1"] = _six_sicd.Distortion_phaseErrorF1_set
    __swig_getmethods__["phaseErrorF1"] = _six_sicd.Distortion_phaseErrorF1_get
    if _newclass:
        phaseErrorF1 = _swig_property(_six_sicd.Distortion_phaseErrorF1_get, _six_sicd.Distortion_phaseErrorF1_set)
    __swig_setmethods__["phaseErrorF2"] = _six_sicd.Distortion_phaseErrorF2_set
    __swig_getmethods__["phaseErrorF2"] = _six_sicd.Distortion_phaseErrorF2_get
    if _newclass:
        phaseErrorF2 = _swig_property(_six_sicd.Distortion_phaseErrorF2_get, _six_sicd.Distortion_phaseErrorF2_set)

    def __eq__(self, rhs):
        """__eq__(Distortion self, Distortion rhs) -> bool"""
        return _six_sicd.Distortion___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Distortion self, Distortion rhs) -> bool"""
        return _six_sicd.Distortion___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_Distortion
    __del__ = lambda self: None
Distortion_swigregister = _six_sicd.Distortion_swigregister
Distortion_swigregister(Distortion)

class PolarizationCalibration(_object):
    """Proxy of C++ six::sicd::PolarizationCalibration class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationCalibration, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::PolarizationCalibration self) -> PolarizationCalibration"""
        this = _six_sicd.new_PolarizationCalibration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["hvAngleCompensationApplied"] = _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_set
    __swig_getmethods__["hvAngleCompensationApplied"] = _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_get
    if _newclass:
        hvAngleCompensationApplied = _swig_property(_six_sicd.PolarizationCalibration_hvAngleCompensationApplied_get, _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_set)
    __swig_setmethods__["distortionCorrectionApplied"] = _six_sicd.PolarizationCalibration_distortionCorrectionApplied_set
    __swig_getmethods__["distortionCorrectionApplied"] = _six_sicd.PolarizationCalibration_distortionCorrectionApplied_get
    if _newclass:
        distortionCorrectionApplied = _swig_property(_six_sicd.PolarizationCalibration_distortionCorrectionApplied_get, _six_sicd.PolarizationCalibration_distortionCorrectionApplied_set)
    __swig_setmethods__["distortion"] = _six_sicd.PolarizationCalibration_distortion_set
    __swig_getmethods__["distortion"] = _six_sicd.PolarizationCalibration_distortion_get
    if _newclass:
        distortion = _swig_property(_six_sicd.PolarizationCalibration_distortion_get, _six_sicd.PolarizationCalibration_distortion_set)

    def __eq__(self, rhs):
        """__eq__(PolarizationCalibration self, PolarizationCalibration rhs) -> bool"""
        return _six_sicd.PolarizationCalibration___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(PolarizationCalibration self, PolarizationCalibration rhs) -> bool"""
        return _six_sicd.PolarizationCalibration___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_PolarizationCalibration
    __del__ = lambda self: None
PolarizationCalibration_swigregister = _six_sicd.PolarizationCalibration_swigregister
PolarizationCalibration_swigregister(PolarizationCalibration)

class Processing(_object):
    """Proxy of C++ six::sicd::Processing class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Processing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Processing, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Processing self) -> Processing"""
        this = _six_sicd.new_Processing()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["type"] = _six_sicd.Processing_type_set
    __swig_getmethods__["type"] = _six_sicd.Processing_type_get
    if _newclass:
        type = _swig_property(_six_sicd.Processing_type_get, _six_sicd.Processing_type_set)
    __swig_setmethods__["applied"] = _six_sicd.Processing_applied_set
    __swig_getmethods__["applied"] = _six_sicd.Processing_applied_get
    if _newclass:
        applied = _swig_property(_six_sicd.Processing_applied_get, _six_sicd.Processing_applied_set)
    __swig_setmethods__["parameters"] = _six_sicd.Processing_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.Processing_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.Processing_parameters_get, _six_sicd.Processing_parameters_set)

    def __eq__(self, rhs):
        """__eq__(Processing self, Processing rhs) -> bool"""
        return _six_sicd.Processing___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Processing self, Processing rhs) -> bool"""
        return _six_sicd.Processing___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_Processing
    __del__ = lambda self: None
Processing_swigregister = _six_sicd.Processing_swigregister
Processing_swigregister(Processing)

class ImageFormation(_object):
    """Proxy of C++ six::sicd::ImageFormation class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFormation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ImageFormation self) -> ImageFormation"""
        this = _six_sicd.new_ImageFormation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["segmentIdentifier"] = _six_sicd.ImageFormation_segmentIdentifier_set
    __swig_getmethods__["segmentIdentifier"] = _six_sicd.ImageFormation_segmentIdentifier_get
    if _newclass:
        segmentIdentifier = _swig_property(_six_sicd.ImageFormation_segmentIdentifier_get, _six_sicd.ImageFormation_segmentIdentifier_set)
    __swig_setmethods__["rcvChannelProcessed"] = _six_sicd.ImageFormation_rcvChannelProcessed_set
    __swig_getmethods__["rcvChannelProcessed"] = _six_sicd.ImageFormation_rcvChannelProcessed_get
    if _newclass:
        rcvChannelProcessed = _swig_property(_six_sicd.ImageFormation_rcvChannelProcessed_get, _six_sicd.ImageFormation_rcvChannelProcessed_set)
    __swig_setmethods__["txRcvPolarizationProc"] = _six_sicd.ImageFormation_txRcvPolarizationProc_set
    __swig_getmethods__["txRcvPolarizationProc"] = _six_sicd.ImageFormation_txRcvPolarizationProc_get
    if _newclass:
        txRcvPolarizationProc = _swig_property(_six_sicd.ImageFormation_txRcvPolarizationProc_get, _six_sicd.ImageFormation_txRcvPolarizationProc_set)
    __swig_setmethods__["imageFormationAlgorithm"] = _six_sicd.ImageFormation_imageFormationAlgorithm_set
    __swig_getmethods__["imageFormationAlgorithm"] = _six_sicd.ImageFormation_imageFormationAlgorithm_get
    if _newclass:
        imageFormationAlgorithm = _swig_property(_six_sicd.ImageFormation_imageFormationAlgorithm_get, _six_sicd.ImageFormation_imageFormationAlgorithm_set)
    __swig_setmethods__["tStartProc"] = _six_sicd.ImageFormation_tStartProc_set
    __swig_getmethods__["tStartProc"] = _six_sicd.ImageFormation_tStartProc_get
    if _newclass:
        tStartProc = _swig_property(_six_sicd.ImageFormation_tStartProc_get, _six_sicd.ImageFormation_tStartProc_set)
    __swig_setmethods__["tEndProc"] = _six_sicd.ImageFormation_tEndProc_set
    __swig_getmethods__["tEndProc"] = _six_sicd.ImageFormation_tEndProc_get
    if _newclass:
        tEndProc = _swig_property(_six_sicd.ImageFormation_tEndProc_get, _six_sicd.ImageFormation_tEndProc_set)
    __swig_setmethods__["txFrequencyProcMin"] = _six_sicd.ImageFormation_txFrequencyProcMin_set
    __swig_getmethods__["txFrequencyProcMin"] = _six_sicd.ImageFormation_txFrequencyProcMin_get
    if _newclass:
        txFrequencyProcMin = _swig_property(_six_sicd.ImageFormation_txFrequencyProcMin_get, _six_sicd.ImageFormation_txFrequencyProcMin_set)
    __swig_setmethods__["txFrequencyProcMax"] = _six_sicd.ImageFormation_txFrequencyProcMax_set
    __swig_getmethods__["txFrequencyProcMax"] = _six_sicd.ImageFormation_txFrequencyProcMax_get
    if _newclass:
        txFrequencyProcMax = _swig_property(_six_sicd.ImageFormation_txFrequencyProcMax_get, _six_sicd.ImageFormation_txFrequencyProcMax_set)
    __swig_setmethods__["slowTimeBeamCompensation"] = _six_sicd.ImageFormation_slowTimeBeamCompensation_set
    __swig_getmethods__["slowTimeBeamCompensation"] = _six_sicd.ImageFormation_slowTimeBeamCompensation_get
    if _newclass:
        slowTimeBeamCompensation = _swig_property(_six_sicd.ImageFormation_slowTimeBeamCompensation_get, _six_sicd.ImageFormation_slowTimeBeamCompensation_set)
    __swig_setmethods__["imageBeamCompensation"] = _six_sicd.ImageFormation_imageBeamCompensation_set
    __swig_getmethods__["imageBeamCompensation"] = _six_sicd.ImageFormation_imageBeamCompensation_get
    if _newclass:
        imageBeamCompensation = _swig_property(_six_sicd.ImageFormation_imageBeamCompensation_get, _six_sicd.ImageFormation_imageBeamCompensation_set)
    __swig_setmethods__["azimuthAutofocus"] = _six_sicd.ImageFormation_azimuthAutofocus_set
    __swig_getmethods__["azimuthAutofocus"] = _six_sicd.ImageFormation_azimuthAutofocus_get
    if _newclass:
        azimuthAutofocus = _swig_property(_six_sicd.ImageFormation_azimuthAutofocus_get, _six_sicd.ImageFormation_azimuthAutofocus_set)
    __swig_setmethods__["rangeAutofocus"] = _six_sicd.ImageFormation_rangeAutofocus_set
    __swig_getmethods__["rangeAutofocus"] = _six_sicd.ImageFormation_rangeAutofocus_get
    if _newclass:
        rangeAutofocus = _swig_property(_six_sicd.ImageFormation_rangeAutofocus_get, _six_sicd.ImageFormation_rangeAutofocus_set)
    __swig_setmethods__["processing"] = _six_sicd.ImageFormation_processing_set
    __swig_getmethods__["processing"] = _six_sicd.ImageFormation_processing_get
    if _newclass:
        processing = _swig_property(_six_sicd.ImageFormation_processing_get, _six_sicd.ImageFormation_processing_set)
    __swig_setmethods__["polarizationCalibration"] = _six_sicd.ImageFormation_polarizationCalibration_set
    __swig_getmethods__["polarizationCalibration"] = _six_sicd.ImageFormation_polarizationCalibration_get
    if _newclass:
        polarizationCalibration = _swig_property(_six_sicd.ImageFormation_polarizationCalibration_get, _six_sicd.ImageFormation_polarizationCalibration_set)

    def __eq__(self, rhs):
        """__eq__(ImageFormation self, ImageFormation rhs) -> bool"""
        return _six_sicd.ImageFormation___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ImageFormation self, ImageFormation rhs) -> bool"""
        return _six_sicd.ImageFormation___ne__(self, rhs)


    def fillDefaultFields(self, radarCollection):
        """fillDefaultFields(ImageFormation self, RadarCollection radarCollection)"""
        return _six_sicd.ImageFormation_fillDefaultFields(self, radarCollection)

    __swig_destroy__ = _six_sicd.delete_ImageFormation
    __del__ = lambda self: None
ImageFormation_swigregister = _six_sicd.ImageFormation_swigregister
ImageFormation_swigregister(ImageFormation)

class SCPCOA(_object):
    """Proxy of C++ six::sicd::SCPCOA class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPCOA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::SCPCOA self) -> SCPCOA"""
        this = _six_sicd.new_SCPCOA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["scpTime"] = _six_sicd.SCPCOA_scpTime_set
    __swig_getmethods__["scpTime"] = _six_sicd.SCPCOA_scpTime_get
    if _newclass:
        scpTime = _swig_property(_six_sicd.SCPCOA_scpTime_get, _six_sicd.SCPCOA_scpTime_set)
    __swig_setmethods__["arpPos"] = _six_sicd.SCPCOA_arpPos_set
    __swig_getmethods__["arpPos"] = _six_sicd.SCPCOA_arpPos_get
    if _newclass:
        arpPos = _swig_property(_six_sicd.SCPCOA_arpPos_get, _six_sicd.SCPCOA_arpPos_set)
    __swig_setmethods__["arpVel"] = _six_sicd.SCPCOA_arpVel_set
    __swig_getmethods__["arpVel"] = _six_sicd.SCPCOA_arpVel_get
    if _newclass:
        arpVel = _swig_property(_six_sicd.SCPCOA_arpVel_get, _six_sicd.SCPCOA_arpVel_set)
    __swig_setmethods__["arpAcc"] = _six_sicd.SCPCOA_arpAcc_set
    __swig_getmethods__["arpAcc"] = _six_sicd.SCPCOA_arpAcc_get
    if _newclass:
        arpAcc = _swig_property(_six_sicd.SCPCOA_arpAcc_get, _six_sicd.SCPCOA_arpAcc_set)
    __swig_setmethods__["sideOfTrack"] = _six_sicd.SCPCOA_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _six_sicd.SCPCOA_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_six_sicd.SCPCOA_sideOfTrack_get, _six_sicd.SCPCOA_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _six_sicd.SCPCOA_slantRange_set
    __swig_getmethods__["slantRange"] = _six_sicd.SCPCOA_slantRange_get
    if _newclass:
        slantRange = _swig_property(_six_sicd.SCPCOA_slantRange_get, _six_sicd.SCPCOA_slantRange_set)
    __swig_setmethods__["groundRange"] = _six_sicd.SCPCOA_groundRange_set
    __swig_getmethods__["groundRange"] = _six_sicd.SCPCOA_groundRange_get
    if _newclass:
        groundRange = _swig_property(_six_sicd.SCPCOA_groundRange_get, _six_sicd.SCPCOA_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _six_sicd.SCPCOA_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _six_sicd.SCPCOA_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_six_sicd.SCPCOA_dopplerConeAngle_get, _six_sicd.SCPCOA_dopplerConeAngle_set)
    __swig_setmethods__["grazeAngle"] = _six_sicd.SCPCOA_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _six_sicd.SCPCOA_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_six_sicd.SCPCOA_grazeAngle_get, _six_sicd.SCPCOA_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _six_sicd.SCPCOA_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _six_sicd.SCPCOA_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_six_sicd.SCPCOA_incidenceAngle_get, _six_sicd.SCPCOA_incidenceAngle_set)
    __swig_setmethods__["twistAngle"] = _six_sicd.SCPCOA_twistAngle_set
    __swig_getmethods__["twistAngle"] = _six_sicd.SCPCOA_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_six_sicd.SCPCOA_twistAngle_get, _six_sicd.SCPCOA_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _six_sicd.SCPCOA_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _six_sicd.SCPCOA_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_six_sicd.SCPCOA_slopeAngle_get, _six_sicd.SCPCOA_slopeAngle_set)
    __swig_setmethods__["azimAngle"] = _six_sicd.SCPCOA_azimAngle_set
    __swig_getmethods__["azimAngle"] = _six_sicd.SCPCOA_azimAngle_get
    if _newclass:
        azimAngle = _swig_property(_six_sicd.SCPCOA_azimAngle_get, _six_sicd.SCPCOA_azimAngle_set)
    __swig_setmethods__["layoverAngle"] = _six_sicd.SCPCOA_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _six_sicd.SCPCOA_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_six_sicd.SCPCOA_layoverAngle_get, _six_sicd.SCPCOA_layoverAngle_set)

    def __eq__(self, rhs):
        """__eq__(SCPCOA self, SCPCOA rhs) -> bool"""
        return _six_sicd.SCPCOA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(SCPCOA self, SCPCOA rhs) -> bool"""
        return _six_sicd.SCPCOA___ne__(self, rhs)


    def fillDerivedFields(self, geoData, grid, position):
        """fillDerivedFields(SCPCOA self, GeoData geoData, Grid grid, Position position)"""
        return _six_sicd.SCPCOA_fillDerivedFields(self, geoData, grid, position)


    def validate(self, geoData, grid, position, log):
        """validate(SCPCOA self, GeoData geoData, Grid grid, Position position, logging::Logger & log) -> bool"""
        return _six_sicd.SCPCOA_validate(self, geoData, grid, position, log)


    def uLOS(self, scp):
        """uLOS(SCPCOA self, Vector3 scp) -> Vector3"""
        return _six_sicd.SCPCOA_uLOS(self, scp)


    def look(self, scp):
        """look(SCPCOA self, Vector3 scp) -> int"""
        return _six_sicd.SCPCOA_look(self, scp)


    def left(self):
        """left(SCPCOA self) -> Vector3"""
        return _six_sicd.SCPCOA_left(self)


    def slantPlaneNormal(self, scp):
        """slantPlaneNormal(SCPCOA self, Vector3 scp) -> Vector3"""
        return _six_sicd.SCPCOA_slantPlaneNormal(self, scp)

    __swig_destroy__ = _six_sicd.delete_SCPCOA
    __del__ = lambda self: None
SCPCOA_swigregister = _six_sicd.SCPCOA_swigregister
SCPCOA_swigregister(SCPCOA)

class ElectricalBoresight(_object):
    """Proxy of C++ six::sicd::ElectricalBoresight class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricalBoresight, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ElectricalBoresight self) -> ElectricalBoresight"""
        this = _six_sicd.new_ElectricalBoresight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(ElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ElectricalBoresight___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ElectricalBoresight___ne__(self, other)

    __swig_setmethods__["dcxPoly"] = _six_sicd.ElectricalBoresight_dcxPoly_set
    __swig_getmethods__["dcxPoly"] = _six_sicd.ElectricalBoresight_dcxPoly_get
    if _newclass:
        dcxPoly = _swig_property(_six_sicd.ElectricalBoresight_dcxPoly_get, _six_sicd.ElectricalBoresight_dcxPoly_set)
    __swig_setmethods__["dcyPoly"] = _six_sicd.ElectricalBoresight_dcyPoly_set
    __swig_getmethods__["dcyPoly"] = _six_sicd.ElectricalBoresight_dcyPoly_get
    if _newclass:
        dcyPoly = _swig_property(_six_sicd.ElectricalBoresight_dcyPoly_get, _six_sicd.ElectricalBoresight_dcyPoly_set)
    __swig_destroy__ = _six_sicd.delete_ElectricalBoresight
    __del__ = lambda self: None
ElectricalBoresight_swigregister = _six_sicd.ElectricalBoresight_swigregister
ElectricalBoresight_swigregister(ElectricalBoresight)

class HalfPowerBeamwidths(_object):
    """Proxy of C++ six::sicd::HalfPowerBeamwidths class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HalfPowerBeamwidths, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::HalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        this = _six_sicd.new_HalfPowerBeamwidths()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(HalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.HalfPowerBeamwidths___eq__(self, other)


    def __ne__(self, other):
        """__ne__(HalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.HalfPowerBeamwidths___ne__(self, other)

    __swig_setmethods__["dcx"] = _six_sicd.HalfPowerBeamwidths_dcx_set
    __swig_getmethods__["dcx"] = _six_sicd.HalfPowerBeamwidths_dcx_get
    if _newclass:
        dcx = _swig_property(_six_sicd.HalfPowerBeamwidths_dcx_get, _six_sicd.HalfPowerBeamwidths_dcx_set)
    __swig_setmethods__["dcy"] = _six_sicd.HalfPowerBeamwidths_dcy_set
    __swig_getmethods__["dcy"] = _six_sicd.HalfPowerBeamwidths_dcy_get
    if _newclass:
        dcy = _swig_property(_six_sicd.HalfPowerBeamwidths_dcy_get, _six_sicd.HalfPowerBeamwidths_dcy_set)
    __swig_destroy__ = _six_sicd.delete_HalfPowerBeamwidths
    __del__ = lambda self: None
HalfPowerBeamwidths_swigregister = _six_sicd.HalfPowerBeamwidths_swigregister
HalfPowerBeamwidths_swigregister(HalfPowerBeamwidths)

class GainAndPhasePolys(_object):
    """Proxy of C++ six::sicd::GainAndPhasePolys class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GainAndPhasePolys, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::GainAndPhasePolys self) -> GainAndPhasePolys"""
        this = _six_sicd.new_GainAndPhasePolys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(GainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.GainAndPhasePolys___eq__(self, other)


    def __ne__(self, other):
        """__ne__(GainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.GainAndPhasePolys___ne__(self, other)

    __swig_setmethods__["gainPoly"] = _six_sicd.GainAndPhasePolys_gainPoly_set
    __swig_getmethods__["gainPoly"] = _six_sicd.GainAndPhasePolys_gainPoly_get
    if _newclass:
        gainPoly = _swig_property(_six_sicd.GainAndPhasePolys_gainPoly_get, _six_sicd.GainAndPhasePolys_gainPoly_set)
    __swig_setmethods__["phasePoly"] = _six_sicd.GainAndPhasePolys_phasePoly_set
    __swig_getmethods__["phasePoly"] = _six_sicd.GainAndPhasePolys_phasePoly_get
    if _newclass:
        phasePoly = _swig_property(_six_sicd.GainAndPhasePolys_phasePoly_get, _six_sicd.GainAndPhasePolys_phasePoly_set)
    __swig_destroy__ = _six_sicd.delete_GainAndPhasePolys
    __del__ = lambda self: None
GainAndPhasePolys_swigregister = _six_sicd.GainAndPhasePolys_swigregister
GainAndPhasePolys_swigregister(GainAndPhasePolys)

class AntennaParameters(_object):
    """Proxy of C++ six::sicd::AntennaParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntennaParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::AntennaParameters self) -> AntennaParameters"""
        this = _six_sicd.new_AntennaParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(AntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.AntennaParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(AntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.AntennaParameters___ne__(self, other)

    __swig_setmethods__["xAxisPoly"] = _six_sicd.AntennaParameters_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _six_sicd.AntennaParameters_xAxisPoly_get
    if _newclass:
        xAxisPoly = _swig_property(_six_sicd.AntennaParameters_xAxisPoly_get, _six_sicd.AntennaParameters_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _six_sicd.AntennaParameters_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _six_sicd.AntennaParameters_yAxisPoly_get
    if _newclass:
        yAxisPoly = _swig_property(_six_sicd.AntennaParameters_yAxisPoly_get, _six_sicd.AntennaParameters_yAxisPoly_set)
    __swig_setmethods__["frequencyZero"] = _six_sicd.AntennaParameters_frequencyZero_set
    __swig_getmethods__["frequencyZero"] = _six_sicd.AntennaParameters_frequencyZero_get
    if _newclass:
        frequencyZero = _swig_property(_six_sicd.AntennaParameters_frequencyZero_get, _six_sicd.AntennaParameters_frequencyZero_set)
    __swig_setmethods__["electricalBoresight"] = _six_sicd.AntennaParameters_electricalBoresight_set
    __swig_getmethods__["electricalBoresight"] = _six_sicd.AntennaParameters_electricalBoresight_get
    if _newclass:
        electricalBoresight = _swig_property(_six_sicd.AntennaParameters_electricalBoresight_get, _six_sicd.AntennaParameters_electricalBoresight_set)
    __swig_setmethods__["halfPowerBeamwidths"] = _six_sicd.AntennaParameters_halfPowerBeamwidths_set
    __swig_getmethods__["halfPowerBeamwidths"] = _six_sicd.AntennaParameters_halfPowerBeamwidths_get
    if _newclass:
        halfPowerBeamwidths = _swig_property(_six_sicd.AntennaParameters_halfPowerBeamwidths_get, _six_sicd.AntennaParameters_halfPowerBeamwidths_set)
    __swig_setmethods__["array"] = _six_sicd.AntennaParameters_array_set
    __swig_getmethods__["array"] = _six_sicd.AntennaParameters_array_get
    if _newclass:
        array = _swig_property(_six_sicd.AntennaParameters_array_get, _six_sicd.AntennaParameters_array_set)
    __swig_setmethods__["element"] = _six_sicd.AntennaParameters_element_set
    __swig_getmethods__["element"] = _six_sicd.AntennaParameters_element_get
    if _newclass:
        element = _swig_property(_six_sicd.AntennaParameters_element_get, _six_sicd.AntennaParameters_element_set)
    __swig_setmethods__["gainBSPoly"] = _six_sicd.AntennaParameters_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _six_sicd.AntennaParameters_gainBSPoly_get
    if _newclass:
        gainBSPoly = _swig_property(_six_sicd.AntennaParameters_gainBSPoly_get, _six_sicd.AntennaParameters_gainBSPoly_set)
    __swig_setmethods__["electricalBoresightFrequencyShift"] = _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_set
    __swig_getmethods__["electricalBoresightFrequencyShift"] = _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_get
    if _newclass:
        electricalBoresightFrequencyShift = _swig_property(_six_sicd.AntennaParameters_electricalBoresightFrequencyShift_get, _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_set)
    __swig_setmethods__["mainlobeFrequencyDilation"] = _six_sicd.AntennaParameters_mainlobeFrequencyDilation_set
    __swig_getmethods__["mainlobeFrequencyDilation"] = _six_sicd.AntennaParameters_mainlobeFrequencyDilation_get
    if _newclass:
        mainlobeFrequencyDilation = _swig_property(_six_sicd.AntennaParameters_mainlobeFrequencyDilation_get, _six_sicd.AntennaParameters_mainlobeFrequencyDilation_set)
    __swig_destroy__ = _six_sicd.delete_AntennaParameters
    __del__ = lambda self: None
AntennaParameters_swigregister = _six_sicd.AntennaParameters_swigregister
AntennaParameters_swigregister(AntennaParameters)


def __lshift__(*args):
    """
    __lshift__(std::ostream & os, AreaDirectionParameters d) -> std::ostream
    __lshift__(std::ostream & os, ElectricalBoresight d) -> std::ostream
    __lshift__(std::ostream & os, HalfPowerBeamwidths d) -> std::ostream
    __lshift__(std::ostream & os, GainAndPhasePolys d) -> std::ostream
    __lshift__(std::ostream & os, AntennaParameters d) -> std::ostream &
    """
    return _six_sicd.__lshift__(*args)
class Antenna(_object):
    """Proxy of C++ six::sicd::Antenna class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Antenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Antenna, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx"] = _six_sicd.Antenna_tx_set
    __swig_getmethods__["tx"] = _six_sicd.Antenna_tx_get
    if _newclass:
        tx = _swig_property(_six_sicd.Antenna_tx_get, _six_sicd.Antenna_tx_set)
    __swig_setmethods__["rcv"] = _six_sicd.Antenna_rcv_set
    __swig_getmethods__["rcv"] = _six_sicd.Antenna_rcv_get
    if _newclass:
        rcv = _swig_property(_six_sicd.Antenna_rcv_get, _six_sicd.Antenna_rcv_set)
    __swig_setmethods__["twoWay"] = _six_sicd.Antenna_twoWay_set
    __swig_getmethods__["twoWay"] = _six_sicd.Antenna_twoWay_get
    if _newclass:
        twoWay = _swig_property(_six_sicd.Antenna_twoWay_get, _six_sicd.Antenna_twoWay_set)

    def __init__(self):
        """__init__(six::sicd::Antenna self) -> Antenna"""
        this = _six_sicd.new_Antenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, rhs):
        """__eq__(Antenna self, Antenna rhs) -> bool"""
        return _six_sicd.Antenna___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(Antenna self, Antenna rhs) -> bool"""
        return _six_sicd.Antenna___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_Antenna
    __del__ = lambda self: None
Antenna_swigregister = _six_sicd.Antenna_swigregister
Antenna_swigregister(Antenna)

class MatchCollect(_object):
    """Proxy of C++ six::sicd::MatchCollect class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchCollect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchCollect, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::MatchCollect self) -> MatchCollect"""
        this = _six_sicd.new_MatchCollect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["coreName"] = _six_sicd.MatchCollect_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.MatchCollect_coreName_get
    if _newclass:
        coreName = _swig_property(_six_sicd.MatchCollect_coreName_get, _six_sicd.MatchCollect_coreName_set)
    __swig_setmethods__["matchIndex"] = _six_sicd.MatchCollect_matchIndex_set
    __swig_getmethods__["matchIndex"] = _six_sicd.MatchCollect_matchIndex_get
    if _newclass:
        matchIndex = _swig_property(_six_sicd.MatchCollect_matchIndex_get, _six_sicd.MatchCollect_matchIndex_set)
    __swig_setmethods__["parameters"] = _six_sicd.MatchCollect_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.MatchCollect_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.MatchCollect_parameters_get, _six_sicd.MatchCollect_parameters_set)

    def __eq__(self, rhs):
        """__eq__(MatchCollect self, MatchCollect rhs) -> bool"""
        return _six_sicd.MatchCollect___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(MatchCollect self, MatchCollect rhs) -> bool"""
        return _six_sicd.MatchCollect___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_MatchCollect
    __del__ = lambda self: None
MatchCollect_swigregister = _six_sicd.MatchCollect_swigregister
MatchCollect_swigregister(MatchCollect)

class MatchType(_object):
    """Proxy of C++ six::sicd::MatchType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::MatchType self) -> MatchType"""
        this = _six_sicd.new_MatchType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["collectorName"] = _six_sicd.MatchType_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.MatchType_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.MatchType_collectorName_get, _six_sicd.MatchType_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.MatchType_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.MatchType_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.MatchType_illuminatorName_get, _six_sicd.MatchType_illuminatorName_set)
    __swig_setmethods__["matchType"] = _six_sicd.MatchType_matchType_set
    __swig_getmethods__["matchType"] = _six_sicd.MatchType_matchType_get
    if _newclass:
        matchType = _swig_property(_six_sicd.MatchType_matchType_get, _six_sicd.MatchType_matchType_set)
    __swig_setmethods__["typeID"] = _six_sicd.MatchType_typeID_set
    __swig_getmethods__["typeID"] = _six_sicd.MatchType_typeID_get
    if _newclass:
        typeID = _swig_property(_six_sicd.MatchType_typeID_get, _six_sicd.MatchType_typeID_set)
    __swig_setmethods__["currentIndex"] = _six_sicd.MatchType_currentIndex_set
    __swig_getmethods__["currentIndex"] = _six_sicd.MatchType_currentIndex_get
    if _newclass:
        currentIndex = _swig_property(_six_sicd.MatchType_currentIndex_get, _six_sicd.MatchType_currentIndex_set)
    __swig_setmethods__["matchCollects"] = _six_sicd.MatchType_matchCollects_set
    __swig_getmethods__["matchCollects"] = _six_sicd.MatchType_matchCollects_get
    if _newclass:
        matchCollects = _swig_property(_six_sicd.MatchType_matchCollects_get, _six_sicd.MatchType_matchCollects_set)

    def __eq__(self, rhs):
        """__eq__(MatchType self, MatchType rhs) -> bool"""
        return _six_sicd.MatchType___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(MatchType self, MatchType rhs) -> bool"""
        return _six_sicd.MatchType___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_MatchType
    __del__ = lambda self: None
MatchType_swigregister = _six_sicd.MatchType_swigregister
MatchType_swigregister(MatchType)

class MatchInformation(_object):
    """Proxy of C++ six::sicd::MatchInformation class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchInformation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::MatchInformation self) -> MatchInformation"""
        this = _six_sicd.new_MatchInformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["types"] = _six_sicd.MatchInformation_types_set
    __swig_getmethods__["types"] = _six_sicd.MatchInformation_types_get
    if _newclass:
        types = _swig_property(_six_sicd.MatchInformation_types_get, _six_sicd.MatchInformation_types_set)

    def __eq__(self, rhs):
        """__eq__(MatchInformation self, MatchInformation rhs) -> bool"""
        return _six_sicd.MatchInformation___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(MatchInformation self, MatchInformation rhs) -> bool"""
        return _six_sicd.MatchInformation___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_MatchInformation
    __del__ = lambda self: None
MatchInformation_swigregister = _six_sicd.MatchInformation_swigregister
MatchInformation_swigregister(MatchInformation)

class SlowTimeDeskew(_object):
    """Proxy of C++ six::sicd::SlowTimeDeskew class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlowTimeDeskew, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlowTimeDeskew, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::SlowTimeDeskew self) -> SlowTimeDeskew"""
        this = _six_sicd.new_SlowTimeDeskew()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["applied"] = _six_sicd.SlowTimeDeskew_applied_set
    __swig_getmethods__["applied"] = _six_sicd.SlowTimeDeskew_applied_get
    if _newclass:
        applied = _swig_property(_six_sicd.SlowTimeDeskew_applied_get, _six_sicd.SlowTimeDeskew_applied_set)
    __swig_setmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_set
    __swig_getmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_get
    if _newclass:
        slowTimeDeskewPhasePoly = _swig_property(_six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_get, _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_set)

    def __eq__(self, rhs):
        """__eq__(SlowTimeDeskew self, SlowTimeDeskew rhs) -> bool"""
        return _six_sicd.SlowTimeDeskew___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(SlowTimeDeskew self, SlowTimeDeskew rhs) -> bool"""
        return _six_sicd.SlowTimeDeskew___ne__(self, rhs)

    __swig_destroy__ = _six_sicd.delete_SlowTimeDeskew
    __del__ = lambda self: None
SlowTimeDeskew_swigregister = _six_sicd.SlowTimeDeskew_swigregister
SlowTimeDeskew_swigregister(SlowTimeDeskew)

class PFA(_object):
    """Proxy of C++ six::sicd::PFA class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PFA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::PFA self) -> PFA"""
        this = _six_sicd.new_PFA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["focusPlaneNormal"] = _six_sicd.PFA_focusPlaneNormal_set
    __swig_getmethods__["focusPlaneNormal"] = _six_sicd.PFA_focusPlaneNormal_get
    if _newclass:
        focusPlaneNormal = _swig_property(_six_sicd.PFA_focusPlaneNormal_get, _six_sicd.PFA_focusPlaneNormal_set)
    __swig_setmethods__["imagePlaneNormal"] = _six_sicd.PFA_imagePlaneNormal_set
    __swig_getmethods__["imagePlaneNormal"] = _six_sicd.PFA_imagePlaneNormal_get
    if _newclass:
        imagePlaneNormal = _swig_property(_six_sicd.PFA_imagePlaneNormal_get, _six_sicd.PFA_imagePlaneNormal_set)
    __swig_setmethods__["polarAngleRefTime"] = _six_sicd.PFA_polarAngleRefTime_set
    __swig_getmethods__["polarAngleRefTime"] = _six_sicd.PFA_polarAngleRefTime_get
    if _newclass:
        polarAngleRefTime = _swig_property(_six_sicd.PFA_polarAngleRefTime_get, _six_sicd.PFA_polarAngleRefTime_set)
    __swig_setmethods__["polarAnglePoly"] = _six_sicd.PFA_polarAnglePoly_set
    __swig_getmethods__["polarAnglePoly"] = _six_sicd.PFA_polarAnglePoly_get
    if _newclass:
        polarAnglePoly = _swig_property(_six_sicd.PFA_polarAnglePoly_get, _six_sicd.PFA_polarAnglePoly_set)
    __swig_setmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.PFA_spatialFrequencyScaleFactorPoly_set
    __swig_getmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.PFA_spatialFrequencyScaleFactorPoly_get
    if _newclass:
        spatialFrequencyScaleFactorPoly = _swig_property(_six_sicd.PFA_spatialFrequencyScaleFactorPoly_get, _six_sicd.PFA_spatialFrequencyScaleFactorPoly_set)
    __swig_setmethods__["krg1"] = _six_sicd.PFA_krg1_set
    __swig_getmethods__["krg1"] = _six_sicd.PFA_krg1_get
    if _newclass:
        krg1 = _swig_property(_six_sicd.PFA_krg1_get, _six_sicd.PFA_krg1_set)
    __swig_setmethods__["krg2"] = _six_sicd.PFA_krg2_set
    __swig_getmethods__["krg2"] = _six_sicd.PFA_krg2_get
    if _newclass:
        krg2 = _swig_property(_six_sicd.PFA_krg2_get, _six_sicd.PFA_krg2_set)
    __swig_setmethods__["kaz1"] = _six_sicd.PFA_kaz1_set
    __swig_getmethods__["kaz1"] = _six_sicd.PFA_kaz1_get
    if _newclass:
        kaz1 = _swig_property(_six_sicd.PFA_kaz1_get, _six_sicd.PFA_kaz1_set)
    __swig_setmethods__["kaz2"] = _six_sicd.PFA_kaz2_set
    __swig_getmethods__["kaz2"] = _six_sicd.PFA_kaz2_get
    if _newclass:
        kaz2 = _swig_property(_six_sicd.PFA_kaz2_get, _six_sicd.PFA_kaz2_set)
    __swig_setmethods__["slowTimeDeskew"] = _six_sicd.PFA_slowTimeDeskew_set
    __swig_getmethods__["slowTimeDeskew"] = _six_sicd.PFA_slowTimeDeskew_get
    if _newclass:
        slowTimeDeskew = _swig_property(_six_sicd.PFA_slowTimeDeskew_get, _six_sicd.PFA_slowTimeDeskew_set)

    def __eq__(self, rhs):
        """__eq__(PFA self, PFA rhs) -> bool"""
        return _six_sicd.PFA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(PFA self, PFA rhs) -> bool"""
        return _six_sicd.PFA___ne__(self, rhs)


    def fillDerivedFields(self, position):
        """fillDerivedFields(PFA self, Position position)"""
        return _six_sicd.PFA_fillDerivedFields(self, position)


    def fillDefaultFields(self, geoData, arg3, scpcoa):
        """fillDefaultFields(PFA self, GeoData geoData, Grid arg3, SCPCOA scpcoa)"""
        return _six_sicd.PFA_fillDefaultFields(self, geoData, arg3, scpcoa)


    def validate(self, scpcoa, log):
        """validate(PFA self, SCPCOA scpcoa, logging::Logger & log) -> bool"""
        return _six_sicd.PFA_validate(self, scpcoa, log)

    __swig_destroy__ = _six_sicd.delete_PFA
    __del__ = lambda self: None
PFA_swigregister = _six_sicd.PFA_swigregister
PFA_swigregister(PFA)

class RMAT(_object):
    """Proxy of C++ six::sicd::RMAT class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMAT, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RMAT self) -> RMAT"""
        this = _six_sicd.new_RMAT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["refTime"] = _six_sicd.RMAT_refTime_set
    __swig_getmethods__["refTime"] = _six_sicd.RMAT_refTime_get
    if _newclass:
        refTime = _swig_property(_six_sicd.RMAT_refTime_get, _six_sicd.RMAT_refTime_set)
    __swig_setmethods__["refPos"] = _six_sicd.RMAT_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.RMAT_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.RMAT_refPos_get, _six_sicd.RMAT_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.RMAT_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.RMAT_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.RMAT_refVel_get, _six_sicd.RMAT_refVel_set)
    __swig_setmethods__["distRefLinePoly"] = _six_sicd.RMAT_distRefLinePoly_set
    __swig_getmethods__["distRefLinePoly"] = _six_sicd.RMAT_distRefLinePoly_get
    if _newclass:
        distRefLinePoly = _swig_property(_six_sicd.RMAT_distRefLinePoly_get, _six_sicd.RMAT_distRefLinePoly_set)
    __swig_setmethods__["cosDCACOAPoly"] = _six_sicd.RMAT_cosDCACOAPoly_set
    __swig_getmethods__["cosDCACOAPoly"] = _six_sicd.RMAT_cosDCACOAPoly_get
    if _newclass:
        cosDCACOAPoly = _swig_property(_six_sicd.RMAT_cosDCACOAPoly_get, _six_sicd.RMAT_cosDCACOAPoly_set)
    __swig_setmethods__["kx1"] = _six_sicd.RMAT_kx1_set
    __swig_getmethods__["kx1"] = _six_sicd.RMAT_kx1_get
    if _newclass:
        kx1 = _swig_property(_six_sicd.RMAT_kx1_get, _six_sicd.RMAT_kx1_set)
    __swig_setmethods__["kx2"] = _six_sicd.RMAT_kx2_set
    __swig_getmethods__["kx2"] = _six_sicd.RMAT_kx2_get
    if _newclass:
        kx2 = _swig_property(_six_sicd.RMAT_kx2_get, _six_sicd.RMAT_kx2_set)
    __swig_setmethods__["ky1"] = _six_sicd.RMAT_ky1_set
    __swig_getmethods__["ky1"] = _six_sicd.RMAT_ky1_get
    if _newclass:
        ky1 = _swig_property(_six_sicd.RMAT_ky1_get, _six_sicd.RMAT_ky1_set)
    __swig_setmethods__["ky2"] = _six_sicd.RMAT_ky2_set
    __swig_getmethods__["ky2"] = _six_sicd.RMAT_ky2_get
    if _newclass:
        ky2 = _swig_property(_six_sicd.RMAT_ky2_get, _six_sicd.RMAT_ky2_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.RMAT_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.RMAT_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.RMAT_dopConeAngleRef_get, _six_sicd.RMAT_dopConeAngleRef_set)

    def __eq__(self, rhs):
        """__eq__(RMAT self, RMAT rhs) -> bool"""
        return _six_sicd.RMAT___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RMAT self, RMAT rhs) -> bool"""
        return _six_sicd.RMAT___ne__(self, rhs)


    def fillDerivedFields(self, scp):
        """fillDerivedFields(RMAT self, Vector3 scp)"""
        return _six_sicd.RMAT_fillDerivedFields(self, scp)


    def fillDefaultFields(self, scpcoa):
        """fillDefaultFields(RMAT self, SCPCOA scpcoa)"""
        return _six_sicd.RMAT_fillDefaultFields(self, scpcoa)


    def validate(self, scp, log):
        """validate(RMAT self, Vector3 scp, logging::Logger & log) -> bool"""
        return _six_sicd.RMAT_validate(self, scp, log)


    def look(self, scp):
        """look(RMAT self, Vector3 scp) -> int"""
        return _six_sicd.RMAT_look(self, scp)


    def uYAT(self, scp):
        """uYAT(RMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMAT_uYAT(self, scp)


    def spn(self, scp):
        """spn(RMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMAT_spn(self, scp)


    def uXCT(self, scp):
        """uXCT(RMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMAT_uXCT(self, scp)


    def uLOS(self, scp):
        """uLOS(RMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMAT_uLOS(self, scp)

    __swig_destroy__ = _six_sicd.delete_RMAT
    __del__ = lambda self: None
RMAT_swigregister = _six_sicd.RMAT_swigregister
RMAT_swigregister(RMAT)

class RMCR(_object):
    """Proxy of C++ six::sicd::RMCR class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMCR, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RMCR self) -> RMCR"""
        this = _six_sicd.new_RMCR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["refPos"] = _six_sicd.RMCR_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.RMCR_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.RMCR_refPos_get, _six_sicd.RMCR_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.RMCR_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.RMCR_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.RMCR_refVel_get, _six_sicd.RMCR_refVel_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.RMCR_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.RMCR_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.RMCR_dopConeAngleRef_get, _six_sicd.RMCR_dopConeAngleRef_set)

    def __eq__(self, rhs):
        """__eq__(RMCR self, RMCR rhs) -> bool"""
        return _six_sicd.RMCR___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RMCR self, RMCR rhs) -> bool"""
        return _six_sicd.RMCR___ne__(self, rhs)


    def fillDerivedFields(self, scp):
        """fillDerivedFields(RMCR self, Vector3 scp)"""
        return _six_sicd.RMCR_fillDerivedFields(self, scp)


    def fillDefaultFields(self, scpcoa):
        """fillDefaultFields(RMCR self, SCPCOA scpcoa)"""
        return _six_sicd.RMCR_fillDefaultFields(self, scpcoa)


    def validate(self, scp, log):
        """validate(RMCR self, Vector3 scp, logging::Logger & log) -> bool"""
        return _six_sicd.RMCR_validate(self, scp, log)


    def uXRG(self, scp):
        """uXRG(RMCR self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMCR_uXRG(self, scp)


    def uYCR(self, scp):
        """uYCR(RMCR self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMCR_uYCR(self, scp)


    def spn(self, scp):
        """spn(RMCR self, Vector3 scp) -> Vector3"""
        return _six_sicd.RMCR_spn(self, scp)


    def look(self, scp):
        """look(RMCR self, Vector3 scp) -> int"""
        return _six_sicd.RMCR_look(self, scp)

    __swig_destroy__ = _six_sicd.delete_RMCR
    __del__ = lambda self: None
RMCR_swigregister = _six_sicd.RMCR_swigregister
RMCR_swigregister(RMCR)

class INCA(_object):
    """Proxy of C++ six::sicd::INCA class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INCA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::INCA self) -> INCA"""
        this = _six_sicd.new_INCA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["timeCAPoly"] = _six_sicd.INCA_timeCAPoly_set
    __swig_getmethods__["timeCAPoly"] = _six_sicd.INCA_timeCAPoly_get
    if _newclass:
        timeCAPoly = _swig_property(_six_sicd.INCA_timeCAPoly_get, _six_sicd.INCA_timeCAPoly_set)
    __swig_setmethods__["rangeCA"] = _six_sicd.INCA_rangeCA_set
    __swig_getmethods__["rangeCA"] = _six_sicd.INCA_rangeCA_get
    if _newclass:
        rangeCA = _swig_property(_six_sicd.INCA_rangeCA_get, _six_sicd.INCA_rangeCA_set)
    __swig_setmethods__["freqZero"] = _six_sicd.INCA_freqZero_set
    __swig_getmethods__["freqZero"] = _six_sicd.INCA_freqZero_get
    if _newclass:
        freqZero = _swig_property(_six_sicd.INCA_freqZero_get, _six_sicd.INCA_freqZero_set)
    __swig_setmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.INCA_dopplerRateScaleFactorPoly_set
    __swig_getmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.INCA_dopplerRateScaleFactorPoly_get
    if _newclass:
        dopplerRateScaleFactorPoly = _swig_property(_six_sicd.INCA_dopplerRateScaleFactorPoly_get, _six_sicd.INCA_dopplerRateScaleFactorPoly_set)
    __swig_setmethods__["dopplerCentroidPoly"] = _six_sicd.INCA_dopplerCentroidPoly_set
    __swig_getmethods__["dopplerCentroidPoly"] = _six_sicd.INCA_dopplerCentroidPoly_get
    if _newclass:
        dopplerCentroidPoly = _swig_property(_six_sicd.INCA_dopplerCentroidPoly_get, _six_sicd.INCA_dopplerCentroidPoly_set)
    __swig_setmethods__["dopplerCentroidCOA"] = _six_sicd.INCA_dopplerCentroidCOA_set
    __swig_getmethods__["dopplerCentroidCOA"] = _six_sicd.INCA_dopplerCentroidCOA_get
    if _newclass:
        dopplerCentroidCOA = _swig_property(_six_sicd.INCA_dopplerCentroidCOA_get, _six_sicd.INCA_dopplerCentroidCOA_set)

    def __eq__(self, rhs):
        """__eq__(INCA self, INCA rhs) -> bool"""
        return _six_sicd.INCA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(INCA self, INCA rhs) -> bool"""
        return _six_sicd.INCA___ne__(self, rhs)


    def fillDerivedFields(self, scp, position):
        """fillDerivedFields(INCA self, Vector3 scp, Position position)"""
        return _six_sicd.INCA_fillDerivedFields(self, scp, position)


    def caPos(self, arpPoly):
        """caPos(INCA self, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.INCA_caPos(self, arpPoly)


    def caVel(self, arpPoly):
        """caVel(INCA self, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.INCA_caVel(self, arpPoly)


    def uRG(self, scp, arpPoly):
        """uRG(INCA self, Vector3 scp, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.INCA_uRG(self, scp, arpPoly)


    def uAZ(self, scp, arpPoly):
        """uAZ(INCA self, Vector3 scp, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.INCA_uAZ(self, scp, arpPoly)


    def spn(self, scp, arpPoly):
        """spn(INCA self, Vector3 scp, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.INCA_spn(self, scp, arpPoly)


    def look(self, scp, arpPoly):
        """look(INCA self, Vector3 scp, PolyVector3 arpPoly) -> int"""
        return _six_sicd.INCA_look(self, scp, arpPoly)


    def left(self, arpPoly):
        """left(INCA self, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.INCA_left(self, arpPoly)


    def fillDefaultFields(self, fc):
        """fillDefaultFields(INCA self, double fc)"""
        return _six_sicd.INCA_fillDefaultFields(self, fc)


    def validate(self, collectionInformation, scp, arpPoly, fc, log):
        """validate(INCA self, CollectionInformation collectionInformation, Vector3 scp, PolyVector3 arpPoly, double fc, logging::Logger & log) -> bool"""
        return _six_sicd.INCA_validate(self, collectionInformation, scp, arpPoly, fc, log)

    __swig_destroy__ = _six_sicd.delete_INCA
    __del__ = lambda self: None
INCA_swigregister = _six_sicd.INCA_swigregister
INCA_swigregister(INCA)

class RMA(_object):
    """Proxy of C++ six::sicd::RMA class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RMA self) -> RMA"""
        this = _six_sicd.new_RMA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["algoType"] = _six_sicd.RMA_algoType_set
    __swig_getmethods__["algoType"] = _six_sicd.RMA_algoType_get
    if _newclass:
        algoType = _swig_property(_six_sicd.RMA_algoType_get, _six_sicd.RMA_algoType_set)
    __swig_setmethods__["rmat"] = _six_sicd.RMA_rmat_set
    __swig_getmethods__["rmat"] = _six_sicd.RMA_rmat_get
    if _newclass:
        rmat = _swig_property(_six_sicd.RMA_rmat_get, _six_sicd.RMA_rmat_set)
    __swig_setmethods__["rmcr"] = _six_sicd.RMA_rmcr_set
    __swig_getmethods__["rmcr"] = _six_sicd.RMA_rmcr_get
    if _newclass:
        rmcr = _swig_property(_six_sicd.RMA_rmcr_get, _six_sicd.RMA_rmcr_set)
    __swig_setmethods__["inca"] = _six_sicd.RMA_inca_set
    __swig_getmethods__["inca"] = _six_sicd.RMA_inca_get
    if _newclass:
        inca = _swig_property(_six_sicd.RMA_inca_get, _six_sicd.RMA_inca_set)

    def __eq__(self, rhs):
        """__eq__(RMA self, RMA rhs) -> bool"""
        return _six_sicd.RMA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RMA self, RMA rhs) -> bool"""
        return _six_sicd.RMA___ne__(self, rhs)


    def fillDerivedFields(self, geoData, position):
        """fillDerivedFields(RMA self, GeoData geoData, Position position)"""
        return _six_sicd.RMA_fillDerivedFields(self, geoData, position)


    def fillDefaultFields(self, scpcoa, fc):
        """fillDefaultFields(RMA self, SCPCOA scpcoa, double fc)"""
        return _six_sicd.RMA_fillDefaultFields(self, scpcoa, fc)


    def validate(self, collectionInformation, scp, arpPoly, fc, log):
        """validate(RMA self, CollectionInformation collectionInformation, Vector3 scp, PolyVector3 arpPoly, double fc, logging::Logger & log) -> bool"""
        return _six_sicd.RMA_validate(self, collectionInformation, scp, arpPoly, fc, log)

    __swig_destroy__ = _six_sicd.delete_RMA
    __del__ = lambda self: None
RMA_swigregister = _six_sicd.RMA_swigregister
RMA_swigregister(RMA)

class RgAzComp(_object):
    """Proxy of C++ six::sicd::RgAzComp class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RgAzComp, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RgAzComp self) -> RgAzComp"""
        this = _six_sicd.new_RgAzComp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["azSF"] = _six_sicd.RgAzComp_azSF_set
    __swig_getmethods__["azSF"] = _six_sicd.RgAzComp_azSF_get
    if _newclass:
        azSF = _swig_property(_six_sicd.RgAzComp_azSF_get, _six_sicd.RgAzComp_azSF_set)
    __swig_setmethods__["kazPoly"] = _six_sicd.RgAzComp_kazPoly_set
    __swig_getmethods__["kazPoly"] = _six_sicd.RgAzComp_kazPoly_get
    if _newclass:
        kazPoly = _swig_property(_six_sicd.RgAzComp_kazPoly_get, _six_sicd.RgAzComp_kazPoly_set)

    def __eq__(self, rhs):
        """__eq__(RgAzComp self, RgAzComp rhs) -> bool"""
        return _six_sicd.RgAzComp___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(RgAzComp self, RgAzComp rhs) -> bool"""
        return _six_sicd.RgAzComp___ne__(self, rhs)


    def fillDerivedFields(self, geoData, grid, scpcoa, timeline):
        """fillDerivedFields(RgAzComp self, GeoData geoData, Grid grid, SCPCOA scpcoa, Timeline timeline)"""
        return _six_sicd.RgAzComp_fillDerivedFields(self, geoData, grid, scpcoa, timeline)


    def validate(self, geoData, grid, scpcoa, timeline, log):
        """validate(RgAzComp self, GeoData geoData, Grid grid, SCPCOA scpcoa, Timeline timeline, logging::Logger & log) -> bool"""
        return _six_sicd.RgAzComp_validate(self, geoData, grid, scpcoa, timeline, log)

    __swig_destroy__ = _six_sicd.delete_RgAzComp
    __del__ = lambda self: None
RgAzComp_swigregister = _six_sicd.RgAzComp_swigregister
RgAzComp_swigregister(RgAzComp)

class ComplexData(pysix.six_base.Data):
    """Proxy of C++ six::sicd::ComplexData class."""

    __swig_setmethods__ = {}
    for _s in [pysix.six_base.Data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexData, name, value)
    __swig_getmethods__ = {}
    for _s in [pysix.six_base.Data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectionInformation"] = _six_sicd.ComplexData_collectionInformation_set
    __swig_getmethods__["collectionInformation"] = _six_sicd.ComplexData_collectionInformation_get
    if _newclass:
        collectionInformation = _swig_property(_six_sicd.ComplexData_collectionInformation_get, _six_sicd.ComplexData_collectionInformation_set)
    __swig_setmethods__["imageCreation"] = _six_sicd.ComplexData_imageCreation_set
    __swig_getmethods__["imageCreation"] = _six_sicd.ComplexData_imageCreation_get
    if _newclass:
        imageCreation = _swig_property(_six_sicd.ComplexData_imageCreation_get, _six_sicd.ComplexData_imageCreation_set)
    __swig_setmethods__["imageData"] = _six_sicd.ComplexData_imageData_set
    __swig_getmethods__["imageData"] = _six_sicd.ComplexData_imageData_get
    if _newclass:
        imageData = _swig_property(_six_sicd.ComplexData_imageData_get, _six_sicd.ComplexData_imageData_set)
    __swig_setmethods__["geoData"] = _six_sicd.ComplexData_geoData_set
    __swig_getmethods__["geoData"] = _six_sicd.ComplexData_geoData_get
    if _newclass:
        geoData = _swig_property(_six_sicd.ComplexData_geoData_get, _six_sicd.ComplexData_geoData_set)
    __swig_setmethods__["grid"] = _six_sicd.ComplexData_grid_set
    __swig_getmethods__["grid"] = _six_sicd.ComplexData_grid_get
    if _newclass:
        grid = _swig_property(_six_sicd.ComplexData_grid_get, _six_sicd.ComplexData_grid_set)
    __swig_setmethods__["timeline"] = _six_sicd.ComplexData_timeline_set
    __swig_getmethods__["timeline"] = _six_sicd.ComplexData_timeline_get
    if _newclass:
        timeline = _swig_property(_six_sicd.ComplexData_timeline_get, _six_sicd.ComplexData_timeline_set)
    __swig_setmethods__["position"] = _six_sicd.ComplexData_position_set
    __swig_getmethods__["position"] = _six_sicd.ComplexData_position_get
    if _newclass:
        position = _swig_property(_six_sicd.ComplexData_position_get, _six_sicd.ComplexData_position_set)
    __swig_setmethods__["radarCollection"] = _six_sicd.ComplexData_radarCollection_set
    __swig_getmethods__["radarCollection"] = _six_sicd.ComplexData_radarCollection_get
    if _newclass:
        radarCollection = _swig_property(_six_sicd.ComplexData_radarCollection_get, _six_sicd.ComplexData_radarCollection_set)
    __swig_setmethods__["imageFormation"] = _six_sicd.ComplexData_imageFormation_set
    __swig_getmethods__["imageFormation"] = _six_sicd.ComplexData_imageFormation_get
    if _newclass:
        imageFormation = _swig_property(_six_sicd.ComplexData_imageFormation_get, _six_sicd.ComplexData_imageFormation_set)
    __swig_setmethods__["scpcoa"] = _six_sicd.ComplexData_scpcoa_set
    __swig_getmethods__["scpcoa"] = _six_sicd.ComplexData_scpcoa_get
    if _newclass:
        scpcoa = _swig_property(_six_sicd.ComplexData_scpcoa_get, _six_sicd.ComplexData_scpcoa_set)
    __swig_setmethods__["radiometric"] = _six_sicd.ComplexData_radiometric_set
    __swig_getmethods__["radiometric"] = _six_sicd.ComplexData_radiometric_get
    if _newclass:
        radiometric = _swig_property(_six_sicd.ComplexData_radiometric_get, _six_sicd.ComplexData_radiometric_set)
    __swig_setmethods__["antenna"] = _six_sicd.ComplexData_antenna_set
    __swig_getmethods__["antenna"] = _six_sicd.ComplexData_antenna_get
    if _newclass:
        antenna = _swig_property(_six_sicd.ComplexData_antenna_get, _six_sicd.ComplexData_antenna_set)
    __swig_setmethods__["errorStatistics"] = _six_sicd.ComplexData_errorStatistics_set
    __swig_getmethods__["errorStatistics"] = _six_sicd.ComplexData_errorStatistics_get
    if _newclass:
        errorStatistics = _swig_property(_six_sicd.ComplexData_errorStatistics_get, _six_sicd.ComplexData_errorStatistics_set)
    __swig_setmethods__["matchInformation"] = _six_sicd.ComplexData_matchInformation_set
    __swig_getmethods__["matchInformation"] = _six_sicd.ComplexData_matchInformation_get
    if _newclass:
        matchInformation = _swig_property(_six_sicd.ComplexData_matchInformation_get, _six_sicd.ComplexData_matchInformation_set)
    __swig_setmethods__["pfa"] = _six_sicd.ComplexData_pfa_set
    __swig_getmethods__["pfa"] = _six_sicd.ComplexData_pfa_get
    if _newclass:
        pfa = _swig_property(_six_sicd.ComplexData_pfa_get, _six_sicd.ComplexData_pfa_set)
    __swig_setmethods__["rma"] = _six_sicd.ComplexData_rma_set
    __swig_getmethods__["rma"] = _six_sicd.ComplexData_rma_get
    if _newclass:
        rma = _swig_property(_six_sicd.ComplexData_rma_get, _six_sicd.ComplexData_rma_set)
    __swig_setmethods__["rgAzComp"] = _six_sicd.ComplexData_rgAzComp_set
    __swig_getmethods__["rgAzComp"] = _six_sicd.ComplexData_rgAzComp_get
    if _newclass:
        rgAzComp = _swig_property(_six_sicd.ComplexData_rgAzComp_get, _six_sicd.ComplexData_rgAzComp_set)

    def __init__(self):
        """__init__(six::sicd::ComplexData self) -> ComplexData"""
        this = _six_sicd.new_ComplexData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexData
    __del__ = lambda self: None

    def getDataType(self):
        """getDataType(ComplexData self) -> DataType"""
        return _six_sicd.ComplexData_getDataType(self)


    def clone(self):
        """clone(ComplexData self) -> Data"""
        return _six_sicd.ComplexData_clone(self)


    def getPixelType(self):
        """getPixelType(ComplexData self) -> PixelType"""
        return _six_sicd.ComplexData_getPixelType(self)


    def setPixelType(self, pixelType):
        """setPixelType(ComplexData self, PixelType pixelType)"""
        return _six_sicd.ComplexData_setPixelType(self, pixelType)


    def getNumRows(self):
        """getNumRows(ComplexData self) -> size_t"""
        return _six_sicd.ComplexData_getNumRows(self)


    def setNumRows(self, numRows):
        """setNumRows(ComplexData self, size_t numRows)"""
        return _six_sicd.ComplexData_setNumRows(self, numRows)


    def getNumCols(self):
        """getNumCols(ComplexData self) -> size_t"""
        return _six_sicd.ComplexData_getNumCols(self)


    def setNumCols(self, numCols):
        """setNumCols(ComplexData self, size_t numCols)"""
        return _six_sicd.ComplexData_setNumCols(self, numCols)


    def getImageCorners(self):
        """getImageCorners(ComplexData self) -> LatLonCorners"""
        return _six_sicd.ComplexData_getImageCorners(self)


    def setImageCorners(self, imageCorners):
        """setImageCorners(ComplexData self, LatLonCorners imageCorners)"""
        return _six_sicd.ComplexData_setImageCorners(self, imageCorners)


    def getName(self):
        """getName(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getName(self)


    def setName(self, name):
        """setName(ComplexData self, std::string name)"""
        return _six_sicd.ComplexData_setName(self, name)


    def getSource(self):
        """getSource(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getSource(self)


    def setSource(self, name):
        """setSource(ComplexData self, std::string name)"""
        return _six_sicd.ComplexData_setSource(self, name)


    def getCreationTime(self):
        """getCreationTime(ComplexData self) -> DateTime"""
        return _six_sicd.ComplexData_getCreationTime(self)


    def setCreationTime(self, creationTime):
        """setCreationTime(ComplexData self, DateTime creationTime)"""
        return _six_sicd.ComplexData_setCreationTime(self, creationTime)


    def getCollectionStartDateTime(self):
        """getCollectionStartDateTime(ComplexData self) -> DateTime"""
        return _six_sicd.ComplexData_getCollectionStartDateTime(self)


    def getClassification(self, *args):
        """
        getClassification(ComplexData self) -> Classification
        getClassification(ComplexData self) -> Classification
        """
        return _six_sicd.ComplexData_getClassification(self, *args)


    def getDisplayLUT(self):
        """getDisplayLUT(ComplexData self) -> six::LUT *"""
        return _six_sicd.ComplexData_getDisplayLUT(self)


    def getVendorID(self):
        """getVendorID(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getVendorID(self)


    def getVersion(self):
        """getVersion(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getVersion(self)


    def setVersion(self, version):
        """setVersion(ComplexData self, std::string const & version)"""
        return _six_sicd.ComplexData_setVersion(self, version)


    def getOutputPlaneOffsetAndExtent(self, *args):
        """
        getOutputPlaneOffsetAndExtent(ComplexData self, RowColSizeT offset, RowColSizeT extent)
        getOutputPlaneOffsetAndExtent(ComplexData self, AreaPlane areaPlane, RowColSizeT offset, RowColSizeT extent)
        """
        return _six_sicd.ComplexData_getOutputPlaneOffsetAndExtent(self, *args)


    def pixelToImagePoint(self, pixelLoc):
        """pixelToImagePoint(ComplexData self, RowColDouble pixelLoc) -> RowColDouble"""
        return _six_sicd.ComplexData_pixelToImagePoint(self, pixelLoc)


    def getImageMode(self):
        """getImageMode(ComplexData self) -> six::ImageMode"""
        return _six_sicd.ComplexData_getImageMode(self)


    def __eq__(self, rhs):
        """__eq__(ComplexData self, ComplexData rhs) -> bool"""
        return _six_sicd.ComplexData___eq__(self, rhs)


    def validate(self, log):
        """validate(ComplexData self, logging::Logger & log) -> bool"""
        return _six_sicd.ComplexData_validate(self, log)


    def fillDerivedFields(self, includeDefault=True):
        """
        fillDerivedFields(ComplexData self, bool includeDefault=True)
        fillDerivedFields(ComplexData self)
        """
        return _six_sicd.ComplexData_fillDerivedFields(self, includeDefault)


    def fillDefaultFields(self):
        """fillDefaultFields(ComplexData self)"""
        return _six_sicd.ComplexData_fillDefaultFields(self)

ComplexData_swigregister = _six_sicd.ComplexData_swigregister
ComplexData_swigregister(ComplexData)

class ComplexXMLControl(pysix.six_base.XMLControl):
    """Proxy of C++ six::sicd::ComplexXMLControl class."""

    __swig_setmethods__ = {}
    for _s in [pysix.six_base.XMLControl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexXMLControl, name, value)
    __swig_getmethods__ = {}
    for _s in [pysix.six_base.XMLControl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexXMLControl, name)
    __repr__ = _swig_repr

    def __init__(self, log=None, ownLog=False):
        """
        __init__(six::sicd::ComplexXMLControl self, logging::Logger * log=None, bool ownLog=False) -> ComplexXMLControl
        __init__(six::sicd::ComplexXMLControl self, logging::Logger * log=None) -> ComplexXMLControl
        __init__(six::sicd::ComplexXMLControl self) -> ComplexXMLControl
        """
        this = _six_sicd.new_ComplexXMLControl(log, ownLog)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexXMLControl
    __del__ = lambda self: None
ComplexXMLControl_swigregister = _six_sicd.ComplexXMLControl_swigregister
ComplexXMLControl_swigregister(ComplexXMLControl)

class SixSicdUtilities(_object):
    """Proxy of C++ six::sicd::Utilities class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SixSicdUtilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SixSicdUtilities, name)
    __repr__ = _swig_repr

    def getSceneGeometry(data):
        """getSceneGeometry(ComplexData data) -> SceneGeometry"""
        return _six_sicd.SixSicdUtilities_getSceneGeometry(data)

    getSceneGeometry = staticmethod(getSceneGeometry)

    def getProjectionModel(data, geom):
        """getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"""
        return _six_sicd.SixSicdUtilities_getProjectionModel(data, geom)

    getProjectionModel = staticmethod(getProjectionModel)

    def getModelComponents(complexData, geometry, projectionModel, areaPlane):
        """getModelComponents(ComplexData complexData, std::auto_ptr< scene::SceneGeometry > & geometry, std::auto_ptr< scene::ProjectionModel > & projectionModel, AreaPlane areaPlane)"""
        return _six_sicd.SixSicdUtilities_getModelComponents(complexData, geometry, projectionModel, areaPlane)

    getModelComponents = staticmethod(getModelComponents)

    def getPolynomialFitter(*args):
        """
        getPolynomialFitter(ComplexData complexData, size_t numPoints1D, bool sampleWithinValidDataPolygon=False) -> std::auto_ptr< scene::ProjectionPolynomialFitter >
        getPolynomialFitter(ComplexData complexData, size_t numPoints1D) -> std::auto_ptr< scene::ProjectionPolynomialFitter >
        getPolynomialFitter(ComplexData complexData) -> std::auto_ptr< scene::ProjectionPolynomialFitter >
        """
        return _six_sicd.SixSicdUtilities_getPolynomialFitter(*args)

    getPolynomialFitter = staticmethod(getPolynomialFitter)

    def getValidDataPolygon(sicdData, projection, validData):
        """getValidDataPolygon(ComplexData sicdData, ProjectionModel projection, VectorRowColDouble validData)"""
        return _six_sicd.SixSicdUtilities_getValidDataPolygon(sicdData, projection, validData)

    getValidDataPolygon = staticmethod(getValidDataPolygon)

    def readSicd(*args):
        """
        readSicd(std::string const & sicdPathname, VectorString schemaPaths, std::auto_ptr< six::sicd::ComplexData > & complexData, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & widebandData)
        readSicd(std::string const & sicdPathname, VectorString schemaPaths, size_t orderX, size_t orderY, std::auto_ptr< six::sicd::ComplexData > & complexData, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & widebandData, Poly2D outputRowColToSlantRow, Poly2D outputRowColToSlantCol, std::auto_ptr< six::sicd::NoiseMesh > & noiseMesh)
        """
        return _six_sicd.SixSicdUtilities_readSicd(*args)

    readSicd = staticmethod(readSicd)

    def getComplexData(*args):
        """
        getComplexData(std::string const & pathname, VectorString schemaPaths) -> std::auto_ptr< six::sicd::ComplexData >
        getComplexData(NITFReadControl & reader) -> std::auto_ptr< six::sicd::ComplexData >
        """
        return _six_sicd.SixSicdUtilities_getComplexData(*args)

    getComplexData = staticmethod(getComplexData)

    def getWidebandData(*args):
        """
        getWidebandData(NITFReadControl & reader, ComplexData complexData, std::complex< float > * buffer)
        getWidebandData(NITFReadControl & reader, ComplexData complexData, RowColSizeT offset, RowColSizeT extent, std::complex< float > * buffer)
        getWidebandData(NITFReadControl & reader, ComplexData complexData, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & buffer)
        getWidebandData(NITFReadControl & reader, ComplexData complexData, RowColSizeT offset, RowColSizeT extent, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & buffer)
        getWidebandData(std::string const & sicdPathname, VectorString schemaPaths, ComplexData complexData, std::complex< float > * buffer)
        getWidebandData(std::string const & sicdPathname, VectorString schemaPaths, ComplexData complexData, RowColSizeT offset, RowColSizeT extent, std::complex< float > * buffer)
        """
        return _six_sicd.SixSicdUtilities_getWidebandData(*args)

    getWidebandData = staticmethod(getWidebandData)

    def getGroundPlaneNormal(data):
        """getGroundPlaneNormal(ComplexData data) -> Vector3"""
        return _six_sicd.SixSicdUtilities_getGroundPlaneNormal(data)

    getGroundPlaneNormal = staticmethod(getGroundPlaneNormal)

    def nPoly(poly, index):
        """nPoly(PolyVector3 poly, size_t index) -> Poly1D"""
        return _six_sicd.SixSicdUtilities_nPoly(poly, index)

    nPoly = staticmethod(nPoly)

    def isClockwise(vertices, isUpPositive=False):
        """
        isClockwise(VectorRowColInt vertices, bool isUpPositive=False) -> bool
        isClockwise(VectorRowColInt vertices) -> bool
        """
        return _six_sicd.SixSicdUtilities_isClockwise(vertices, isUpPositive)

    isClockwise = staticmethod(isClockwise)

    def parseData(xmlStream, schemaPaths, log):
        """parseData(InputStream xmlStream, VectorString schemaPaths, logging::Logger & log) -> std::auto_ptr< six::sicd::ComplexData >"""
        return _six_sicd.SixSicdUtilities_parseData(xmlStream, schemaPaths, log)

    parseData = staticmethod(parseData)

    def parseDataFromFile(pathname, schemaPaths, log):
        """parseDataFromFile(std::string const & pathname, VectorString schemaPaths, logging::Logger & log) -> std::auto_ptr< six::sicd::ComplexData >"""
        return _six_sicd.SixSicdUtilities_parseDataFromFile(pathname, schemaPaths, log)

    parseDataFromFile = staticmethod(parseDataFromFile)

    def parseDataFromString(xmlStr, schemaPaths, log):
        """parseDataFromString(std::string const & xmlStr, VectorString schemaPaths, logging::Logger & log) -> std::auto_ptr< six::sicd::ComplexData >"""
        return _six_sicd.SixSicdUtilities_parseDataFromString(xmlStr, schemaPaths, log)

    parseDataFromString = staticmethod(parseDataFromString)

    def toXMLString(*args):
        """
        toXMLString(ComplexData data, VectorString schemaPaths, logging::Logger * logger=None) -> std::string
        toXMLString(ComplexData data, VectorString schemaPaths) -> std::string
        toXMLString(ComplexData data) -> std::string
        """
        return _six_sicd.SixSicdUtilities_toXMLString(*args)

    toXMLString = staticmethod(toXMLString)

    def createFakeComplexData():
        """createFakeComplexData() -> std::auto_ptr< six::sicd::ComplexData >"""
        return _six_sicd.SixSicdUtilities_createFakeComplexData()

    createFakeComplexData = staticmethod(createFakeComplexData)

    def getNoiseMesh(reader):
        """getNoiseMesh(NITFReadControl & reader) -> std::auto_ptr< six::sicd::NoiseMesh >"""
        return _six_sicd.SixSicdUtilities_getNoiseMesh(reader)

    getNoiseMesh = staticmethod(getNoiseMesh)

    def getProjectionPolys(reader, orderX, orderY, complexData, outputRowColToSlantRow, outputRowColToSlantCol):
        """getProjectionPolys(NITFReadControl & reader, size_t orderX, size_t orderY, std::auto_ptr< six::sicd::ComplexData > & complexData, Poly2D outputRowColToSlantRow, Poly2D outputRowColToSlantCol)"""
        return _six_sicd.SixSicdUtilities_getProjectionPolys(reader, orderX, orderY, complexData, outputRowColToSlantRow, outputRowColToSlantCol)

    getProjectionPolys = staticmethod(getProjectionPolys)

    def transformXYPolyToRowColPoly(polyXY, outSampleSpacing, outCenter, polyScaleFactor, polyShift):
        """transformXYPolyToRowColPoly(Poly2D polyXY, RowColDouble outSampleSpacing, RowColDouble outCenter, double polyScaleFactor, double polyShift) -> Poly2D"""
        return _six_sicd.SixSicdUtilities_transformXYPolyToRowColPoly(polyXY, outSampleSpacing, outCenter, polyScaleFactor, polyShift)

    transformXYPolyToRowColPoly = staticmethod(transformXYPolyToRowColPoly)

    def transformXYProjectionPolys(outputXYToSlantX, outputXYToSlantY, slantSampleSpacing, outputSampleSpacing, slantCenter, outputCenter, outputRowColToSlantRow, outputRowColToSlantCol):
        """transformXYProjectionPolys(Poly2D outputXYToSlantX, Poly2D outputXYToSlantY, RowColDouble slantSampleSpacing, RowColDouble outputSampleSpacing, RowColDouble slantCenter, RowColDouble outputCenter, Poly2D outputRowColToSlantRow, Poly2D outputRowColToSlantCol)"""
        return _six_sicd.SixSicdUtilities_transformXYProjectionPolys(outputXYToSlantX, outputXYToSlantY, slantSampleSpacing, outputSampleSpacing, slantCenter, outputCenter, outputRowColToSlantRow, outputRowColToSlantCol)

    transformXYProjectionPolys = staticmethod(transformXYProjectionPolys)

    def fitXYProjectionPolys(outputMesh, slantMesh, orderX, orderY, outputXYToSlantX, outputXYToSlantY, slantXYToOutputX, slantXYToOutputY):
        """fitXYProjectionPolys(PlanarCoordinateMesh outputMesh, PlanarCoordinateMesh slantMesh, size_t orderX, size_t orderY, Poly2D outputXYToSlantX, Poly2D outputXYToSlantY, Poly2D slantXYToOutputX, Poly2D slantXYToOutputY)"""
        return _six_sicd.SixSicdUtilities_fitXYProjectionPolys(outputMesh, slantMesh, orderX, orderY, outputXYToSlantX, outputXYToSlantY, slantXYToOutputX, slantXYToOutputY)

    fitXYProjectionPolys = staticmethod(fitXYProjectionPolys)

    def projectPixelsToOutputPlane(complexData, spPixels, opPixels):
        """projectPixelsToOutputPlane(ComplexData complexData, VectorRowColDouble spPixels, VectorRowColDouble opPixels)"""
        return _six_sicd.SixSicdUtilities_projectPixelsToOutputPlane(complexData, spPixels, opPixels)

    projectPixelsToOutputPlane = staticmethod(projectPixelsToOutputPlane)

    def projectValidDataPolygonToOutputPlane(complexData, opPixels):
        """projectValidDataPolygonToOutputPlane(ComplexData complexData, VectorRowColDouble opPixels)"""
        return _six_sicd.SixSicdUtilities_projectValidDataPolygonToOutputPlane(complexData, opPixels)

    projectValidDataPolygonToOutputPlane = staticmethod(projectValidDataPolygonToOutputPlane)

    def projectPixelsToSlantPlane(complexData, opPixels, spPixels):
        """projectPixelsToSlantPlane(ComplexData complexData, VectorRowColDouble opPixels, VectorRowColDouble spPixels)"""
        return _six_sicd.SixSicdUtilities_projectPixelsToSlantPlane(complexData, opPixels, spPixels)

    projectPixelsToSlantPlane = staticmethod(projectPixelsToSlantPlane)

    def __init__(self):
        """__init__(six::sicd::Utilities self) -> SixSicdUtilities"""
        this = _six_sicd.new_SixSicdUtilities()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_SixSicdUtilities
    __del__ = lambda self: None
SixSicdUtilities_swigregister = _six_sicd.SixSicdUtilities_swigregister
SixSicdUtilities_swigregister(SixSicdUtilities)

def SixSicdUtilities_getSceneGeometry(data):
    """SixSicdUtilities_getSceneGeometry(ComplexData data) -> SceneGeometry"""
    return _six_sicd.SixSicdUtilities_getSceneGeometry(data)

def SixSicdUtilities_getProjectionModel(data, geom):
    """SixSicdUtilities_getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"""
    return _six_sicd.SixSicdUtilities_getProjectionModel(data, geom)

def SixSicdUtilities_getModelComponents(complexData, geometry, projectionModel, areaPlane):
    """SixSicdUtilities_getModelComponents(ComplexData complexData, std::auto_ptr< scene::SceneGeometry > & geometry, std::auto_ptr< scene::ProjectionModel > & projectionModel, AreaPlane areaPlane)"""
    return _six_sicd.SixSicdUtilities_getModelComponents(complexData, geometry, projectionModel, areaPlane)

def SixSicdUtilities_getPolynomialFitter(*args):
    """
    getPolynomialFitter(ComplexData complexData, size_t numPoints1D, bool sampleWithinValidDataPolygon=False) -> std::auto_ptr< scene::ProjectionPolynomialFitter >
    getPolynomialFitter(ComplexData complexData, size_t numPoints1D) -> std::auto_ptr< scene::ProjectionPolynomialFitter >
    SixSicdUtilities_getPolynomialFitter(ComplexData complexData) -> std::auto_ptr< scene::ProjectionPolynomialFitter >
    """
    return _six_sicd.SixSicdUtilities_getPolynomialFitter(*args)

def SixSicdUtilities_getValidDataPolygon(sicdData, projection, validData):
    """SixSicdUtilities_getValidDataPolygon(ComplexData sicdData, ProjectionModel projection, VectorRowColDouble validData)"""
    return _six_sicd.SixSicdUtilities_getValidDataPolygon(sicdData, projection, validData)

def SixSicdUtilities_readSicd(*args):
    """
    readSicd(std::string const & sicdPathname, VectorString schemaPaths, std::auto_ptr< six::sicd::ComplexData > & complexData, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & widebandData)
    SixSicdUtilities_readSicd(std::string const & sicdPathname, VectorString schemaPaths, size_t orderX, size_t orderY, std::auto_ptr< six::sicd::ComplexData > & complexData, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & widebandData, Poly2D outputRowColToSlantRow, Poly2D outputRowColToSlantCol, std::auto_ptr< six::sicd::NoiseMesh > & noiseMesh)
    """
    return _six_sicd.SixSicdUtilities_readSicd(*args)

def SixSicdUtilities_getComplexData(*args):
    """
    getComplexData(std::string const & pathname, VectorString schemaPaths) -> std::auto_ptr< six::sicd::ComplexData >
    SixSicdUtilities_getComplexData(NITFReadControl & reader) -> std::auto_ptr< six::sicd::ComplexData >
    """
    return _six_sicd.SixSicdUtilities_getComplexData(*args)

def SixSicdUtilities_getWidebandData(*args):
    """
    getWidebandData(NITFReadControl & reader, ComplexData complexData, std::complex< float > * buffer)
    getWidebandData(NITFReadControl & reader, ComplexData complexData, RowColSizeT offset, RowColSizeT extent, std::complex< float > * buffer)
    getWidebandData(NITFReadControl & reader, ComplexData complexData, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & buffer)
    getWidebandData(NITFReadControl & reader, ComplexData complexData, RowColSizeT offset, RowColSizeT extent, std::vector< std::complex< float >,std::allocator< std::complex< float > > > & buffer)
    getWidebandData(std::string const & sicdPathname, VectorString schemaPaths, ComplexData complexData, std::complex< float > * buffer)
    SixSicdUtilities_getWidebandData(std::string const & sicdPathname, VectorString schemaPaths, ComplexData complexData, RowColSizeT offset, RowColSizeT extent, std::complex< float > * buffer)
    """
    return _six_sicd.SixSicdUtilities_getWidebandData(*args)

def SixSicdUtilities_getGroundPlaneNormal(data):
    """SixSicdUtilities_getGroundPlaneNormal(ComplexData data) -> Vector3"""
    return _six_sicd.SixSicdUtilities_getGroundPlaneNormal(data)

def SixSicdUtilities_nPoly(poly, index):
    """SixSicdUtilities_nPoly(PolyVector3 poly, size_t index) -> Poly1D"""
    return _six_sicd.SixSicdUtilities_nPoly(poly, index)

def SixSicdUtilities_isClockwise(vertices, isUpPositive=False):
    """
    isClockwise(VectorRowColInt vertices, bool isUpPositive=False) -> bool
    SixSicdUtilities_isClockwise(VectorRowColInt vertices) -> bool
    """
    return _six_sicd.SixSicdUtilities_isClockwise(vertices, isUpPositive)

def SixSicdUtilities_parseData(xmlStream, schemaPaths, log):
    """SixSicdUtilities_parseData(InputStream xmlStream, VectorString schemaPaths, logging::Logger & log) -> std::auto_ptr< six::sicd::ComplexData >"""
    return _six_sicd.SixSicdUtilities_parseData(xmlStream, schemaPaths, log)

def SixSicdUtilities_parseDataFromFile(pathname, schemaPaths, log):
    """SixSicdUtilities_parseDataFromFile(std::string const & pathname, VectorString schemaPaths, logging::Logger & log) -> std::auto_ptr< six::sicd::ComplexData >"""
    return _six_sicd.SixSicdUtilities_parseDataFromFile(pathname, schemaPaths, log)

def SixSicdUtilities_parseDataFromString(xmlStr, schemaPaths, log):
    """SixSicdUtilities_parseDataFromString(std::string const & xmlStr, VectorString schemaPaths, logging::Logger & log) -> std::auto_ptr< six::sicd::ComplexData >"""
    return _six_sicd.SixSicdUtilities_parseDataFromString(xmlStr, schemaPaths, log)

def SixSicdUtilities_toXMLString(*args):
    """
    toXMLString(ComplexData data, VectorString schemaPaths, logging::Logger * logger=None) -> std::string
    toXMLString(ComplexData data, VectorString schemaPaths) -> std::string
    SixSicdUtilities_toXMLString(ComplexData data) -> std::string
    """
    return _six_sicd.SixSicdUtilities_toXMLString(*args)

def SixSicdUtilities_createFakeComplexData():
    """SixSicdUtilities_createFakeComplexData() -> std::auto_ptr< six::sicd::ComplexData >"""
    return _six_sicd.SixSicdUtilities_createFakeComplexData()

def SixSicdUtilities_getNoiseMesh(reader):
    """SixSicdUtilities_getNoiseMesh(NITFReadControl & reader) -> std::auto_ptr< six::sicd::NoiseMesh >"""
    return _six_sicd.SixSicdUtilities_getNoiseMesh(reader)

def SixSicdUtilities_getProjectionPolys(reader, orderX, orderY, complexData, outputRowColToSlantRow, outputRowColToSlantCol):
    """SixSicdUtilities_getProjectionPolys(NITFReadControl & reader, size_t orderX, size_t orderY, std::auto_ptr< six::sicd::ComplexData > & complexData, Poly2D outputRowColToSlantRow, Poly2D outputRowColToSlantCol)"""
    return _six_sicd.SixSicdUtilities_getProjectionPolys(reader, orderX, orderY, complexData, outputRowColToSlantRow, outputRowColToSlantCol)

def SixSicdUtilities_transformXYPolyToRowColPoly(polyXY, outSampleSpacing, outCenter, polyScaleFactor, polyShift):
    """SixSicdUtilities_transformXYPolyToRowColPoly(Poly2D polyXY, RowColDouble outSampleSpacing, RowColDouble outCenter, double polyScaleFactor, double polyShift) -> Poly2D"""
    return _six_sicd.SixSicdUtilities_transformXYPolyToRowColPoly(polyXY, outSampleSpacing, outCenter, polyScaleFactor, polyShift)

def SixSicdUtilities_transformXYProjectionPolys(outputXYToSlantX, outputXYToSlantY, slantSampleSpacing, outputSampleSpacing, slantCenter, outputCenter, outputRowColToSlantRow, outputRowColToSlantCol):
    """SixSicdUtilities_transformXYProjectionPolys(Poly2D outputXYToSlantX, Poly2D outputXYToSlantY, RowColDouble slantSampleSpacing, RowColDouble outputSampleSpacing, RowColDouble slantCenter, RowColDouble outputCenter, Poly2D outputRowColToSlantRow, Poly2D outputRowColToSlantCol)"""
    return _six_sicd.SixSicdUtilities_transformXYProjectionPolys(outputXYToSlantX, outputXYToSlantY, slantSampleSpacing, outputSampleSpacing, slantCenter, outputCenter, outputRowColToSlantRow, outputRowColToSlantCol)

def SixSicdUtilities_fitXYProjectionPolys(outputMesh, slantMesh, orderX, orderY, outputXYToSlantX, outputXYToSlantY, slantXYToOutputX, slantXYToOutputY):
    """SixSicdUtilities_fitXYProjectionPolys(PlanarCoordinateMesh outputMesh, PlanarCoordinateMesh slantMesh, size_t orderX, size_t orderY, Poly2D outputXYToSlantX, Poly2D outputXYToSlantY, Poly2D slantXYToOutputX, Poly2D slantXYToOutputY)"""
    return _six_sicd.SixSicdUtilities_fitXYProjectionPolys(outputMesh, slantMesh, orderX, orderY, outputXYToSlantX, outputXYToSlantY, slantXYToOutputX, slantXYToOutputY)

def SixSicdUtilities_projectPixelsToOutputPlane(complexData, spPixels, opPixels):
    """SixSicdUtilities_projectPixelsToOutputPlane(ComplexData complexData, VectorRowColDouble spPixels, VectorRowColDouble opPixels)"""
    return _six_sicd.SixSicdUtilities_projectPixelsToOutputPlane(complexData, spPixels, opPixels)

def SixSicdUtilities_projectValidDataPolygonToOutputPlane(complexData, opPixels):
    """SixSicdUtilities_projectValidDataPolygonToOutputPlane(ComplexData complexData, VectorRowColDouble opPixels)"""
    return _six_sicd.SixSicdUtilities_projectValidDataPolygonToOutputPlane(complexData, opPixels)

def SixSicdUtilities_projectPixelsToSlantPlane(complexData, opPixels, spPixels):
    """SixSicdUtilities_projectPixelsToSlantPlane(ComplexData complexData, VectorRowColDouble opPixels, VectorRowColDouble spPixels)"""
    return _six_sicd.SixSicdUtilities_projectPixelsToSlantPlane(complexData, opPixels, spPixels)

class AreaPlaneUtility(_object):
    """Proxy of C++ six::sicd::AreaPlaneUtility class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaPlaneUtility, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaPlaneUtility, name)
    __repr__ = _swig_repr

    def setAreaPlane(*args):
        """
        setAreaPlane(ComplexData data, bool includeSegmentList=True, double sampleDensity)
        setAreaPlane(ComplexData data, bool includeSegmentList=True)
        setAreaPlane(ComplexData data)
        """
        return _six_sicd.AreaPlaneUtility_setAreaPlane(*args)

    setAreaPlane = staticmethod(setAreaPlane)

    def deriveAreaPlane(*args):
        """
        deriveAreaPlane(ComplexData data, AreaPlane areaPlane, bool includeSegmentList=True, double sampleDensity)
        deriveAreaPlane(ComplexData data, AreaPlane areaPlane, bool includeSegmentList=True)
        deriveAreaPlane(ComplexData data, AreaPlane areaPlane)
        """
        return _six_sicd.AreaPlaneUtility_deriveAreaPlane(*args)

    deriveAreaPlane = staticmethod(deriveAreaPlane)

    def hasAreaPlane(data):
        """hasAreaPlane(ComplexData data) -> bool"""
        return _six_sicd.AreaPlaneUtility_hasAreaPlane(data)

    hasAreaPlane = staticmethod(hasAreaPlane)

    def __init__(self):
        """__init__(six::sicd::AreaPlaneUtility self) -> AreaPlaneUtility"""
        this = _six_sicd.new_AreaPlaneUtility()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_AreaPlaneUtility
    __del__ = lambda self: None
AreaPlaneUtility_swigregister = _six_sicd.AreaPlaneUtility_swigregister
AreaPlaneUtility_swigregister(AreaPlaneUtility)

def AreaPlaneUtility_setAreaPlane(*args):
    """
    setAreaPlane(ComplexData data, bool includeSegmentList=True, double sampleDensity)
    setAreaPlane(ComplexData data, bool includeSegmentList=True)
    AreaPlaneUtility_setAreaPlane(ComplexData data)
    """
    return _six_sicd.AreaPlaneUtility_setAreaPlane(*args)

def AreaPlaneUtility_deriveAreaPlane(*args):
    """
    deriveAreaPlane(ComplexData data, AreaPlane areaPlane, bool includeSegmentList=True, double sampleDensity)
    deriveAreaPlane(ComplexData data, AreaPlane areaPlane, bool includeSegmentList=True)
    AreaPlaneUtility_deriveAreaPlane(ComplexData data, AreaPlane areaPlane)
    """
    return _six_sicd.AreaPlaneUtility_deriveAreaPlane(*args)

def AreaPlaneUtility_hasAreaPlane(data):
    """AreaPlaneUtility_hasAreaPlane(ComplexData data) -> bool"""
    return _six_sicd.AreaPlaneUtility_hasAreaPlane(data)
AreaPlaneUtility.DEFAULT_SAMPLE_DENSITY = _six_sicd.cvar.AreaPlaneUtility_DEFAULT_SAMPLE_DENSITY

class GeoLocator(_object):
    """Proxy of C++ six::sicd::GeoLocator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoLocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoLocator, name)
    __repr__ = _swig_repr

    def __init__(self, complexData, shadowsDown=True):
        """
        __init__(six::sicd::GeoLocator self, ComplexData complexData, bool shadowsDown=True) -> GeoLocator
        __init__(six::sicd::GeoLocator self, ComplexData complexData) -> GeoLocator
        """
        this = _six_sicd.new_GeoLocator(complexData, shadowsDown)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def geolocate(self, rowCol):
        """geolocate(GeoLocator self, RowColDouble rowCol) -> LatLonAlt"""
        return _six_sicd.GeoLocator_geolocate(self, rowCol)

    __swig_destroy__ = _six_sicd.delete_GeoLocator
    __del__ = lambda self: None
GeoLocator_swigregister = _six_sicd.GeoLocator_swigregister
GeoLocator_swigregister(GeoLocator)

class StdAutoCollectionInformation(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::CollectionInformation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoCollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoCollectionInformation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::CollectionInformation)> self) -> StdAutoCollectionInformation"""
        this = _six_sicd.new_StdAutoCollectionInformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoCollectionInformation
    __del__ = lambda self: None
StdAutoCollectionInformation_swigregister = _six_sicd.StdAutoCollectionInformation_swigregister
StdAutoCollectionInformation_swigregister(StdAutoCollectionInformation)

class ScopedCloneableCollectionInformation(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableCollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableCollectionInformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> self, CollectionInformation ptr=None) -> ScopedCloneableCollectionInformation
        __init__(mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> self) -> ScopedCloneableCollectionInformation
        __init__(mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> self, ScopedCloneableCollectionInformation rhs) -> ScopedCloneableCollectionInformation
        """
        this = _six_sicd.new_ScopedCloneableCollectionInformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableCollectionInformation self, CollectionInformation ptr=None)
        reset(ScopedCloneableCollectionInformation self)
        """
        return _six_sicd.ScopedCloneableCollectionInformation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableCollectionInformation
    __del__ = lambda self: None
    __swig_setmethods__["collectorName"] = _six_sicd.ScopedCloneableCollectionInformation_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.ScopedCloneableCollectionInformation_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_collectorName_get, _six_sicd.ScopedCloneableCollectionInformation_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_illuminatorName_get, _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_set)
    __swig_setmethods__["coreName"] = _six_sicd.ScopedCloneableCollectionInformation_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.ScopedCloneableCollectionInformation_coreName_get
    if _newclass:
        coreName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_coreName_get, _six_sicd.ScopedCloneableCollectionInformation_coreName_set)
    __swig_setmethods__["collectType"] = _six_sicd.ScopedCloneableCollectionInformation_collectType_set
    __swig_getmethods__["collectType"] = _six_sicd.ScopedCloneableCollectionInformation_collectType_get
    if _newclass:
        collectType = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_collectType_get, _six_sicd.ScopedCloneableCollectionInformation_collectType_set)
    __swig_setmethods__["radarMode"] = _six_sicd.ScopedCloneableCollectionInformation_radarMode_set
    __swig_getmethods__["radarMode"] = _six_sicd.ScopedCloneableCollectionInformation_radarMode_get
    if _newclass:
        radarMode = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_radarMode_get, _six_sicd.ScopedCloneableCollectionInformation_radarMode_set)
    __swig_setmethods__["radarModeID"] = _six_sicd.ScopedCloneableCollectionInformation_radarModeID_set
    __swig_getmethods__["radarModeID"] = _six_sicd.ScopedCloneableCollectionInformation_radarModeID_get
    if _newclass:
        radarModeID = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_radarModeID_get, _six_sicd.ScopedCloneableCollectionInformation_radarModeID_set)
    __swig_setmethods__["classification"] = _six_sicd.ScopedCloneableCollectionInformation_classification_set
    __swig_getmethods__["classification"] = _six_sicd.ScopedCloneableCollectionInformation_classification_get
    if _newclass:
        classification = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_classification_get, _six_sicd.ScopedCloneableCollectionInformation_classification_set)
    __swig_setmethods__["countryCodes"] = _six_sicd.ScopedCloneableCollectionInformation_countryCodes_set
    __swig_getmethods__["countryCodes"] = _six_sicd.ScopedCloneableCollectionInformation_countryCodes_get
    if _newclass:
        countryCodes = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_countryCodes_get, _six_sicd.ScopedCloneableCollectionInformation_countryCodes_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCloneableCollectionInformation_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCloneableCollectionInformation_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_parameters_get, _six_sicd.ScopedCloneableCollectionInformation_parameters_set)

    def clone(self):
        """clone(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation_clone(self)


    def __eq__(self, other):
        """__eq__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.ScopedCloneableCollectionInformation___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.ScopedCloneableCollectionInformation___ne__(self, other)

ScopedCloneableCollectionInformation_swigregister = _six_sicd.ScopedCloneableCollectionInformation_swigregister
ScopedCloneableCollectionInformation_swigregister(ScopedCloneableCollectionInformation)


def makeScopedCloneableCollectionInformation():
    """makeScopedCloneableCollectionInformation() -> ScopedCloneableCollectionInformation"""
    return _six_sicd.makeScopedCloneableCollectionInformation()
class StdAutoImageCreation(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::ImageCreation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoImageCreation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::ImageCreation)> self) -> StdAutoImageCreation"""
        this = _six_sicd.new_StdAutoImageCreation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoImageCreation
    __del__ = lambda self: None
StdAutoImageCreation_swigregister = _six_sicd.StdAutoImageCreation_swigregister
StdAutoImageCreation_swigregister(StdAutoImageCreation)

class ScopedCloneableImageCreation(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableImageCreation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> self, ImageCreation ptr=None) -> ScopedCloneableImageCreation
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> self) -> ScopedCloneableImageCreation
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> self, ScopedCloneableImageCreation rhs) -> ScopedCloneableImageCreation
        """
        this = _six_sicd.new_ScopedCloneableImageCreation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableImageCreation self, ImageCreation ptr=None)
        reset(ScopedCloneableImageCreation self)
        """
        return _six_sicd.ScopedCloneableImageCreation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableImageCreation
    __del__ = lambda self: None
    __swig_setmethods__["application"] = _six_sicd.ScopedCloneableImageCreation_application_set
    __swig_getmethods__["application"] = _six_sicd.ScopedCloneableImageCreation_application_get
    if _newclass:
        application = _swig_property(_six_sicd.ScopedCloneableImageCreation_application_get, _six_sicd.ScopedCloneableImageCreation_application_set)
    __swig_setmethods__["dateTime"] = _six_sicd.ScopedCloneableImageCreation_dateTime_set
    __swig_getmethods__["dateTime"] = _six_sicd.ScopedCloneableImageCreation_dateTime_get
    if _newclass:
        dateTime = _swig_property(_six_sicd.ScopedCloneableImageCreation_dateTime_get, _six_sicd.ScopedCloneableImageCreation_dateTime_set)
    __swig_setmethods__["site"] = _six_sicd.ScopedCloneableImageCreation_site_set
    __swig_getmethods__["site"] = _six_sicd.ScopedCloneableImageCreation_site_get
    if _newclass:
        site = _swig_property(_six_sicd.ScopedCloneableImageCreation_site_get, _six_sicd.ScopedCloneableImageCreation_site_set)
    __swig_setmethods__["profile"] = _six_sicd.ScopedCloneableImageCreation_profile_set
    __swig_getmethods__["profile"] = _six_sicd.ScopedCloneableImageCreation_profile_get
    if _newclass:
        profile = _swig_property(_six_sicd.ScopedCloneableImageCreation_profile_get, _six_sicd.ScopedCloneableImageCreation_profile_set)

    def clone(self):
        """clone(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation_clone(self)


    def __eq__(self, rhs):
        """__eq__(ScopedCloneableImageCreation self, ImageCreation rhs) -> bool"""
        return _six_sicd.ScopedCloneableImageCreation___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableImageCreation self, ImageCreation rhs) -> bool"""
        return _six_sicd.ScopedCloneableImageCreation___ne__(self, rhs)

ScopedCloneableImageCreation_swigregister = _six_sicd.ScopedCloneableImageCreation_swigregister
ScopedCloneableImageCreation_swigregister(ScopedCloneableImageCreation)


def makeScopedCloneableImageCreation():
    """makeScopedCloneableImageCreation() -> ScopedCloneableImageCreation"""
    return _six_sicd.makeScopedCloneableImageCreation()
class StdAutoImageData(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::ImageData)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoImageData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::ImageData)> self) -> StdAutoImageData"""
        this = _six_sicd.new_StdAutoImageData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoImageData
    __del__ = lambda self: None
StdAutoImageData_swigregister = _six_sicd.StdAutoImageData_swigregister
StdAutoImageData_swigregister(StdAutoImageData)

class ScopedCopyableImageData(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::ImageData)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableImageData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageData)> self, ImageData ptr=None) -> ScopedCopyableImageData
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageData)> self) -> ScopedCopyableImageData
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageData)> self, ScopedCopyableImageData rhs) -> ScopedCopyableImageData
        """
        this = _six_sicd.new_ScopedCopyableImageData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableImageData___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableImageData self) -> ImageData"""
        return _six_sicd.ScopedCopyableImageData_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableImageData self) -> ImageData"""
        return _six_sicd.ScopedCopyableImageData___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableImageData self) -> ImageData"""
        return _six_sicd.ScopedCopyableImageData___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableImageData self, ImageData ptr=None)
        reset(ScopedCopyableImageData self)
        """
        return _six_sicd.ScopedCopyableImageData_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableImageData
    __del__ = lambda self: None
    __swig_setmethods__["pixelType"] = _six_sicd.ScopedCopyableImageData_pixelType_set
    __swig_getmethods__["pixelType"] = _six_sicd.ScopedCopyableImageData_pixelType_get
    if _newclass:
        pixelType = _swig_property(_six_sicd.ScopedCopyableImageData_pixelType_get, _six_sicd.ScopedCopyableImageData_pixelType_set)
    __swig_setmethods__["amplitudeTable"] = _six_sicd.ScopedCopyableImageData_amplitudeTable_set
    __swig_getmethods__["amplitudeTable"] = _six_sicd.ScopedCopyableImageData_amplitudeTable_get
    if _newclass:
        amplitudeTable = _swig_property(_six_sicd.ScopedCopyableImageData_amplitudeTable_get, _six_sicd.ScopedCopyableImageData_amplitudeTable_set)
    __swig_setmethods__["numRows"] = _six_sicd.ScopedCopyableImageData_numRows_set
    __swig_getmethods__["numRows"] = _six_sicd.ScopedCopyableImageData_numRows_get
    if _newclass:
        numRows = _swig_property(_six_sicd.ScopedCopyableImageData_numRows_get, _six_sicd.ScopedCopyableImageData_numRows_set)
    __swig_setmethods__["numCols"] = _six_sicd.ScopedCopyableImageData_numCols_set
    __swig_getmethods__["numCols"] = _six_sicd.ScopedCopyableImageData_numCols_get
    if _newclass:
        numCols = _swig_property(_six_sicd.ScopedCopyableImageData_numCols_get, _six_sicd.ScopedCopyableImageData_numCols_set)
    __swig_setmethods__["firstRow"] = _six_sicd.ScopedCopyableImageData_firstRow_set
    __swig_getmethods__["firstRow"] = _six_sicd.ScopedCopyableImageData_firstRow_get
    if _newclass:
        firstRow = _swig_property(_six_sicd.ScopedCopyableImageData_firstRow_get, _six_sicd.ScopedCopyableImageData_firstRow_set)
    __swig_setmethods__["firstCol"] = _six_sicd.ScopedCopyableImageData_firstCol_set
    __swig_getmethods__["firstCol"] = _six_sicd.ScopedCopyableImageData_firstCol_get
    if _newclass:
        firstCol = _swig_property(_six_sicd.ScopedCopyableImageData_firstCol_get, _six_sicd.ScopedCopyableImageData_firstCol_set)
    __swig_setmethods__["fullImage"] = _six_sicd.ScopedCopyableImageData_fullImage_set
    __swig_getmethods__["fullImage"] = _six_sicd.ScopedCopyableImageData_fullImage_get
    if _newclass:
        fullImage = _swig_property(_six_sicd.ScopedCopyableImageData_fullImage_get, _six_sicd.ScopedCopyableImageData_fullImage_set)
    __swig_setmethods__["scpPixel"] = _six_sicd.ScopedCopyableImageData_scpPixel_set
    __swig_getmethods__["scpPixel"] = _six_sicd.ScopedCopyableImageData_scpPixel_get
    if _newclass:
        scpPixel = _swig_property(_six_sicd.ScopedCopyableImageData_scpPixel_get, _six_sicd.ScopedCopyableImageData_scpPixel_set)
    __swig_setmethods__["validData"] = _six_sicd.ScopedCopyableImageData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ScopedCopyableImageData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.ScopedCopyableImageData_validData_get, _six_sicd.ScopedCopyableImageData_validData_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableImageData self, ImageData rhs) -> bool"""
        return _six_sicd.ScopedCopyableImageData___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableImageData self, ImageData rhs) -> bool"""
        return _six_sicd.ScopedCopyableImageData___ne__(self, rhs)


    def validate(self, geoData, log):
        """validate(ScopedCopyableImageData self, GeoData geoData, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableImageData_validate(self, geoData, log)

ScopedCopyableImageData_swigregister = _six_sicd.ScopedCopyableImageData_swigregister
ScopedCopyableImageData_swigregister(ScopedCopyableImageData)


def makeScopedCopyableImageData():
    """makeScopedCopyableImageData() -> ScopedCopyableImageData"""
    return _six_sicd.makeScopedCopyableImageData()
class StdAutoGeoData(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::GeoData)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoGeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoGeoData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::GeoData)> self) -> StdAutoGeoData"""
        this = _six_sicd.new_StdAutoGeoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoGeoData
    __del__ = lambda self: None
StdAutoGeoData_swigregister = _six_sicd.StdAutoGeoData_swigregister
StdAutoGeoData_swigregister(StdAutoGeoData)

class ScopedCloneableGeoData(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::GeoData)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGeoData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoData)> self, GeoData ptr=None) -> ScopedCloneableGeoData
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoData)> self) -> ScopedCloneableGeoData
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoData)> self, ScopedCloneableGeoData rhs) -> ScopedCloneableGeoData
        """
        this = _six_sicd.new_ScopedCloneableGeoData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableGeoData self, GeoData ptr=None)
        reset(ScopedCloneableGeoData self)
        """
        return _six_sicd.ScopedCloneableGeoData_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGeoData
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData_clone(self)

    __swig_setmethods__["earthModel"] = _six_sicd.ScopedCloneableGeoData_earthModel_set
    __swig_getmethods__["earthModel"] = _six_sicd.ScopedCloneableGeoData_earthModel_get
    if _newclass:
        earthModel = _swig_property(_six_sicd.ScopedCloneableGeoData_earthModel_get, _six_sicd.ScopedCloneableGeoData_earthModel_set)
    __swig_setmethods__["scp"] = _six_sicd.ScopedCloneableGeoData_scp_set
    __swig_getmethods__["scp"] = _six_sicd.ScopedCloneableGeoData_scp_get
    if _newclass:
        scp = _swig_property(_six_sicd.ScopedCloneableGeoData_scp_get, _six_sicd.ScopedCloneableGeoData_scp_set)
    __swig_setmethods__["imageCorners"] = _six_sicd.ScopedCloneableGeoData_imageCorners_set
    __swig_getmethods__["imageCorners"] = _six_sicd.ScopedCloneableGeoData_imageCorners_get
    if _newclass:
        imageCorners = _swig_property(_six_sicd.ScopedCloneableGeoData_imageCorners_get, _six_sicd.ScopedCloneableGeoData_imageCorners_set)
    __swig_setmethods__["validData"] = _six_sicd.ScopedCloneableGeoData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ScopedCloneableGeoData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.ScopedCloneableGeoData_validData_get, _six_sicd.ScopedCloneableGeoData_validData_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoData_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoData_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.ScopedCloneableGeoData_geoInfos_get, _six_sicd.ScopedCloneableGeoData_geoInfos_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableGeoData self, GeoData rhs) -> bool"""
        return _six_sicd.ScopedCloneableGeoData___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableGeoData self, GeoData rhs) -> bool"""
        return _six_sicd.ScopedCloneableGeoData___ne__(self, rhs)


    def fillDerivedFields(self, imageData, model):
        """fillDerivedFields(ScopedCloneableGeoData self, ImageData imageData, ProjectionModel model)"""
        return _six_sicd.ScopedCloneableGeoData_fillDerivedFields(self, imageData, model)


    def validate(self, log):
        """validate(ScopedCloneableGeoData self, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCloneableGeoData_validate(self, log)

ScopedCloneableGeoData_swigregister = _six_sicd.ScopedCloneableGeoData_swigregister
ScopedCloneableGeoData_swigregister(ScopedCloneableGeoData)


def makeScopedCloneableGeoData():
    """makeScopedCloneableGeoData() -> ScopedCloneableGeoData"""
    return _six_sicd.makeScopedCloneableGeoData()
class StdAutoGrid(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Grid)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Grid)> self) -> StdAutoGrid"""
        this = _six_sicd.new_StdAutoGrid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoGrid
    __del__ = lambda self: None
StdAutoGrid_swigregister = _six_sicd.StdAutoGrid_swigregister
StdAutoGrid_swigregister(StdAutoGrid)

class ScopedCloneableGrid(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Grid)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Grid)> self, Grid ptr=None) -> ScopedCloneableGrid
        __init__(mem::ScopedCloneablePtr<(six::sicd::Grid)> self) -> ScopedCloneableGrid
        __init__(mem::ScopedCloneablePtr<(six::sicd::Grid)> self, ScopedCloneableGrid rhs) -> ScopedCloneableGrid
        """
        this = _six_sicd.new_ScopedCloneableGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableGrid self, Grid ptr=None)
        reset(ScopedCloneableGrid self)
        """
        return _six_sicd.ScopedCloneableGrid_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGrid
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid_clone(self)

    __swig_setmethods__["imagePlane"] = _six_sicd.ScopedCloneableGrid_imagePlane_set
    __swig_getmethods__["imagePlane"] = _six_sicd.ScopedCloneableGrid_imagePlane_get
    if _newclass:
        imagePlane = _swig_property(_six_sicd.ScopedCloneableGrid_imagePlane_get, _six_sicd.ScopedCloneableGrid_imagePlane_set)
    __swig_setmethods__["type"] = _six_sicd.ScopedCloneableGrid_type_set
    __swig_getmethods__["type"] = _six_sicd.ScopedCloneableGrid_type_get
    if _newclass:
        type = _swig_property(_six_sicd.ScopedCloneableGrid_type_get, _six_sicd.ScopedCloneableGrid_type_set)
    __swig_setmethods__["timeCOAPoly"] = _six_sicd.ScopedCloneableGrid_timeCOAPoly_set
    __swig_getmethods__["timeCOAPoly"] = _six_sicd.ScopedCloneableGrid_timeCOAPoly_get
    if _newclass:
        timeCOAPoly = _swig_property(_six_sicd.ScopedCloneableGrid_timeCOAPoly_get, _six_sicd.ScopedCloneableGrid_timeCOAPoly_set)
    __swig_setmethods__["row"] = _six_sicd.ScopedCloneableGrid_row_set
    __swig_getmethods__["row"] = _six_sicd.ScopedCloneableGrid_row_get
    if _newclass:
        row = _swig_property(_six_sicd.ScopedCloneableGrid_row_get, _six_sicd.ScopedCloneableGrid_row_set)
    __swig_setmethods__["col"] = _six_sicd.ScopedCloneableGrid_col_set
    __swig_getmethods__["col"] = _six_sicd.ScopedCloneableGrid_col_get
    if _newclass:
        col = _swig_property(_six_sicd.ScopedCloneableGrid_col_get, _six_sicd.ScopedCloneableGrid_col_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableGrid self, Grid rhs) -> bool"""
        return _six_sicd.ScopedCloneableGrid___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableGrid self, Grid rhs) -> bool"""
        return _six_sicd.ScopedCloneableGrid___ne__(self, rhs)


    def validate(self, *args):
        """
        validate(ScopedCloneableGrid self, CollectionInformation collectionInformation, ImageData imageData, logging::Logger & log) -> bool
        validate(ScopedCloneableGrid self, RMA const & rma, Vector3 scp, PolyVector3 arpPoly, double fc, logging::Logger & log) -> bool
        validate(ScopedCloneableGrid self, PFA pfa, RadarCollection const & radarCollection, double fc, logging::Logger & log) -> bool
        validate(ScopedCloneableGrid self, RgAzComp rgAzComp, GeoData geoData, SCPCOA scpcoa, double fc, logging::Logger & log) -> bool
        """
        return _six_sicd.ScopedCloneableGrid_validate(self, *args)


    def fillDerivedFields(self, *args):
        """
        fillDerivedFields(ScopedCloneableGrid self, CollectionInformation collectionInformation, ImageData imageData, SCPCOA scpcoa)
        fillDerivedFields(ScopedCloneableGrid self, RMA const & rma, Vector3 scp, PolyVector3 arpPoly)
        fillDerivedFields(ScopedCloneableGrid self, RgAzComp rgAzComp, GeoData geoData, SCPCOA scpcoa, double fc)
        """
        return _six_sicd.ScopedCloneableGrid_fillDerivedFields(self, *args)


    def fillDefaultFields(self, *args):
        """
        fillDefaultFields(ScopedCloneableGrid self, RMA const & rma, double fc)
        fillDefaultFields(ScopedCloneableGrid self, PFA pfa, double fc)
        """
        return _six_sicd.ScopedCloneableGrid_fillDefaultFields(self, *args)

ScopedCloneableGrid_swigregister = _six_sicd.ScopedCloneableGrid_swigregister
ScopedCloneableGrid_swigregister(ScopedCloneableGrid)


def makeScopedCloneableGrid():
    """makeScopedCloneableGrid() -> ScopedCloneableGrid"""
    return _six_sicd.makeScopedCloneableGrid()
class StdAutoTimeline(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Timeline)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTimeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTimeline, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Timeline)> self) -> StdAutoTimeline"""
        this = _six_sicd.new_StdAutoTimeline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoTimeline
    __del__ = lambda self: None
StdAutoTimeline_swigregister = _six_sicd.StdAutoTimeline_swigregister
StdAutoTimeline_swigregister(StdAutoTimeline)

class ScopedCopyableTimeline(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::Timeline)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTimeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTimeline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::Timeline)> self, Timeline ptr=None) -> ScopedCopyableTimeline
        __init__(mem::ScopedCopyablePtr<(six::sicd::Timeline)> self) -> ScopedCopyableTimeline
        __init__(mem::ScopedCopyablePtr<(six::sicd::Timeline)> self, ScopedCopyableTimeline rhs) -> ScopedCopyableTimeline
        """
        this = _six_sicd.new_ScopedCopyableTimeline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableTimeline___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCopyableTimeline_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCopyableTimeline___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCopyableTimeline___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableTimeline self, Timeline ptr=None)
        reset(ScopedCopyableTimeline self)
        """
        return _six_sicd.ScopedCopyableTimeline_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableTimeline
    __del__ = lambda self: None
    __swig_setmethods__["collectStart"] = _six_sicd.ScopedCopyableTimeline_collectStart_set
    __swig_getmethods__["collectStart"] = _six_sicd.ScopedCopyableTimeline_collectStart_get
    if _newclass:
        collectStart = _swig_property(_six_sicd.ScopedCopyableTimeline_collectStart_get, _six_sicd.ScopedCopyableTimeline_collectStart_set)
    __swig_setmethods__["collectDuration"] = _six_sicd.ScopedCopyableTimeline_collectDuration_set
    __swig_getmethods__["collectDuration"] = _six_sicd.ScopedCopyableTimeline_collectDuration_get
    if _newclass:
        collectDuration = _swig_property(_six_sicd.ScopedCopyableTimeline_collectDuration_get, _six_sicd.ScopedCopyableTimeline_collectDuration_set)
    __swig_setmethods__["interPulsePeriod"] = _six_sicd.ScopedCopyableTimeline_interPulsePeriod_set
    __swig_getmethods__["interPulsePeriod"] = _six_sicd.ScopedCopyableTimeline_interPulsePeriod_get
    if _newclass:
        interPulsePeriod = _swig_property(_six_sicd.ScopedCopyableTimeline_interPulsePeriod_get, _six_sicd.ScopedCopyableTimeline_interPulsePeriod_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableTimeline self, Timeline rhs) -> bool"""
        return _six_sicd.ScopedCopyableTimeline___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableTimeline self, Timeline rhs) -> bool"""
        return _six_sicd.ScopedCopyableTimeline___ne__(self, rhs)

ScopedCopyableTimeline_swigregister = _six_sicd.ScopedCopyableTimeline_swigregister
ScopedCopyableTimeline_swigregister(ScopedCopyableTimeline)


def makeScopedCopyableTimeline():
    """makeScopedCopyableTimeline() -> ScopedCopyableTimeline"""
    return _six_sicd.makeScopedCopyableTimeline()
class StdAutoPosition(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Position)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoPosition, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Position)> self) -> StdAutoPosition"""
        this = _six_sicd.new_StdAutoPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoPosition
    __del__ = lambda self: None
StdAutoPosition_swigregister = _six_sicd.StdAutoPosition_swigregister
StdAutoPosition_swigregister(StdAutoPosition)

class ScopedCopyablePosition(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::Position)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePosition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::Position)> self, Position ptr=None) -> ScopedCopyablePosition
        __init__(mem::ScopedCopyablePtr<(six::sicd::Position)> self) -> ScopedCopyablePosition
        __init__(mem::ScopedCopyablePtr<(six::sicd::Position)> self, ScopedCopyablePosition rhs) -> ScopedCopyablePosition
        """
        this = _six_sicd.new_ScopedCopyablePosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyablePosition___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyablePosition self) -> Position"""
        return _six_sicd.ScopedCopyablePosition_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyablePosition self) -> Position"""
        return _six_sicd.ScopedCopyablePosition___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyablePosition self) -> Position"""
        return _six_sicd.ScopedCopyablePosition___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyablePosition self, Position ptr=None)
        reset(ScopedCopyablePosition self)
        """
        return _six_sicd.ScopedCopyablePosition_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePosition
    __del__ = lambda self: None
    __swig_setmethods__["arpPoly"] = _six_sicd.ScopedCopyablePosition_arpPoly_set
    __swig_getmethods__["arpPoly"] = _six_sicd.ScopedCopyablePosition_arpPoly_get
    if _newclass:
        arpPoly = _swig_property(_six_sicd.ScopedCopyablePosition_arpPoly_get, _six_sicd.ScopedCopyablePosition_arpPoly_set)
    __swig_setmethods__["grpPoly"] = _six_sicd.ScopedCopyablePosition_grpPoly_set
    __swig_getmethods__["grpPoly"] = _six_sicd.ScopedCopyablePosition_grpPoly_get
    if _newclass:
        grpPoly = _swig_property(_six_sicd.ScopedCopyablePosition_grpPoly_get, _six_sicd.ScopedCopyablePosition_grpPoly_set)
    __swig_setmethods__["txAPCPoly"] = _six_sicd.ScopedCopyablePosition_txAPCPoly_set
    __swig_getmethods__["txAPCPoly"] = _six_sicd.ScopedCopyablePosition_txAPCPoly_get
    if _newclass:
        txAPCPoly = _swig_property(_six_sicd.ScopedCopyablePosition_txAPCPoly_get, _six_sicd.ScopedCopyablePosition_txAPCPoly_set)
    __swig_setmethods__["rcvAPC"] = _six_sicd.ScopedCopyablePosition_rcvAPC_set
    __swig_getmethods__["rcvAPC"] = _six_sicd.ScopedCopyablePosition_rcvAPC_get
    if _newclass:
        rcvAPC = _swig_property(_six_sicd.ScopedCopyablePosition_rcvAPC_get, _six_sicd.ScopedCopyablePosition_rcvAPC_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyablePosition self, Position rhs) -> bool"""
        return _six_sicd.ScopedCopyablePosition___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyablePosition self, Position rhs) -> bool"""
        return _six_sicd.ScopedCopyablePosition___ne__(self, rhs)


    def fillDerivedFields(self, scpcoa):
        """fillDerivedFields(ScopedCopyablePosition self, SCPCOA scpcoa)"""
        return _six_sicd.ScopedCopyablePosition_fillDerivedFields(self, scpcoa)


    def validate(self, log):
        """validate(ScopedCopyablePosition self, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyablePosition_validate(self, log)

ScopedCopyablePosition_swigregister = _six_sicd.ScopedCopyablePosition_swigregister
ScopedCopyablePosition_swigregister(ScopedCopyablePosition)


def makeScopedCopyablePosition():
    """makeScopedCopyablePosition() -> ScopedCopyablePosition"""
    return _six_sicd.makeScopedCopyablePosition()
class StdAutoRcvAPC(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RcvAPC)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRcvAPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRcvAPC, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RcvAPC)> self) -> StdAutoRcvAPC"""
        this = _six_sicd.new_StdAutoRcvAPC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRcvAPC
    __del__ = lambda self: None
StdAutoRcvAPC_swigregister = _six_sicd.StdAutoRcvAPC_swigregister
StdAutoRcvAPC_swigregister(StdAutoRcvAPC)

class ScopedCopyableRcvAPC(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RcvAPC)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRcvAPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRcvAPC, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvAPC)> self, RcvAPC ptr=None) -> ScopedCopyableRcvAPC
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvAPC)> self) -> ScopedCopyableRcvAPC
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvAPC)> self, ScopedCopyableRcvAPC rhs) -> ScopedCopyableRcvAPC
        """
        this = _six_sicd.new_ScopedCopyableRcvAPC(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableRcvAPC___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableRcvAPC self) -> RcvAPC"""
        return _six_sicd.ScopedCopyableRcvAPC_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRcvAPC self) -> RcvAPC"""
        return _six_sicd.ScopedCopyableRcvAPC___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRcvAPC self) -> RcvAPC"""
        return _six_sicd.ScopedCopyableRcvAPC___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRcvAPC self, RcvAPC ptr=None)
        reset(ScopedCopyableRcvAPC self)
        """
        return _six_sicd.ScopedCopyableRcvAPC_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRcvAPC
    __del__ = lambda self: None
    __swig_setmethods__["rcvAPCPolys"] = _six_sicd.ScopedCopyableRcvAPC_rcvAPCPolys_set
    __swig_getmethods__["rcvAPCPolys"] = _six_sicd.ScopedCopyableRcvAPC_rcvAPCPolys_get
    if _newclass:
        rcvAPCPolys = _swig_property(_six_sicd.ScopedCopyableRcvAPC_rcvAPCPolys_get, _six_sicd.ScopedCopyableRcvAPC_rcvAPCPolys_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableRcvAPC self, RcvAPC rhs) -> bool"""
        return _six_sicd.ScopedCopyableRcvAPC___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableRcvAPC self, RcvAPC rhs) -> bool"""
        return _six_sicd.ScopedCopyableRcvAPC___ne__(self, rhs)

ScopedCopyableRcvAPC_swigregister = _six_sicd.ScopedCopyableRcvAPC_swigregister
ScopedCopyableRcvAPC_swigregister(ScopedCopyableRcvAPC)


def makeScopedCopyableRcvAPC():
    """makeScopedCopyableRcvAPC() -> ScopedCopyableRcvAPC"""
    return _six_sicd.makeScopedCopyableRcvAPC()
class StdAutoRadarCollection(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RadarCollection)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRadarCollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RadarCollection)> self) -> StdAutoRadarCollection"""
        this = _six_sicd.new_StdAutoRadarCollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRadarCollection
    __del__ = lambda self: None
StdAutoRadarCollection_swigregister = _six_sicd.StdAutoRadarCollection_swigregister
StdAutoRadarCollection_swigregister(StdAutoRadarCollection)

class ScopedCloneableRadarCollection(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableRadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableRadarCollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> self, RadarCollection ptr=None) -> ScopedCloneableRadarCollection
        __init__(mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> self) -> ScopedCloneableRadarCollection
        __init__(mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> self, ScopedCloneableRadarCollection rhs) -> ScopedCloneableRadarCollection
        """
        this = _six_sicd.new_ScopedCloneableRadarCollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableRadarCollection self, RadarCollection ptr=None)
        reset(ScopedCloneableRadarCollection self)
        """
        return _six_sicd.ScopedCloneableRadarCollection_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableRadarCollection
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection_clone(self)

    __swig_setmethods__["refFrequencyIndex"] = _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_get
    if _newclass:
        refFrequencyIndex = _swig_property(_six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_get, _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_set)
    __swig_setmethods__["txFrequencyMin"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_set
    __swig_getmethods__["txFrequencyMin"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_get
    if _newclass:
        txFrequencyMin = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_get, _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_set)
    __swig_setmethods__["txFrequencyMax"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_set
    __swig_getmethods__["txFrequencyMax"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_get
    if _newclass:
        txFrequencyMax = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_get, _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.ScopedCloneableRadarCollection_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.ScopedCloneableRadarCollection_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txPolarization_get, _six_sicd.ScopedCloneableRadarCollection_txPolarization_set)
    __swig_setmethods__["polarizationHVAnglePoly"] = _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_set
    __swig_getmethods__["polarizationHVAnglePoly"] = _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_get
    if _newclass:
        polarizationHVAnglePoly = _swig_property(_six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_get, _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_set)
    __swig_setmethods__["txSequence"] = _six_sicd.ScopedCloneableRadarCollection_txSequence_set
    __swig_getmethods__["txSequence"] = _six_sicd.ScopedCloneableRadarCollection_txSequence_get
    if _newclass:
        txSequence = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txSequence_get, _six_sicd.ScopedCloneableRadarCollection_txSequence_set)
    __swig_setmethods__["waveform"] = _six_sicd.ScopedCloneableRadarCollection_waveform_set
    __swig_getmethods__["waveform"] = _six_sicd.ScopedCloneableRadarCollection_waveform_get
    if _newclass:
        waveform = _swig_property(_six_sicd.ScopedCloneableRadarCollection_waveform_get, _six_sicd.ScopedCloneableRadarCollection_waveform_set)
    __swig_setmethods__["rcvChannels"] = _six_sicd.ScopedCloneableRadarCollection_rcvChannels_set
    __swig_getmethods__["rcvChannels"] = _six_sicd.ScopedCloneableRadarCollection_rcvChannels_get
    if _newclass:
        rcvChannels = _swig_property(_six_sicd.ScopedCloneableRadarCollection_rcvChannels_get, _six_sicd.ScopedCloneableRadarCollection_rcvChannels_set)
    __swig_setmethods__["area"] = _six_sicd.ScopedCloneableRadarCollection_area_set
    __swig_getmethods__["area"] = _six_sicd.ScopedCloneableRadarCollection_area_get
    if _newclass:
        area = _swig_property(_six_sicd.ScopedCloneableRadarCollection_area_get, _six_sicd.ScopedCloneableRadarCollection_area_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCloneableRadarCollection_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCloneableRadarCollection_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.ScopedCloneableRadarCollection_parameters_get, _six_sicd.ScopedCloneableRadarCollection_parameters_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableRadarCollection self, RadarCollection rhs) -> bool"""
        return _six_sicd.ScopedCloneableRadarCollection___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableRadarCollection self, RadarCollection rhs) -> bool"""
        return _six_sicd.ScopedCloneableRadarCollection___ne__(self, rhs)


    def fillDerivedFields(self):
        """fillDerivedFields(ScopedCloneableRadarCollection self)"""
        return _six_sicd.ScopedCloneableRadarCollection_fillDerivedFields(self)


    def validate(self, log):
        """validate(ScopedCloneableRadarCollection self, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCloneableRadarCollection_validate(self, log)

ScopedCloneableRadarCollection_swigregister = _six_sicd.ScopedCloneableRadarCollection_swigregister
ScopedCloneableRadarCollection_swigregister(ScopedCloneableRadarCollection)


def makeScopedCloneableRadarCollection():
    """makeScopedCloneableRadarCollection() -> ScopedCloneableRadarCollection"""
    return _six_sicd.makeScopedCloneableRadarCollection()
class StdAutoImageFormation(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::ImageFormation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoImageFormation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::ImageFormation)> self) -> StdAutoImageFormation"""
        this = _six_sicd.new_StdAutoImageFormation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoImageFormation
    __del__ = lambda self: None
StdAutoImageFormation_swigregister = _six_sicd.StdAutoImageFormation_swigregister
StdAutoImageFormation_swigregister(StdAutoImageFormation)

class ScopedCopyableImageFormation(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableImageFormation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> self, ImageFormation ptr=None) -> ScopedCopyableImageFormation
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> self) -> ScopedCopyableImageFormation
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> self, ScopedCopyableImageFormation rhs) -> ScopedCopyableImageFormation
        """
        this = _six_sicd.new_ScopedCopyableImageFormation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableImageFormation___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableImageFormation self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableImageFormation self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableImageFormation self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableImageFormation self, ImageFormation ptr=None)
        reset(ScopedCopyableImageFormation self)
        """
        return _six_sicd.ScopedCopyableImageFormation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableImageFormation
    __del__ = lambda self: None
    __swig_setmethods__["segmentIdentifier"] = _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_set
    __swig_getmethods__["segmentIdentifier"] = _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_get
    if _newclass:
        segmentIdentifier = _swig_property(_six_sicd.ScopedCopyableImageFormation_segmentIdentifier_get, _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_set)
    __swig_setmethods__["rcvChannelProcessed"] = _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_set
    __swig_getmethods__["rcvChannelProcessed"] = _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_get
    if _newclass:
        rcvChannelProcessed = _swig_property(_six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_get, _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_set)
    __swig_setmethods__["txRcvPolarizationProc"] = _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_set
    __swig_getmethods__["txRcvPolarizationProc"] = _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_get
    if _newclass:
        txRcvPolarizationProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_get, _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_set)
    __swig_setmethods__["imageFormationAlgorithm"] = _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_set
    __swig_getmethods__["imageFormationAlgorithm"] = _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_get
    if _newclass:
        imageFormationAlgorithm = _swig_property(_six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_get, _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_set)
    __swig_setmethods__["tStartProc"] = _six_sicd.ScopedCopyableImageFormation_tStartProc_set
    __swig_getmethods__["tStartProc"] = _six_sicd.ScopedCopyableImageFormation_tStartProc_get
    if _newclass:
        tStartProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_tStartProc_get, _six_sicd.ScopedCopyableImageFormation_tStartProc_set)
    __swig_setmethods__["tEndProc"] = _six_sicd.ScopedCopyableImageFormation_tEndProc_set
    __swig_getmethods__["tEndProc"] = _six_sicd.ScopedCopyableImageFormation_tEndProc_get
    if _newclass:
        tEndProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_tEndProc_get, _six_sicd.ScopedCopyableImageFormation_tEndProc_set)
    __swig_setmethods__["txFrequencyProcMin"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_set
    __swig_getmethods__["txFrequencyProcMin"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_get
    if _newclass:
        txFrequencyProcMin = _swig_property(_six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_get, _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_set)
    __swig_setmethods__["txFrequencyProcMax"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_set
    __swig_getmethods__["txFrequencyProcMax"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_get
    if _newclass:
        txFrequencyProcMax = _swig_property(_six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_get, _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_set)
    __swig_setmethods__["slowTimeBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_set
    __swig_getmethods__["slowTimeBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_get
    if _newclass:
        slowTimeBeamCompensation = _swig_property(_six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_get, _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_set)
    __swig_setmethods__["imageBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_set
    __swig_getmethods__["imageBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_get
    if _newclass:
        imageBeamCompensation = _swig_property(_six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_get, _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_set)
    __swig_setmethods__["azimuthAutofocus"] = _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_set
    __swig_getmethods__["azimuthAutofocus"] = _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_get
    if _newclass:
        azimuthAutofocus = _swig_property(_six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_get, _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_set)
    __swig_setmethods__["rangeAutofocus"] = _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_set
    __swig_getmethods__["rangeAutofocus"] = _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_get
    if _newclass:
        rangeAutofocus = _swig_property(_six_sicd.ScopedCopyableImageFormation_rangeAutofocus_get, _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_set)
    __swig_setmethods__["processing"] = _six_sicd.ScopedCopyableImageFormation_processing_set
    __swig_getmethods__["processing"] = _six_sicd.ScopedCopyableImageFormation_processing_get
    if _newclass:
        processing = _swig_property(_six_sicd.ScopedCopyableImageFormation_processing_get, _six_sicd.ScopedCopyableImageFormation_processing_set)
    __swig_setmethods__["polarizationCalibration"] = _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_set
    __swig_getmethods__["polarizationCalibration"] = _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_get
    if _newclass:
        polarizationCalibration = _swig_property(_six_sicd.ScopedCopyableImageFormation_polarizationCalibration_get, _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableImageFormation self, ImageFormation rhs) -> bool"""
        return _six_sicd.ScopedCopyableImageFormation___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableImageFormation self, ImageFormation rhs) -> bool"""
        return _six_sicd.ScopedCopyableImageFormation___ne__(self, rhs)


    def fillDefaultFields(self, radarCollection):
        """fillDefaultFields(ScopedCopyableImageFormation self, RadarCollection radarCollection)"""
        return _six_sicd.ScopedCopyableImageFormation_fillDefaultFields(self, radarCollection)

ScopedCopyableImageFormation_swigregister = _six_sicd.ScopedCopyableImageFormation_swigregister
ScopedCopyableImageFormation_swigregister(ScopedCopyableImageFormation)


def makeScopedCopyableImageFormation():
    """makeScopedCopyableImageFormation() -> ScopedCopyableImageFormation"""
    return _six_sicd.makeScopedCopyableImageFormation()
class StdAutoSCPCOA(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::SCPCOA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoSCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoSCPCOA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::SCPCOA)> self) -> StdAutoSCPCOA"""
        this = _six_sicd.new_StdAutoSCPCOA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoSCPCOA
    __del__ = lambda self: None
StdAutoSCPCOA_swigregister = _six_sicd.StdAutoSCPCOA_swigregister
StdAutoSCPCOA_swigregister(StdAutoSCPCOA)

class ScopedCopyableSCPCOA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableSCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableSCPCOA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> self, SCPCOA ptr=None) -> ScopedCopyableSCPCOA
        __init__(mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> self) -> ScopedCopyableSCPCOA
        __init__(mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> self, ScopedCopyableSCPCOA rhs) -> ScopedCopyableSCPCOA
        """
        this = _six_sicd.new_ScopedCopyableSCPCOA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableSCPCOA___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableSCPCOA self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableSCPCOA self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableSCPCOA self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableSCPCOA self, SCPCOA ptr=None)
        reset(ScopedCopyableSCPCOA self)
        """
        return _six_sicd.ScopedCopyableSCPCOA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableSCPCOA
    __del__ = lambda self: None
    __swig_setmethods__["scpTime"] = _six_sicd.ScopedCopyableSCPCOA_scpTime_set
    __swig_getmethods__["scpTime"] = _six_sicd.ScopedCopyableSCPCOA_scpTime_get
    if _newclass:
        scpTime = _swig_property(_six_sicd.ScopedCopyableSCPCOA_scpTime_get, _six_sicd.ScopedCopyableSCPCOA_scpTime_set)
    __swig_setmethods__["arpPos"] = _six_sicd.ScopedCopyableSCPCOA_arpPos_set
    __swig_getmethods__["arpPos"] = _six_sicd.ScopedCopyableSCPCOA_arpPos_get
    if _newclass:
        arpPos = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpPos_get, _six_sicd.ScopedCopyableSCPCOA_arpPos_set)
    __swig_setmethods__["arpVel"] = _six_sicd.ScopedCopyableSCPCOA_arpVel_set
    __swig_getmethods__["arpVel"] = _six_sicd.ScopedCopyableSCPCOA_arpVel_get
    if _newclass:
        arpVel = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpVel_get, _six_sicd.ScopedCopyableSCPCOA_arpVel_set)
    __swig_setmethods__["arpAcc"] = _six_sicd.ScopedCopyableSCPCOA_arpAcc_set
    __swig_getmethods__["arpAcc"] = _six_sicd.ScopedCopyableSCPCOA_arpAcc_get
    if _newclass:
        arpAcc = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpAcc_get, _six_sicd.ScopedCopyableSCPCOA_arpAcc_set)
    __swig_setmethods__["sideOfTrack"] = _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_six_sicd.ScopedCopyableSCPCOA_sideOfTrack_get, _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _six_sicd.ScopedCopyableSCPCOA_slantRange_set
    __swig_getmethods__["slantRange"] = _six_sicd.ScopedCopyableSCPCOA_slantRange_get
    if _newclass:
        slantRange = _swig_property(_six_sicd.ScopedCopyableSCPCOA_slantRange_get, _six_sicd.ScopedCopyableSCPCOA_slantRange_set)
    __swig_setmethods__["groundRange"] = _six_sicd.ScopedCopyableSCPCOA_groundRange_set
    __swig_getmethods__["groundRange"] = _six_sicd.ScopedCopyableSCPCOA_groundRange_get
    if _newclass:
        groundRange = _swig_property(_six_sicd.ScopedCopyableSCPCOA_groundRange_get, _six_sicd.ScopedCopyableSCPCOA_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_get, _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_set)
    __swig_setmethods__["grazeAngle"] = _six_sicd.ScopedCopyableSCPCOA_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _six_sicd.ScopedCopyableSCPCOA_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_grazeAngle_get, _six_sicd.ScopedCopyableSCPCOA_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_incidenceAngle_get, _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_set)
    __swig_setmethods__["twistAngle"] = _six_sicd.ScopedCopyableSCPCOA_twistAngle_set
    __swig_getmethods__["twistAngle"] = _six_sicd.ScopedCopyableSCPCOA_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_twistAngle_get, _six_sicd.ScopedCopyableSCPCOA_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _six_sicd.ScopedCopyableSCPCOA_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _six_sicd.ScopedCopyableSCPCOA_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_slopeAngle_get, _six_sicd.ScopedCopyableSCPCOA_slopeAngle_set)
    __swig_setmethods__["azimAngle"] = _six_sicd.ScopedCopyableSCPCOA_azimAngle_set
    __swig_getmethods__["azimAngle"] = _six_sicd.ScopedCopyableSCPCOA_azimAngle_get
    if _newclass:
        azimAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_azimAngle_get, _six_sicd.ScopedCopyableSCPCOA_azimAngle_set)
    __swig_setmethods__["layoverAngle"] = _six_sicd.ScopedCopyableSCPCOA_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _six_sicd.ScopedCopyableSCPCOA_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_layoverAngle_get, _six_sicd.ScopedCopyableSCPCOA_layoverAngle_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableSCPCOA self, SCPCOA rhs) -> bool"""
        return _six_sicd.ScopedCopyableSCPCOA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableSCPCOA self, SCPCOA rhs) -> bool"""
        return _six_sicd.ScopedCopyableSCPCOA___ne__(self, rhs)


    def fillDerivedFields(self, geoData, grid, position):
        """fillDerivedFields(ScopedCopyableSCPCOA self, GeoData geoData, Grid grid, Position position)"""
        return _six_sicd.ScopedCopyableSCPCOA_fillDerivedFields(self, geoData, grid, position)


    def validate(self, geoData, grid, position, log):
        """validate(ScopedCopyableSCPCOA self, GeoData geoData, Grid grid, Position position, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableSCPCOA_validate(self, geoData, grid, position, log)


    def uLOS(self, scp):
        """uLOS(ScopedCopyableSCPCOA self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableSCPCOA_uLOS(self, scp)


    def look(self, scp):
        """look(ScopedCopyableSCPCOA self, Vector3 scp) -> int"""
        return _six_sicd.ScopedCopyableSCPCOA_look(self, scp)


    def left(self):
        """left(ScopedCopyableSCPCOA self) -> Vector3"""
        return _six_sicd.ScopedCopyableSCPCOA_left(self)


    def slantPlaneNormal(self, scp):
        """slantPlaneNormal(ScopedCopyableSCPCOA self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableSCPCOA_slantPlaneNormal(self, scp)

ScopedCopyableSCPCOA_swigregister = _six_sicd.ScopedCopyableSCPCOA_swigregister
ScopedCopyableSCPCOA_swigregister(ScopedCopyableSCPCOA)


def makeScopedCopyableSCPCOA():
    """makeScopedCopyableSCPCOA() -> ScopedCopyableSCPCOA"""
    return _six_sicd.makeScopedCopyableSCPCOA()
class StdAutoAntenna(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Antenna)> self) -> StdAutoAntenna"""
        this = _six_sicd.new_StdAutoAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoAntenna
    __del__ = lambda self: None
StdAutoAntenna_swigregister = _six_sicd.StdAutoAntenna_swigregister
StdAutoAntenna_swigregister(StdAutoAntenna)

class ScopedCopyableAntenna(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAntenna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::Antenna)> self, Antenna ptr=None) -> ScopedCopyableAntenna
        __init__(mem::ScopedCopyablePtr<(six::sicd::Antenna)> self) -> ScopedCopyableAntenna
        __init__(mem::ScopedCopyablePtr<(six::sicd::Antenna)> self, ScopedCopyableAntenna rhs) -> ScopedCopyableAntenna
        """
        this = _six_sicd.new_ScopedCopyableAntenna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableAntenna___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableAntenna self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableAntenna self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableAntenna self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableAntenna self, Antenna ptr=None)
        reset(ScopedCopyableAntenna self)
        """
        return _six_sicd.ScopedCopyableAntenna_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableAntenna
    __del__ = lambda self: None
    __swig_setmethods__["tx"] = _six_sicd.ScopedCopyableAntenna_tx_set
    __swig_getmethods__["tx"] = _six_sicd.ScopedCopyableAntenna_tx_get
    if _newclass:
        tx = _swig_property(_six_sicd.ScopedCopyableAntenna_tx_get, _six_sicd.ScopedCopyableAntenna_tx_set)
    __swig_setmethods__["rcv"] = _six_sicd.ScopedCopyableAntenna_rcv_set
    __swig_getmethods__["rcv"] = _six_sicd.ScopedCopyableAntenna_rcv_get
    if _newclass:
        rcv = _swig_property(_six_sicd.ScopedCopyableAntenna_rcv_get, _six_sicd.ScopedCopyableAntenna_rcv_set)
    __swig_setmethods__["twoWay"] = _six_sicd.ScopedCopyableAntenna_twoWay_set
    __swig_getmethods__["twoWay"] = _six_sicd.ScopedCopyableAntenna_twoWay_get
    if _newclass:
        twoWay = _swig_property(_six_sicd.ScopedCopyableAntenna_twoWay_get, _six_sicd.ScopedCopyableAntenna_twoWay_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableAntenna self, Antenna rhs) -> bool"""
        return _six_sicd.ScopedCopyableAntenna___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableAntenna self, Antenna rhs) -> bool"""
        return _six_sicd.ScopedCopyableAntenna___ne__(self, rhs)

ScopedCopyableAntenna_swigregister = _six_sicd.ScopedCopyableAntenna_swigregister
ScopedCopyableAntenna_swigregister(ScopedCopyableAntenna)


def makeScopedCopyableAntenna():
    """makeScopedCopyableAntenna() -> ScopedCopyableAntenna"""
    return _six_sicd.makeScopedCopyableAntenna()
class StdAutoMatchInformation(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::MatchInformation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoMatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoMatchInformation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::MatchInformation)> self) -> StdAutoMatchInformation"""
        this = _six_sicd.new_StdAutoMatchInformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoMatchInformation
    __del__ = lambda self: None
StdAutoMatchInformation_swigregister = _six_sicd.StdAutoMatchInformation_swigregister
StdAutoMatchInformation_swigregister(StdAutoMatchInformation)

class ScopedCopyableMatchInformation(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableMatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableMatchInformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> self, MatchInformation ptr=None) -> ScopedCopyableMatchInformation
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> self) -> ScopedCopyableMatchInformation
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> self, ScopedCopyableMatchInformation rhs) -> ScopedCopyableMatchInformation
        """
        this = _six_sicd.new_ScopedCopyableMatchInformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableMatchInformation___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableMatchInformation self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableMatchInformation self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableMatchInformation self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableMatchInformation self, MatchInformation ptr=None)
        reset(ScopedCopyableMatchInformation self)
        """
        return _six_sicd.ScopedCopyableMatchInformation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableMatchInformation
    __del__ = lambda self: None
    __swig_setmethods__["types"] = _six_sicd.ScopedCopyableMatchInformation_types_set
    __swig_getmethods__["types"] = _six_sicd.ScopedCopyableMatchInformation_types_get
    if _newclass:
        types = _swig_property(_six_sicd.ScopedCopyableMatchInformation_types_get, _six_sicd.ScopedCopyableMatchInformation_types_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableMatchInformation self, MatchInformation rhs) -> bool"""
        return _six_sicd.ScopedCopyableMatchInformation___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableMatchInformation self, MatchInformation rhs) -> bool"""
        return _six_sicd.ScopedCopyableMatchInformation___ne__(self, rhs)

ScopedCopyableMatchInformation_swigregister = _six_sicd.ScopedCopyableMatchInformation_swigregister
ScopedCopyableMatchInformation_swigregister(ScopedCopyableMatchInformation)


def makeScopedCopyableMatchInformation():
    """makeScopedCopyableMatchInformation() -> ScopedCopyableMatchInformation"""
    return _six_sicd.makeScopedCopyableMatchInformation()
class StdAutoSlowTimeDeskew(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::SlowTimeDeskew)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoSlowTimeDeskew, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoSlowTimeDeskew, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::SlowTimeDeskew)> self) -> StdAutoSlowTimeDeskew"""
        this = _six_sicd.new_StdAutoSlowTimeDeskew()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoSlowTimeDeskew
    __del__ = lambda self: None
StdAutoSlowTimeDeskew_swigregister = _six_sicd.StdAutoSlowTimeDeskew_swigregister
StdAutoSlowTimeDeskew_swigregister(StdAutoSlowTimeDeskew)

class ScopedCopyableSlowTimeDeskew(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::SlowTimeDeskew)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableSlowTimeDeskew, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableSlowTimeDeskew, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::SlowTimeDeskew)> self, SlowTimeDeskew ptr=None) -> ScopedCopyableSlowTimeDeskew
        __init__(mem::ScopedCopyablePtr<(six::sicd::SlowTimeDeskew)> self) -> ScopedCopyableSlowTimeDeskew
        __init__(mem::ScopedCopyablePtr<(six::sicd::SlowTimeDeskew)> self, ScopedCopyableSlowTimeDeskew rhs) -> ScopedCopyableSlowTimeDeskew
        """
        this = _six_sicd.new_ScopedCopyableSlowTimeDeskew(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableSlowTimeDeskew___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableSlowTimeDeskew self) -> SlowTimeDeskew"""
        return _six_sicd.ScopedCopyableSlowTimeDeskew_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableSlowTimeDeskew self) -> SlowTimeDeskew"""
        return _six_sicd.ScopedCopyableSlowTimeDeskew___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableSlowTimeDeskew self) -> SlowTimeDeskew"""
        return _six_sicd.ScopedCopyableSlowTimeDeskew___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableSlowTimeDeskew self, SlowTimeDeskew ptr=None)
        reset(ScopedCopyableSlowTimeDeskew self)
        """
        return _six_sicd.ScopedCopyableSlowTimeDeskew_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableSlowTimeDeskew
    __del__ = lambda self: None
    __swig_setmethods__["applied"] = _six_sicd.ScopedCopyableSlowTimeDeskew_applied_set
    __swig_getmethods__["applied"] = _six_sicd.ScopedCopyableSlowTimeDeskew_applied_get
    if _newclass:
        applied = _swig_property(_six_sicd.ScopedCopyableSlowTimeDeskew_applied_get, _six_sicd.ScopedCopyableSlowTimeDeskew_applied_set)
    __swig_setmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.ScopedCopyableSlowTimeDeskew_slowTimeDeskewPhasePoly_set
    __swig_getmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.ScopedCopyableSlowTimeDeskew_slowTimeDeskewPhasePoly_get
    if _newclass:
        slowTimeDeskewPhasePoly = _swig_property(_six_sicd.ScopedCopyableSlowTimeDeskew_slowTimeDeskewPhasePoly_get, _six_sicd.ScopedCopyableSlowTimeDeskew_slowTimeDeskewPhasePoly_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableSlowTimeDeskew self, SlowTimeDeskew rhs) -> bool"""
        return _six_sicd.ScopedCopyableSlowTimeDeskew___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableSlowTimeDeskew self, SlowTimeDeskew rhs) -> bool"""
        return _six_sicd.ScopedCopyableSlowTimeDeskew___ne__(self, rhs)

ScopedCopyableSlowTimeDeskew_swigregister = _six_sicd.ScopedCopyableSlowTimeDeskew_swigregister
ScopedCopyableSlowTimeDeskew_swigregister(ScopedCopyableSlowTimeDeskew)


def makeScopedCopyableSlowTimeDeskew():
    """makeScopedCopyableSlowTimeDeskew() -> ScopedCopyableSlowTimeDeskew"""
    return _six_sicd.makeScopedCopyableSlowTimeDeskew()
class StdAutoPFA(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::PFA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoPFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoPFA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::PFA)> self) -> StdAutoPFA"""
        this = _six_sicd.new_StdAutoPFA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoPFA
    __del__ = lambda self: None
StdAutoPFA_swigregister = _six_sicd.StdAutoPFA_swigregister
StdAutoPFA_swigregister(StdAutoPFA)

class ScopedCopyablePFA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::PFA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePFA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::PFA)> self, PFA ptr=None) -> ScopedCopyablePFA
        __init__(mem::ScopedCopyablePtr<(six::sicd::PFA)> self) -> ScopedCopyablePFA
        __init__(mem::ScopedCopyablePtr<(six::sicd::PFA)> self, ScopedCopyablePFA rhs) -> ScopedCopyablePFA
        """
        this = _six_sicd.new_ScopedCopyablePFA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyablePFA___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyablePFA self) -> PFA"""
        return _six_sicd.ScopedCopyablePFA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyablePFA self) -> PFA"""
        return _six_sicd.ScopedCopyablePFA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyablePFA self) -> PFA"""
        return _six_sicd.ScopedCopyablePFA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyablePFA self, PFA ptr=None)
        reset(ScopedCopyablePFA self)
        """
        return _six_sicd.ScopedCopyablePFA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePFA
    __del__ = lambda self: None
    __swig_setmethods__["focusPlaneNormal"] = _six_sicd.ScopedCopyablePFA_focusPlaneNormal_set
    __swig_getmethods__["focusPlaneNormal"] = _six_sicd.ScopedCopyablePFA_focusPlaneNormal_get
    if _newclass:
        focusPlaneNormal = _swig_property(_six_sicd.ScopedCopyablePFA_focusPlaneNormal_get, _six_sicd.ScopedCopyablePFA_focusPlaneNormal_set)
    __swig_setmethods__["imagePlaneNormal"] = _six_sicd.ScopedCopyablePFA_imagePlaneNormal_set
    __swig_getmethods__["imagePlaneNormal"] = _six_sicd.ScopedCopyablePFA_imagePlaneNormal_get
    if _newclass:
        imagePlaneNormal = _swig_property(_six_sicd.ScopedCopyablePFA_imagePlaneNormal_get, _six_sicd.ScopedCopyablePFA_imagePlaneNormal_set)
    __swig_setmethods__["polarAngleRefTime"] = _six_sicd.ScopedCopyablePFA_polarAngleRefTime_set
    __swig_getmethods__["polarAngleRefTime"] = _six_sicd.ScopedCopyablePFA_polarAngleRefTime_get
    if _newclass:
        polarAngleRefTime = _swig_property(_six_sicd.ScopedCopyablePFA_polarAngleRefTime_get, _six_sicd.ScopedCopyablePFA_polarAngleRefTime_set)
    __swig_setmethods__["polarAnglePoly"] = _six_sicd.ScopedCopyablePFA_polarAnglePoly_set
    __swig_getmethods__["polarAnglePoly"] = _six_sicd.ScopedCopyablePFA_polarAnglePoly_get
    if _newclass:
        polarAnglePoly = _swig_property(_six_sicd.ScopedCopyablePFA_polarAnglePoly_get, _six_sicd.ScopedCopyablePFA_polarAnglePoly_set)
    __swig_setmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.ScopedCopyablePFA_spatialFrequencyScaleFactorPoly_set
    __swig_getmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.ScopedCopyablePFA_spatialFrequencyScaleFactorPoly_get
    if _newclass:
        spatialFrequencyScaleFactorPoly = _swig_property(_six_sicd.ScopedCopyablePFA_spatialFrequencyScaleFactorPoly_get, _six_sicd.ScopedCopyablePFA_spatialFrequencyScaleFactorPoly_set)
    __swig_setmethods__["krg1"] = _six_sicd.ScopedCopyablePFA_krg1_set
    __swig_getmethods__["krg1"] = _six_sicd.ScopedCopyablePFA_krg1_get
    if _newclass:
        krg1 = _swig_property(_six_sicd.ScopedCopyablePFA_krg1_get, _six_sicd.ScopedCopyablePFA_krg1_set)
    __swig_setmethods__["krg2"] = _six_sicd.ScopedCopyablePFA_krg2_set
    __swig_getmethods__["krg2"] = _six_sicd.ScopedCopyablePFA_krg2_get
    if _newclass:
        krg2 = _swig_property(_six_sicd.ScopedCopyablePFA_krg2_get, _six_sicd.ScopedCopyablePFA_krg2_set)
    __swig_setmethods__["kaz1"] = _six_sicd.ScopedCopyablePFA_kaz1_set
    __swig_getmethods__["kaz1"] = _six_sicd.ScopedCopyablePFA_kaz1_get
    if _newclass:
        kaz1 = _swig_property(_six_sicd.ScopedCopyablePFA_kaz1_get, _six_sicd.ScopedCopyablePFA_kaz1_set)
    __swig_setmethods__["kaz2"] = _six_sicd.ScopedCopyablePFA_kaz2_set
    __swig_getmethods__["kaz2"] = _six_sicd.ScopedCopyablePFA_kaz2_get
    if _newclass:
        kaz2 = _swig_property(_six_sicd.ScopedCopyablePFA_kaz2_get, _six_sicd.ScopedCopyablePFA_kaz2_set)
    __swig_setmethods__["slowTimeDeskew"] = _six_sicd.ScopedCopyablePFA_slowTimeDeskew_set
    __swig_getmethods__["slowTimeDeskew"] = _six_sicd.ScopedCopyablePFA_slowTimeDeskew_get
    if _newclass:
        slowTimeDeskew = _swig_property(_six_sicd.ScopedCopyablePFA_slowTimeDeskew_get, _six_sicd.ScopedCopyablePFA_slowTimeDeskew_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyablePFA self, PFA rhs) -> bool"""
        return _six_sicd.ScopedCopyablePFA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyablePFA self, PFA rhs) -> bool"""
        return _six_sicd.ScopedCopyablePFA___ne__(self, rhs)


    def fillDerivedFields(self, position):
        """fillDerivedFields(ScopedCopyablePFA self, Position position)"""
        return _six_sicd.ScopedCopyablePFA_fillDerivedFields(self, position)


    def fillDefaultFields(self, geoData, arg3, scpcoa):
        """fillDefaultFields(ScopedCopyablePFA self, GeoData geoData, Grid arg3, SCPCOA scpcoa)"""
        return _six_sicd.ScopedCopyablePFA_fillDefaultFields(self, geoData, arg3, scpcoa)


    def validate(self, scpcoa, log):
        """validate(ScopedCopyablePFA self, SCPCOA scpcoa, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyablePFA_validate(self, scpcoa, log)

ScopedCopyablePFA_swigregister = _six_sicd.ScopedCopyablePFA_swigregister
ScopedCopyablePFA_swigregister(ScopedCopyablePFA)


def makeScopedCopyablePFA():
    """makeScopedCopyablePFA() -> ScopedCopyablePFA"""
    return _six_sicd.makeScopedCopyablePFA()
class StdAutoRMA(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RMA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRMA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RMA)> self) -> StdAutoRMA"""
        this = _six_sicd.new_StdAutoRMA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRMA
    __del__ = lambda self: None
StdAutoRMA_swigregister = _six_sicd.StdAutoRMA_swigregister
StdAutoRMA_swigregister(StdAutoRMA)

class ScopedCopyableRMA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RMA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMA)> self, RMA ptr=None) -> ScopedCopyableRMA
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMA)> self) -> ScopedCopyableRMA
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMA)> self, ScopedCopyableRMA rhs) -> ScopedCopyableRMA
        """
        this = _six_sicd.new_ScopedCopyableRMA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableRMA___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableRMA self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRMA self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRMA self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRMA self, RMA ptr=None)
        reset(ScopedCopyableRMA self)
        """
        return _six_sicd.ScopedCopyableRMA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMA
    __del__ = lambda self: None
    __swig_setmethods__["algoType"] = _six_sicd.ScopedCopyableRMA_algoType_set
    __swig_getmethods__["algoType"] = _six_sicd.ScopedCopyableRMA_algoType_get
    if _newclass:
        algoType = _swig_property(_six_sicd.ScopedCopyableRMA_algoType_get, _six_sicd.ScopedCopyableRMA_algoType_set)
    __swig_setmethods__["rmat"] = _six_sicd.ScopedCopyableRMA_rmat_set
    __swig_getmethods__["rmat"] = _six_sicd.ScopedCopyableRMA_rmat_get
    if _newclass:
        rmat = _swig_property(_six_sicd.ScopedCopyableRMA_rmat_get, _six_sicd.ScopedCopyableRMA_rmat_set)
    __swig_setmethods__["rmcr"] = _six_sicd.ScopedCopyableRMA_rmcr_set
    __swig_getmethods__["rmcr"] = _six_sicd.ScopedCopyableRMA_rmcr_get
    if _newclass:
        rmcr = _swig_property(_six_sicd.ScopedCopyableRMA_rmcr_get, _six_sicd.ScopedCopyableRMA_rmcr_set)
    __swig_setmethods__["inca"] = _six_sicd.ScopedCopyableRMA_inca_set
    __swig_getmethods__["inca"] = _six_sicd.ScopedCopyableRMA_inca_get
    if _newclass:
        inca = _swig_property(_six_sicd.ScopedCopyableRMA_inca_get, _six_sicd.ScopedCopyableRMA_inca_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableRMA self, RMA rhs) -> bool"""
        return _six_sicd.ScopedCopyableRMA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableRMA self, RMA rhs) -> bool"""
        return _six_sicd.ScopedCopyableRMA___ne__(self, rhs)


    def fillDerivedFields(self, geoData, position):
        """fillDerivedFields(ScopedCopyableRMA self, GeoData geoData, Position position)"""
        return _six_sicd.ScopedCopyableRMA_fillDerivedFields(self, geoData, position)


    def fillDefaultFields(self, scpcoa, fc):
        """fillDefaultFields(ScopedCopyableRMA self, SCPCOA scpcoa, double fc)"""
        return _six_sicd.ScopedCopyableRMA_fillDefaultFields(self, scpcoa, fc)


    def validate(self, collectionInformation, scp, arpPoly, fc, log):
        """validate(ScopedCopyableRMA self, CollectionInformation collectionInformation, Vector3 scp, PolyVector3 arpPoly, double fc, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableRMA_validate(self, collectionInformation, scp, arpPoly, fc, log)

ScopedCopyableRMA_swigregister = _six_sicd.ScopedCopyableRMA_swigregister
ScopedCopyableRMA_swigregister(ScopedCopyableRMA)


def makeScopedCopyableRMA():
    """makeScopedCopyableRMA() -> ScopedCopyableRMA"""
    return _six_sicd.makeScopedCopyableRMA()
class StdAutoRgAzComp(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RgAzComp)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRgAzComp, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RgAzComp)> self) -> StdAutoRgAzComp"""
        this = _six_sicd.new_StdAutoRgAzComp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRgAzComp
    __del__ = lambda self: None
StdAutoRgAzComp_swigregister = _six_sicd.StdAutoRgAzComp_swigregister
StdAutoRgAzComp_swigregister(StdAutoRgAzComp)

class ScopedCopyableRgAzComp(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRgAzComp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> self, RgAzComp ptr=None) -> ScopedCopyableRgAzComp
        __init__(mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> self) -> ScopedCopyableRgAzComp
        __init__(mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> self, ScopedCopyableRgAzComp rhs) -> ScopedCopyableRgAzComp
        """
        this = _six_sicd.new_ScopedCopyableRgAzComp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableRgAzComp___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableRgAzComp self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRgAzComp self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRgAzComp self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRgAzComp self, RgAzComp ptr=None)
        reset(ScopedCopyableRgAzComp self)
        """
        return _six_sicd.ScopedCopyableRgAzComp_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRgAzComp
    __del__ = lambda self: None
    __swig_setmethods__["azSF"] = _six_sicd.ScopedCopyableRgAzComp_azSF_set
    __swig_getmethods__["azSF"] = _six_sicd.ScopedCopyableRgAzComp_azSF_get
    if _newclass:
        azSF = _swig_property(_six_sicd.ScopedCopyableRgAzComp_azSF_get, _six_sicd.ScopedCopyableRgAzComp_azSF_set)
    __swig_setmethods__["kazPoly"] = _six_sicd.ScopedCopyableRgAzComp_kazPoly_set
    __swig_getmethods__["kazPoly"] = _six_sicd.ScopedCopyableRgAzComp_kazPoly_get
    if _newclass:
        kazPoly = _swig_property(_six_sicd.ScopedCopyableRgAzComp_kazPoly_get, _six_sicd.ScopedCopyableRgAzComp_kazPoly_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableRgAzComp self, RgAzComp rhs) -> bool"""
        return _six_sicd.ScopedCopyableRgAzComp___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableRgAzComp self, RgAzComp rhs) -> bool"""
        return _six_sicd.ScopedCopyableRgAzComp___ne__(self, rhs)


    def fillDerivedFields(self, geoData, grid, scpcoa, timeline):
        """fillDerivedFields(ScopedCopyableRgAzComp self, GeoData geoData, Grid grid, SCPCOA scpcoa, Timeline timeline)"""
        return _six_sicd.ScopedCopyableRgAzComp_fillDerivedFields(self, geoData, grid, scpcoa, timeline)


    def validate(self, geoData, grid, scpcoa, timeline, log):
        """validate(ScopedCopyableRgAzComp self, GeoData geoData, Grid grid, SCPCOA scpcoa, Timeline timeline, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableRgAzComp_validate(self, geoData, grid, scpcoa, timeline, log)

ScopedCopyableRgAzComp_swigregister = _six_sicd.ScopedCopyableRgAzComp_swigregister
ScopedCopyableRgAzComp_swigregister(ScopedCopyableRgAzComp)


def makeScopedCopyableRgAzComp():
    """makeScopedCopyableRgAzComp() -> ScopedCopyableRgAzComp"""
    return _six_sicd.makeScopedCopyableRgAzComp()
class StdAutoGeoInfo(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::GeoInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoGeoInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::GeoInfo)> self) -> StdAutoGeoInfo"""
        this = _six_sicd.new_StdAutoGeoInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoGeoInfo
    __del__ = lambda self: None
StdAutoGeoInfo_swigregister = _six_sicd.StdAutoGeoInfo_swigregister
StdAutoGeoInfo_swigregister(StdAutoGeoInfo)

class ScopedCloneableGeoInfo(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGeoInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> self, GeoInfo ptr=None) -> ScopedCloneableGeoInfo
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> self) -> ScopedCloneableGeoInfo
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> self, ScopedCloneableGeoInfo rhs) -> ScopedCloneableGeoInfo
        """
        this = _six_sicd.new_ScopedCloneableGeoInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableGeoInfo self, GeoInfo ptr=None)
        reset(ScopedCloneableGeoInfo self)
        """
        return _six_sicd.ScopedCloneableGeoInfo_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGeoInfo
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo_clone(self)

    __swig_setmethods__["name"] = _six_sicd.ScopedCloneableGeoInfo_name_set
    __swig_getmethods__["name"] = _six_sicd.ScopedCloneableGeoInfo_name_get
    if _newclass:
        name = _swig_property(_six_sicd.ScopedCloneableGeoInfo_name_get, _six_sicd.ScopedCloneableGeoInfo_name_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoInfo_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoInfo_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.ScopedCloneableGeoInfo_geoInfos_get, _six_sicd.ScopedCloneableGeoInfo_geoInfos_set)
    __swig_setmethods__["desc"] = _six_sicd.ScopedCloneableGeoInfo_desc_set
    __swig_getmethods__["desc"] = _six_sicd.ScopedCloneableGeoInfo_desc_get
    if _newclass:
        desc = _swig_property(_six_sicd.ScopedCloneableGeoInfo_desc_get, _six_sicd.ScopedCloneableGeoInfo_desc_set)
    __swig_setmethods__["geometryLatLon"] = _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_set
    __swig_getmethods__["geometryLatLon"] = _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_get
    if _newclass:
        geometryLatLon = _swig_property(_six_sicd.ScopedCloneableGeoInfo_geometryLatLon_get, _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableGeoInfo self, GeoInfo rhs) -> bool"""
        return _six_sicd.ScopedCloneableGeoInfo___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableGeoInfo self, GeoInfo rhs) -> bool"""
        return _six_sicd.ScopedCloneableGeoInfo___ne__(self, rhs)

ScopedCloneableGeoInfo_swigregister = _six_sicd.ScopedCloneableGeoInfo_swigregister
ScopedCloneableGeoInfo_swigregister(ScopedCloneableGeoInfo)


def makeScopedCloneableGeoInfo():
    """makeScopedCloneableGeoInfo() -> ScopedCloneableGeoInfo"""
    return _six_sicd.makeScopedCloneableGeoInfo()
class VectorScopedCloneableGeoInfo(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableGeoInfo, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableGeoInfo self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableGeoInfo self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableGeoInfo self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j) -> VectorScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j)
        __setslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j, VectorScopedCloneableGeoInfo v)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableGeoInfo___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i)
        __delitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice) -> VectorScopedCloneableGeoInfo
        __getitem__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i) -> ScopedCloneableGeoInfo
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice, VectorScopedCloneableGeoInfo v)
        __setitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, ScopedCloneableGeoInfo x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___setitem__(self, *args)


    def pop(self):
        """pop(VectorScopedCloneableGeoInfo self) -> ScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo_pop(self)


    def append(self, x):
        """append(VectorScopedCloneableGeoInfo self, ScopedCloneableGeoInfo x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableGeoInfo self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo_empty(self)


    def size(self):
        """size(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_size(self)


    def swap(self, v):
        """swap(VectorScopedCloneableGeoInfo self, VectorScopedCloneableGeoInfo v)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_swap(self, v)


    def begin(self):
        """begin(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_begin(self)


    def end(self):
        """end(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_rend(self)


    def clear(self):
        """clear(VectorScopedCloneableGeoInfo self)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_clear(self)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableGeoInfo self)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator
        erase(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self) -> VectorScopedCloneableGeoInfo
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self, VectorScopedCloneableGeoInfo arg2) -> VectorScopedCloneableGeoInfo
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type size) -> VectorScopedCloneableGeoInfo
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type size, ScopedCloneableGeoInfo value) -> VectorScopedCloneableGeoInfo
        """
        this = _six_sicd.new_VectorScopedCloneableGeoInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableGeoInfo self, ScopedCloneableGeoInfo x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableGeoInfo self) -> ScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo_front(self)


    def back(self):
        """back(VectorScopedCloneableGeoInfo self) -> ScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type n, ScopedCloneableGeoInfo x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type new_size)
        resize(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type new_size, ScopedCloneableGeoInfo x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator pos, ScopedCloneableGeoInfo x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator
        insert(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type n, ScopedCloneableGeoInfo x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableGeoInfo
    __del__ = lambda self: None
VectorScopedCloneableGeoInfo_swigregister = _six_sicd.VectorScopedCloneableGeoInfo_swigregister
VectorScopedCloneableGeoInfo_swigregister(VectorScopedCloneableGeoInfo)

class VectorLatLon(_object):
    """Proxy of C++ std::vector<(scene::LatLon)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorLatLon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorLatLon, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorLatLon self) -> SwigPyIterator"""
        return _six_sicd.VectorLatLon_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorLatLon self) -> bool"""
        return _six_sicd.VectorLatLon___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorLatLon self) -> bool"""
        return _six_sicd.VectorLatLon___bool__(self)


    def __len__(self):
        """__len__(VectorLatLon self) -> std::vector< scene::LatLon >::size_type"""
        return _six_sicd.VectorLatLon___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j) -> VectorLatLon"""
        return _six_sicd.VectorLatLon___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j)
        __setslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j, VectorLatLon v)
        """
        return _six_sicd.VectorLatLon___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j)"""
        return _six_sicd.VectorLatLon___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i)
        __delitem__(VectorLatLon self, PySliceObject * slice)
        """
        return _six_sicd.VectorLatLon___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorLatLon self, PySliceObject * slice) -> VectorLatLon
        __getitem__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i) -> LatLon
        """
        return _six_sicd.VectorLatLon___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorLatLon self, PySliceObject * slice, VectorLatLon v)
        __setitem__(VectorLatLon self, PySliceObject * slice)
        __setitem__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, LatLon x)
        """
        return _six_sicd.VectorLatLon___setitem__(self, *args)


    def pop(self):
        """pop(VectorLatLon self) -> LatLon"""
        return _six_sicd.VectorLatLon_pop(self)


    def append(self, x):
        """append(VectorLatLon self, LatLon x)"""
        return _six_sicd.VectorLatLon_append(self, x)


    def empty(self):
        """empty(VectorLatLon self) -> bool"""
        return _six_sicd.VectorLatLon_empty(self)


    def size(self):
        """size(VectorLatLon self) -> std::vector< scene::LatLon >::size_type"""
        return _six_sicd.VectorLatLon_size(self)


    def swap(self, v):
        """swap(VectorLatLon self, VectorLatLon v)"""
        return _six_sicd.VectorLatLon_swap(self, v)


    def begin(self):
        """begin(VectorLatLon self) -> std::vector< scene::LatLon >::iterator"""
        return _six_sicd.VectorLatLon_begin(self)


    def end(self):
        """end(VectorLatLon self) -> std::vector< scene::LatLon >::iterator"""
        return _six_sicd.VectorLatLon_end(self)


    def rbegin(self):
        """rbegin(VectorLatLon self) -> std::vector< scene::LatLon >::reverse_iterator"""
        return _six_sicd.VectorLatLon_rbegin(self)


    def rend(self):
        """rend(VectorLatLon self) -> std::vector< scene::LatLon >::reverse_iterator"""
        return _six_sicd.VectorLatLon_rend(self)


    def clear(self):
        """clear(VectorLatLon self)"""
        return _six_sicd.VectorLatLon_clear(self)


    def get_allocator(self):
        """get_allocator(VectorLatLon self) -> std::vector< scene::LatLon >::allocator_type"""
        return _six_sicd.VectorLatLon_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorLatLon self)"""
        return _six_sicd.VectorLatLon_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorLatLon self, std::vector< scene::LatLon >::iterator pos) -> std::vector< scene::LatLon >::iterator
        erase(VectorLatLon self, std::vector< scene::LatLon >::iterator first, std::vector< scene::LatLon >::iterator last) -> std::vector< scene::LatLon >::iterator
        """
        return _six_sicd.VectorLatLon_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(scene::LatLon)> self) -> VectorLatLon
        __init__(std::vector<(scene::LatLon)> self, VectorLatLon arg2) -> VectorLatLon
        __init__(std::vector<(scene::LatLon)> self, std::vector< scene::LatLon >::size_type size) -> VectorLatLon
        __init__(std::vector<(scene::LatLon)> self, std::vector< scene::LatLon >::size_type size, LatLon value) -> VectorLatLon
        """
        this = _six_sicd.new_VectorLatLon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorLatLon self, LatLon x)"""
        return _six_sicd.VectorLatLon_push_back(self, x)


    def front(self):
        """front(VectorLatLon self) -> LatLon"""
        return _six_sicd.VectorLatLon_front(self)


    def back(self):
        """back(VectorLatLon self) -> LatLon"""
        return _six_sicd.VectorLatLon_back(self)


    def assign(self, n, x):
        """assign(VectorLatLon self, std::vector< scene::LatLon >::size_type n, LatLon x)"""
        return _six_sicd.VectorLatLon_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorLatLon self, std::vector< scene::LatLon >::size_type new_size)
        resize(VectorLatLon self, std::vector< scene::LatLon >::size_type new_size, LatLon x)
        """
        return _six_sicd.VectorLatLon_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorLatLon self, std::vector< scene::LatLon >::iterator pos, LatLon x) -> std::vector< scene::LatLon >::iterator
        insert(VectorLatLon self, std::vector< scene::LatLon >::iterator pos, std::vector< scene::LatLon >::size_type n, LatLon x)
        """
        return _six_sicd.VectorLatLon_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorLatLon self, std::vector< scene::LatLon >::size_type n)"""
        return _six_sicd.VectorLatLon_reserve(self, n)


    def capacity(self):
        """capacity(VectorLatLon self) -> std::vector< scene::LatLon >::size_type"""
        return _six_sicd.VectorLatLon_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorLatLon
    __del__ = lambda self: None
VectorLatLon_swigregister = _six_sicd.VectorLatLon_swigregister
VectorLatLon_swigregister(VectorLatLon)

class StdAutoAntennaParameters(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::AntennaParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoAntennaParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::AntennaParameters)> self) -> StdAutoAntennaParameters"""
        this = _six_sicd.new_StdAutoAntennaParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoAntennaParameters
    __del__ = lambda self: None
StdAutoAntennaParameters_swigregister = _six_sicd.StdAutoAntennaParameters_swigregister
StdAutoAntennaParameters_swigregister(StdAutoAntennaParameters)

class ScopedCopyableAntennaParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAntennaParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> self, AntennaParameters ptr=None) -> ScopedCopyableAntennaParameters
        __init__(mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> self) -> ScopedCopyableAntennaParameters
        __init__(mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> self, ScopedCopyableAntennaParameters rhs) -> ScopedCopyableAntennaParameters
        """
        this = _six_sicd.new_ScopedCopyableAntennaParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableAntennaParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableAntennaParameters self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableAntennaParameters self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableAntennaParameters self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableAntennaParameters self, AntennaParameters ptr=None)
        reset(ScopedCopyableAntennaParameters self)
        """
        return _six_sicd.ScopedCopyableAntennaParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableAntennaParameters
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableAntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.ScopedCopyableAntennaParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableAntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.ScopedCopyableAntennaParameters___ne__(self, other)

    __swig_setmethods__["xAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_get
    if _newclass:
        xAxisPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_get, _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_get
    if _newclass:
        yAxisPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_get, _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_set)
    __swig_setmethods__["frequencyZero"] = _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_set
    __swig_getmethods__["frequencyZero"] = _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_get
    if _newclass:
        frequencyZero = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_frequencyZero_get, _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_set)
    __swig_setmethods__["electricalBoresight"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_set
    __swig_getmethods__["electricalBoresight"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_get
    if _newclass:
        electricalBoresight = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_get, _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_set)
    __swig_setmethods__["halfPowerBeamwidths"] = _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_set
    __swig_getmethods__["halfPowerBeamwidths"] = _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_get
    if _newclass:
        halfPowerBeamwidths = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_get, _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_set)
    __swig_setmethods__["array"] = _six_sicd.ScopedCopyableAntennaParameters_array_set
    __swig_getmethods__["array"] = _six_sicd.ScopedCopyableAntennaParameters_array_get
    if _newclass:
        array = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_array_get, _six_sicd.ScopedCopyableAntennaParameters_array_set)
    __swig_setmethods__["element"] = _six_sicd.ScopedCopyableAntennaParameters_element_set
    __swig_getmethods__["element"] = _six_sicd.ScopedCopyableAntennaParameters_element_get
    if _newclass:
        element = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_element_get, _six_sicd.ScopedCopyableAntennaParameters_element_set)
    __swig_setmethods__["gainBSPoly"] = _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_get
    if _newclass:
        gainBSPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_get, _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_set)
    __swig_setmethods__["electricalBoresightFrequencyShift"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set
    __swig_getmethods__["electricalBoresightFrequencyShift"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get
    if _newclass:
        electricalBoresightFrequencyShift = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get, _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set)
    __swig_setmethods__["mainlobeFrequencyDilation"] = _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set
    __swig_getmethods__["mainlobeFrequencyDilation"] = _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get
    if _newclass:
        mainlobeFrequencyDilation = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get, _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set)
ScopedCopyableAntennaParameters_swigregister = _six_sicd.ScopedCopyableAntennaParameters_swigregister
ScopedCopyableAntennaParameters_swigregister(ScopedCopyableAntennaParameters)


def makeScopedCopyableAntennaParameters():
    """makeScopedCopyableAntennaParameters() -> ScopedCopyableAntennaParameters"""
    return _six_sicd.makeScopedCopyableAntennaParameters()
class StdAutoElectricalBoresight(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::ElectricalBoresight)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoElectricalBoresight, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::ElectricalBoresight)> self) -> StdAutoElectricalBoresight"""
        this = _six_sicd.new_StdAutoElectricalBoresight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoElectricalBoresight
    __del__ = lambda self: None
StdAutoElectricalBoresight_swigregister = _six_sicd.StdAutoElectricalBoresight_swigregister
StdAutoElectricalBoresight_swigregister(StdAutoElectricalBoresight)

class ScopedCopyableElectricalBoresight(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableElectricalBoresight, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> self, ElectricalBoresight ptr=None) -> ScopedCopyableElectricalBoresight
        __init__(mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> self) -> ScopedCopyableElectricalBoresight
        __init__(mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> self, ScopedCopyableElectricalBoresight rhs) -> ScopedCopyableElectricalBoresight
        """
        this = _six_sicd.new_ScopedCopyableElectricalBoresight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableElectricalBoresight___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableElectricalBoresight self, ElectricalBoresight ptr=None)
        reset(ScopedCopyableElectricalBoresight self)
        """
        return _six_sicd.ScopedCopyableElectricalBoresight_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableElectricalBoresight
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ScopedCopyableElectricalBoresight___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ScopedCopyableElectricalBoresight___ne__(self, other)

    __swig_setmethods__["dcxPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_set
    __swig_getmethods__["dcxPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_get
    if _newclass:
        dcxPoly = _swig_property(_six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_get, _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_set)
    __swig_setmethods__["dcyPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_set
    __swig_getmethods__["dcyPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_get
    if _newclass:
        dcyPoly = _swig_property(_six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_get, _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_set)
ScopedCopyableElectricalBoresight_swigregister = _six_sicd.ScopedCopyableElectricalBoresight_swigregister
ScopedCopyableElectricalBoresight_swigregister(ScopedCopyableElectricalBoresight)


def makeScopedCopyableElectricalBoresight():
    """makeScopedCopyableElectricalBoresight() -> ScopedCopyableElectricalBoresight"""
    return _six_sicd.makeScopedCopyableElectricalBoresight()
class StdAutoHalfPowerBeamwidths(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::HalfPowerBeamwidths)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoHalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoHalfPowerBeamwidths, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::HalfPowerBeamwidths)> self) -> StdAutoHalfPowerBeamwidths"""
        this = _six_sicd.new_StdAutoHalfPowerBeamwidths()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoHalfPowerBeamwidths
    __del__ = lambda self: None
StdAutoHalfPowerBeamwidths_swigregister = _six_sicd.StdAutoHalfPowerBeamwidths_swigregister
StdAutoHalfPowerBeamwidths_swigregister(StdAutoHalfPowerBeamwidths)

class ScopedCopyableHalfPowerBeamwidths(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableHalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableHalfPowerBeamwidths, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> self, HalfPowerBeamwidths ptr=None) -> ScopedCopyableHalfPowerBeamwidths
        __init__(mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> self) -> ScopedCopyableHalfPowerBeamwidths
        __init__(mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> self, ScopedCopyableHalfPowerBeamwidths rhs) -> ScopedCopyableHalfPowerBeamwidths
        """
        this = _six_sicd.new_ScopedCopyableHalfPowerBeamwidths(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths ptr=None)
        reset(ScopedCopyableHalfPowerBeamwidths self)
        """
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableHalfPowerBeamwidths
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___ne__(self, other)

    __swig_setmethods__["dcx"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_set
    __swig_getmethods__["dcx"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_get
    if _newclass:
        dcx = _swig_property(_six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_get, _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_set)
    __swig_setmethods__["dcy"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_set
    __swig_getmethods__["dcy"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_get
    if _newclass:
        dcy = _swig_property(_six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_get, _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_set)
ScopedCopyableHalfPowerBeamwidths_swigregister = _six_sicd.ScopedCopyableHalfPowerBeamwidths_swigregister
ScopedCopyableHalfPowerBeamwidths_swigregister(ScopedCopyableHalfPowerBeamwidths)


def makeScopedCopyableHalfPowerBeamwidths():
    """makeScopedCopyableHalfPowerBeamwidths() -> ScopedCopyableHalfPowerBeamwidths"""
    return _six_sicd.makeScopedCopyableHalfPowerBeamwidths()
class StdAutoGainAndPhasePolys(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::GainAndPhasePolys)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoGainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoGainAndPhasePolys, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::GainAndPhasePolys)> self) -> StdAutoGainAndPhasePolys"""
        this = _six_sicd.new_StdAutoGainAndPhasePolys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoGainAndPhasePolys
    __del__ = lambda self: None
StdAutoGainAndPhasePolys_swigregister = _six_sicd.StdAutoGainAndPhasePolys_swigregister
StdAutoGainAndPhasePolys_swigregister(StdAutoGainAndPhasePolys)

class ScopedCopyableGainAndPhasePolys(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableGainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableGainAndPhasePolys, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> self, GainAndPhasePolys ptr=None) -> ScopedCopyableGainAndPhasePolys
        __init__(mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> self) -> ScopedCopyableGainAndPhasePolys
        __init__(mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> self, ScopedCopyableGainAndPhasePolys rhs) -> ScopedCopyableGainAndPhasePolys
        """
        this = _six_sicd.new_ScopedCopyableGainAndPhasePolys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableGainAndPhasePolys___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys ptr=None)
        reset(ScopedCopyableGainAndPhasePolys self)
        """
        return _six_sicd.ScopedCopyableGainAndPhasePolys_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableGainAndPhasePolys
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___ne__(self, other)

    __swig_setmethods__["gainPoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_set
    __swig_getmethods__["gainPoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_get
    if _newclass:
        gainPoly = _swig_property(_six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_get, _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_set)
    __swig_setmethods__["phasePoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_set
    __swig_getmethods__["phasePoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_get
    if _newclass:
        phasePoly = _swig_property(_six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_get, _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_set)
ScopedCopyableGainAndPhasePolys_swigregister = _six_sicd.ScopedCopyableGainAndPhasePolys_swigregister
ScopedCopyableGainAndPhasePolys_swigregister(ScopedCopyableGainAndPhasePolys)


def makeScopedCopyableGainAndPhasePolys():
    """makeScopedCopyableGainAndPhasePolys() -> ScopedCopyableGainAndPhasePolys"""
    return _six_sicd.makeScopedCopyableGainAndPhasePolys()
class StdAutoMatchType(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::MatchType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoMatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoMatchType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::MatchType)> self) -> StdAutoMatchType"""
        this = _six_sicd.new_StdAutoMatchType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoMatchType
    __del__ = lambda self: None
StdAutoMatchType_swigregister = _six_sicd.StdAutoMatchType_swigregister
StdAutoMatchType_swigregister(StdAutoMatchType)

class ScopedCopyableMatchType(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::MatchType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableMatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableMatchType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchType)> self, MatchType ptr=None) -> ScopedCopyableMatchType
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchType)> self) -> ScopedCopyableMatchType
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchType)> self, ScopedCopyableMatchType rhs) -> ScopedCopyableMatchType
        """
        this = _six_sicd.new_ScopedCopyableMatchType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableMatchType___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableMatchType self) -> MatchType"""
        return _six_sicd.ScopedCopyableMatchType_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableMatchType self) -> MatchType"""
        return _six_sicd.ScopedCopyableMatchType___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableMatchType self) -> MatchType"""
        return _six_sicd.ScopedCopyableMatchType___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableMatchType self, MatchType ptr=None)
        reset(ScopedCopyableMatchType self)
        """
        return _six_sicd.ScopedCopyableMatchType_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableMatchType
    __del__ = lambda self: None
    __swig_setmethods__["collectorName"] = _six_sicd.ScopedCopyableMatchType_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.ScopedCopyableMatchType_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.ScopedCopyableMatchType_collectorName_get, _six_sicd.ScopedCopyableMatchType_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.ScopedCopyableMatchType_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.ScopedCopyableMatchType_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.ScopedCopyableMatchType_illuminatorName_get, _six_sicd.ScopedCopyableMatchType_illuminatorName_set)
    __swig_setmethods__["matchType"] = _six_sicd.ScopedCopyableMatchType_matchType_set
    __swig_getmethods__["matchType"] = _six_sicd.ScopedCopyableMatchType_matchType_get
    if _newclass:
        matchType = _swig_property(_six_sicd.ScopedCopyableMatchType_matchType_get, _six_sicd.ScopedCopyableMatchType_matchType_set)
    __swig_setmethods__["typeID"] = _six_sicd.ScopedCopyableMatchType_typeID_set
    __swig_getmethods__["typeID"] = _six_sicd.ScopedCopyableMatchType_typeID_get
    if _newclass:
        typeID = _swig_property(_six_sicd.ScopedCopyableMatchType_typeID_get, _six_sicd.ScopedCopyableMatchType_typeID_set)
    __swig_setmethods__["currentIndex"] = _six_sicd.ScopedCopyableMatchType_currentIndex_set
    __swig_getmethods__["currentIndex"] = _six_sicd.ScopedCopyableMatchType_currentIndex_get
    if _newclass:
        currentIndex = _swig_property(_six_sicd.ScopedCopyableMatchType_currentIndex_get, _six_sicd.ScopedCopyableMatchType_currentIndex_set)
    __swig_setmethods__["matchCollects"] = _six_sicd.ScopedCopyableMatchType_matchCollects_set
    __swig_getmethods__["matchCollects"] = _six_sicd.ScopedCopyableMatchType_matchCollects_get
    if _newclass:
        matchCollects = _swig_property(_six_sicd.ScopedCopyableMatchType_matchCollects_get, _six_sicd.ScopedCopyableMatchType_matchCollects_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableMatchType self, MatchType rhs) -> bool"""
        return _six_sicd.ScopedCopyableMatchType___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableMatchType self, MatchType rhs) -> bool"""
        return _six_sicd.ScopedCopyableMatchType___ne__(self, rhs)

ScopedCopyableMatchType_swigregister = _six_sicd.ScopedCopyableMatchType_swigregister
ScopedCopyableMatchType_swigregister(ScopedCopyableMatchType)


def makeScopedCopyableMatchType():
    """makeScopedCopyableMatchType() -> ScopedCopyableMatchType"""
    return _six_sicd.makeScopedCopyableMatchType()
class StdAutoWeightType(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::WeightType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoWeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoWeightType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::WeightType)> self) -> StdAutoWeightType"""
        this = _six_sicd.new_StdAutoWeightType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoWeightType
    __del__ = lambda self: None
StdAutoWeightType_swigregister = _six_sicd.StdAutoWeightType_swigregister
StdAutoWeightType_swigregister(StdAutoWeightType)

class ScopedCopyableWeightType(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::WeightType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableWeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableWeightType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::WeightType)> self, WeightType ptr=None) -> ScopedCopyableWeightType
        __init__(mem::ScopedCopyablePtr<(six::sicd::WeightType)> self) -> ScopedCopyableWeightType
        __init__(mem::ScopedCopyablePtr<(six::sicd::WeightType)> self, ScopedCopyableWeightType rhs) -> ScopedCopyableWeightType
        """
        this = _six_sicd.new_ScopedCopyableWeightType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableWeightType___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableWeightType self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableWeightType self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableWeightType self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableWeightType self, WeightType ptr=None)
        reset(ScopedCopyableWeightType self)
        """
        return _six_sicd.ScopedCopyableWeightType_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableWeightType
    __del__ = lambda self: None
    __swig_setmethods__["windowName"] = _six_sicd.ScopedCopyableWeightType_windowName_set
    __swig_getmethods__["windowName"] = _six_sicd.ScopedCopyableWeightType_windowName_get
    if _newclass:
        windowName = _swig_property(_six_sicd.ScopedCopyableWeightType_windowName_get, _six_sicd.ScopedCopyableWeightType_windowName_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCopyableWeightType_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCopyableWeightType_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.ScopedCopyableWeightType_parameters_get, _six_sicd.ScopedCopyableWeightType_parameters_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableWeightType self, WeightType rhs) -> bool"""
        return _six_sicd.ScopedCopyableWeightType___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableWeightType self, WeightType rhs) -> bool"""
        return _six_sicd.ScopedCopyableWeightType___ne__(self, rhs)

ScopedCopyableWeightType_swigregister = _six_sicd.ScopedCopyableWeightType_swigregister
ScopedCopyableWeightType_swigregister(ScopedCopyableWeightType)


def makeScopedCopyableWeightType():
    """makeScopedCopyableWeightType() -> ScopedCopyableWeightType"""
    return _six_sicd.makeScopedCopyableWeightType()
class VectorPolyXYZ(_object):
    """Proxy of C++ std::vector<(math::poly::OneD<(Vector3)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPolyXYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPolyXYZ, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorPolyXYZ self) -> SwigPyIterator"""
        return _six_sicd.VectorPolyXYZ_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorPolyXYZ self) -> bool"""
        return _six_sicd.VectorPolyXYZ___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorPolyXYZ self) -> bool"""
        return _six_sicd.VectorPolyXYZ___bool__(self)


    def __len__(self):
        """__len__(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type"""
        return _six_sicd.VectorPolyXYZ___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type j) -> VectorPolyXYZ"""
        return _six_sicd.VectorPolyXYZ___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type j)
        __setslice__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type j, VectorPolyXYZ v)
        """
        return _six_sicd.VectorPolyXYZ___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type j)"""
        return _six_sicd.VectorPolyXYZ___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i)
        __delitem__(VectorPolyXYZ self, PySliceObject * slice)
        """
        return _six_sicd.VectorPolyXYZ___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorPolyXYZ self, PySliceObject * slice) -> VectorPolyXYZ
        __getitem__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i) -> PolyVector3
        """
        return _six_sicd.VectorPolyXYZ___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorPolyXYZ self, PySliceObject * slice, VectorPolyXYZ v)
        __setitem__(VectorPolyXYZ self, PySliceObject * slice)
        __setitem__(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::difference_type i, PolyVector3 x)
        """
        return _six_sicd.VectorPolyXYZ___setitem__(self, *args)


    def pop(self):
        """pop(VectorPolyXYZ self) -> PolyVector3"""
        return _six_sicd.VectorPolyXYZ_pop(self)


    def append(self, x):
        """append(VectorPolyXYZ self, PolyVector3 x)"""
        return _six_sicd.VectorPolyXYZ_append(self, x)


    def empty(self):
        """empty(VectorPolyXYZ self) -> bool"""
        return _six_sicd.VectorPolyXYZ_empty(self)


    def size(self):
        """size(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type"""
        return _six_sicd.VectorPolyXYZ_size(self)


    def swap(self, v):
        """swap(VectorPolyXYZ self, VectorPolyXYZ v)"""
        return _six_sicd.VectorPolyXYZ_swap(self, v)


    def begin(self):
        """begin(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator"""
        return _six_sicd.VectorPolyXYZ_begin(self)


    def end(self):
        """end(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator"""
        return _six_sicd.VectorPolyXYZ_end(self)


    def rbegin(self):
        """rbegin(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::reverse_iterator"""
        return _six_sicd.VectorPolyXYZ_rbegin(self)


    def rend(self):
        """rend(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::reverse_iterator"""
        return _six_sicd.VectorPolyXYZ_rend(self)


    def clear(self):
        """clear(VectorPolyXYZ self)"""
        return _six_sicd.VectorPolyXYZ_clear(self)


    def get_allocator(self):
        """get_allocator(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::allocator_type"""
        return _six_sicd.VectorPolyXYZ_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorPolyXYZ self)"""
        return _six_sicd.VectorPolyXYZ_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator pos) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator
        erase(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator first, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator last) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator
        """
        return _six_sicd.VectorPolyXYZ_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(math::poly::OneD<(Vector3)>)> self) -> VectorPolyXYZ
        __init__(std::vector<(math::poly::OneD<(Vector3)>)> self, VectorPolyXYZ arg2) -> VectorPolyXYZ
        __init__(std::vector<(math::poly::OneD<(Vector3)>)> self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type size) -> VectorPolyXYZ
        __init__(std::vector<(math::poly::OneD<(Vector3)>)> self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type size, PolyVector3 value) -> VectorPolyXYZ
        """
        this = _six_sicd.new_VectorPolyXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorPolyXYZ self, PolyVector3 x)"""
        return _six_sicd.VectorPolyXYZ_push_back(self, x)


    def front(self):
        """front(VectorPolyXYZ self) -> PolyVector3"""
        return _six_sicd.VectorPolyXYZ_front(self)


    def back(self):
        """back(VectorPolyXYZ self) -> PolyVector3"""
        return _six_sicd.VectorPolyXYZ_back(self)


    def assign(self, n, x):
        """assign(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type n, PolyVector3 x)"""
        return _six_sicd.VectorPolyXYZ_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type new_size)
        resize(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type new_size, PolyVector3 x)
        """
        return _six_sicd.VectorPolyXYZ_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator pos, PolyVector3 x) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator
        insert(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::iterator pos, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type n, PolyVector3 x)
        """
        return _six_sicd.VectorPolyXYZ_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorPolyXYZ self, std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type n)"""
        return _six_sicd.VectorPolyXYZ_reserve(self, n)


    def capacity(self):
        """capacity(VectorPolyXYZ self) -> std::vector< math::poly::OneD< math::linear::VectorN< 3,double > > >::size_type"""
        return _six_sicd.VectorPolyXYZ_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorPolyXYZ
    __del__ = lambda self: None
VectorPolyXYZ_swigregister = _six_sicd.VectorPolyXYZ_swigregister
VectorPolyXYZ_swigregister(VectorPolyXYZ)

class StdAutoDirectionParameters(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::DirectionParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::DirectionParameters)> self) -> StdAutoDirectionParameters"""
        this = _six_sicd.new_StdAutoDirectionParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoDirectionParameters
    __del__ = lambda self: None
StdAutoDirectionParameters_swigregister = _six_sicd.StdAutoDirectionParameters_swigregister
StdAutoDirectionParameters_swigregister(StdAutoDirectionParameters)

class ScopedCloneableDirectionParameters(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> self, DirectionParameters ptr=None) -> ScopedCloneableDirectionParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> self) -> ScopedCloneableDirectionParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> self, ScopedCloneableDirectionParameters rhs) -> ScopedCloneableDirectionParameters
        """
        this = _six_sicd.new_ScopedCloneableDirectionParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableDirectionParameters self) -> DirectionParameters"""
        return _six_sicd.ScopedCloneableDirectionParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableDirectionParameters self) -> DirectionParameters"""
        return _six_sicd.ScopedCloneableDirectionParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableDirectionParameters self) -> DirectionParameters"""
        return _six_sicd.ScopedCloneableDirectionParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableDirectionParameters self, DirectionParameters ptr=None)
        reset(ScopedCloneableDirectionParameters self)
        """
        return _six_sicd.ScopedCloneableDirectionParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableDirectionParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableDirectionParameters self) -> DirectionParameters"""
        return _six_sicd.ScopedCloneableDirectionParameters_clone(self)

    __swig_setmethods__["unitVector"] = _six_sicd.ScopedCloneableDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.ScopedCloneableDirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_unitVector_get, _six_sicd.ScopedCloneableDirectionParameters_unitVector_set)
    __swig_setmethods__["sampleSpacing"] = _six_sicd.ScopedCloneableDirectionParameters_sampleSpacing_set
    __swig_getmethods__["sampleSpacing"] = _six_sicd.ScopedCloneableDirectionParameters_sampleSpacing_get
    if _newclass:
        sampleSpacing = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_sampleSpacing_get, _six_sicd.ScopedCloneableDirectionParameters_sampleSpacing_set)
    __swig_setmethods__["impulseResponseWidth"] = _six_sicd.ScopedCloneableDirectionParameters_impulseResponseWidth_set
    __swig_getmethods__["impulseResponseWidth"] = _six_sicd.ScopedCloneableDirectionParameters_impulseResponseWidth_get
    if _newclass:
        impulseResponseWidth = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_impulseResponseWidth_get, _six_sicd.ScopedCloneableDirectionParameters_impulseResponseWidth_set)
    __swig_setmethods__["sign"] = _six_sicd.ScopedCloneableDirectionParameters_sign_set
    __swig_getmethods__["sign"] = _six_sicd.ScopedCloneableDirectionParameters_sign_get
    if _newclass:
        sign = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_sign_get, _six_sicd.ScopedCloneableDirectionParameters_sign_set)
    __swig_setmethods__["impulseResponseBandwidth"] = _six_sicd.ScopedCloneableDirectionParameters_impulseResponseBandwidth_set
    __swig_getmethods__["impulseResponseBandwidth"] = _six_sicd.ScopedCloneableDirectionParameters_impulseResponseBandwidth_get
    if _newclass:
        impulseResponseBandwidth = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_impulseResponseBandwidth_get, _six_sicd.ScopedCloneableDirectionParameters_impulseResponseBandwidth_set)
    __swig_setmethods__["kCenter"] = _six_sicd.ScopedCloneableDirectionParameters_kCenter_set
    __swig_getmethods__["kCenter"] = _six_sicd.ScopedCloneableDirectionParameters_kCenter_get
    if _newclass:
        kCenter = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_kCenter_get, _six_sicd.ScopedCloneableDirectionParameters_kCenter_set)
    __swig_setmethods__["deltaK1"] = _six_sicd.ScopedCloneableDirectionParameters_deltaK1_set
    __swig_getmethods__["deltaK1"] = _six_sicd.ScopedCloneableDirectionParameters_deltaK1_get
    if _newclass:
        deltaK1 = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_deltaK1_get, _six_sicd.ScopedCloneableDirectionParameters_deltaK1_set)
    __swig_setmethods__["deltaK2"] = _six_sicd.ScopedCloneableDirectionParameters_deltaK2_set
    __swig_getmethods__["deltaK2"] = _six_sicd.ScopedCloneableDirectionParameters_deltaK2_get
    if _newclass:
        deltaK2 = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_deltaK2_get, _six_sicd.ScopedCloneableDirectionParameters_deltaK2_set)
    __swig_setmethods__["deltaKCOAPoly"] = _six_sicd.ScopedCloneableDirectionParameters_deltaKCOAPoly_set
    __swig_getmethods__["deltaKCOAPoly"] = _six_sicd.ScopedCloneableDirectionParameters_deltaKCOAPoly_get
    if _newclass:
        deltaKCOAPoly = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_deltaKCOAPoly_get, _six_sicd.ScopedCloneableDirectionParameters_deltaKCOAPoly_set)
    __swig_setmethods__["weightType"] = _six_sicd.ScopedCloneableDirectionParameters_weightType_set
    __swig_getmethods__["weightType"] = _six_sicd.ScopedCloneableDirectionParameters_weightType_get
    if _newclass:
        weightType = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_weightType_get, _six_sicd.ScopedCloneableDirectionParameters_weightType_set)
    __swig_setmethods__["weights"] = _six_sicd.ScopedCloneableDirectionParameters_weights_set
    __swig_getmethods__["weights"] = _six_sicd.ScopedCloneableDirectionParameters_weights_get
    if _newclass:
        weights = _swig_property(_six_sicd.ScopedCloneableDirectionParameters_weights_get, _six_sicd.ScopedCloneableDirectionParameters_weights_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableDirectionParameters self, DirectionParameters rhs) -> bool"""
        return _six_sicd.ScopedCloneableDirectionParameters___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableDirectionParameters self, DirectionParameters rhs) -> bool"""
        return _six_sicd.ScopedCloneableDirectionParameters___ne__(self, rhs)


    def validate(self, *args):
        """
        validate(ScopedCloneableDirectionParameters self, ImageData imageData, logging::Logger & log) -> bool
        validate(ScopedCloneableDirectionParameters self, RgAzComp rgAzComp, logging::Logger & log, double offset=0) -> bool
        validate(ScopedCloneableDirectionParameters self, RgAzComp rgAzComp, logging::Logger & log) -> bool
        """
        return _six_sicd.ScopedCloneableDirectionParameters_validate(self, *args)


    def fillDerivedFields(self, *args):
        """
        fillDerivedFields(ScopedCloneableDirectionParameters self, ImageData imageData)
        fillDerivedFields(ScopedCloneableDirectionParameters self, RgAzComp rgAzComp, double offset=0)
        fillDerivedFields(ScopedCloneableDirectionParameters self, RgAzComp rgAzComp)
        """
        return _six_sicd.ScopedCloneableDirectionParameters_fillDerivedFields(self, *args)

ScopedCloneableDirectionParameters_swigregister = _six_sicd.ScopedCloneableDirectionParameters_swigregister
ScopedCloneableDirectionParameters_swigregister(ScopedCloneableDirectionParameters)


def makeScopedCloneableDirectionParameters():
    """makeScopedCloneableDirectionParameters() -> ScopedCloneableDirectionParameters"""
    return _six_sicd.makeScopedCloneableDirectionParameters()
class StdAutoAreaPlane(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::AreaPlane)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoAreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoAreaPlane, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::AreaPlane)> self) -> StdAutoAreaPlane"""
        this = _six_sicd.new_StdAutoAreaPlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoAreaPlane
    __del__ = lambda self: None
StdAutoAreaPlane_swigregister = _six_sicd.StdAutoAreaPlane_swigregister
StdAutoAreaPlane_swigregister(StdAutoAreaPlane)

class ScopedCloneableAreaPlane(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::AreaPlane)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableAreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableAreaPlane, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::AreaPlane)> self, AreaPlane ptr=None) -> ScopedCloneableAreaPlane
        __init__(mem::ScopedCloneablePtr<(six::sicd::AreaPlane)> self) -> ScopedCloneableAreaPlane
        __init__(mem::ScopedCloneablePtr<(six::sicd::AreaPlane)> self, ScopedCloneableAreaPlane rhs) -> ScopedCloneableAreaPlane
        """
        this = _six_sicd.new_ScopedCloneableAreaPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableAreaPlane self) -> AreaPlane"""
        return _six_sicd.ScopedCloneableAreaPlane_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableAreaPlane self) -> AreaPlane"""
        return _six_sicd.ScopedCloneableAreaPlane___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableAreaPlane self) -> AreaPlane"""
        return _six_sicd.ScopedCloneableAreaPlane___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableAreaPlane self, AreaPlane ptr=None)
        reset(ScopedCloneableAreaPlane self)
        """
        return _six_sicd.ScopedCloneableAreaPlane_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableAreaPlane
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableAreaPlane self) -> AreaPlane"""
        return _six_sicd.ScopedCloneableAreaPlane_clone(self)


    def getAdjustedReferencePoint(self):
        """getAdjustedReferencePoint(ScopedCloneableAreaPlane self) -> RowColDouble"""
        return _six_sicd.ScopedCloneableAreaPlane_getAdjustedReferencePoint(self)

    __swig_setmethods__["referencePoint"] = _six_sicd.ScopedCloneableAreaPlane_referencePoint_set
    __swig_getmethods__["referencePoint"] = _six_sicd.ScopedCloneableAreaPlane_referencePoint_get
    if _newclass:
        referencePoint = _swig_property(_six_sicd.ScopedCloneableAreaPlane_referencePoint_get, _six_sicd.ScopedCloneableAreaPlane_referencePoint_set)
    __swig_setmethods__["xDirection"] = _six_sicd.ScopedCloneableAreaPlane_xDirection_set
    __swig_getmethods__["xDirection"] = _six_sicd.ScopedCloneableAreaPlane_xDirection_get
    if _newclass:
        xDirection = _swig_property(_six_sicd.ScopedCloneableAreaPlane_xDirection_get, _six_sicd.ScopedCloneableAreaPlane_xDirection_set)
    __swig_setmethods__["yDirection"] = _six_sicd.ScopedCloneableAreaPlane_yDirection_set
    __swig_getmethods__["yDirection"] = _six_sicd.ScopedCloneableAreaPlane_yDirection_get
    if _newclass:
        yDirection = _swig_property(_six_sicd.ScopedCloneableAreaPlane_yDirection_get, _six_sicd.ScopedCloneableAreaPlane_yDirection_set)
    __swig_setmethods__["segmentList"] = _six_sicd.ScopedCloneableAreaPlane_segmentList_set
    __swig_getmethods__["segmentList"] = _six_sicd.ScopedCloneableAreaPlane_segmentList_get
    if _newclass:
        segmentList = _swig_property(_six_sicd.ScopedCloneableAreaPlane_segmentList_get, _six_sicd.ScopedCloneableAreaPlane_segmentList_set)
    __swig_setmethods__["orientation"] = _six_sicd.ScopedCloneableAreaPlane_orientation_set
    __swig_getmethods__["orientation"] = _six_sicd.ScopedCloneableAreaPlane_orientation_get
    if _newclass:
        orientation = _swig_property(_six_sicd.ScopedCloneableAreaPlane_orientation_get, _six_sicd.ScopedCloneableAreaPlane_orientation_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableAreaPlane self, AreaPlane rhs) -> bool"""
        return _six_sicd.ScopedCloneableAreaPlane___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableAreaPlane self, AreaPlane rhs) -> bool"""
        return _six_sicd.ScopedCloneableAreaPlane___ne__(self, rhs)


    def getSegment(self, segmentId):
        """getSegment(ScopedCloneableAreaPlane self, std::string const & segmentId) -> Segment"""
        return _six_sicd.ScopedCloneableAreaPlane_getSegment(self, segmentId)


    def rotateCCW(self):
        """rotateCCW(ScopedCloneableAreaPlane self)"""
        return _six_sicd.ScopedCloneableAreaPlane_rotateCCW(self)


    def rotateToShadowsDown(self):
        """rotateToShadowsDown(ScopedCloneableAreaPlane self)"""
        return _six_sicd.ScopedCloneableAreaPlane_rotateToShadowsDown(self)

ScopedCloneableAreaPlane_swigregister = _six_sicd.ScopedCloneableAreaPlane_swigregister
ScopedCloneableAreaPlane_swigregister(ScopedCloneableAreaPlane)


def makeScopedCloneableAreaPlane():
    """makeScopedCloneableAreaPlane() -> ScopedCloneableAreaPlane"""
    return _six_sicd.makeScopedCloneableAreaPlane()
class StdAutoAreaDirectionParameters(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::AreaDirectionParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoAreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoAreaDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::AreaDirectionParameters)> self) -> StdAutoAreaDirectionParameters"""
        this = _six_sicd.new_StdAutoAreaDirectionParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoAreaDirectionParameters
    __del__ = lambda self: None
StdAutoAreaDirectionParameters_swigregister = _six_sicd.StdAutoAreaDirectionParameters_swigregister
StdAutoAreaDirectionParameters_swigregister(StdAutoAreaDirectionParameters)

class ScopedCloneableAreaDirectionParameters(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableAreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableAreaDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)> self, AreaDirectionParameters ptr=None) -> ScopedCloneableAreaDirectionParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)> self) -> ScopedCloneableAreaDirectionParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)> self, ScopedCloneableAreaDirectionParameters rhs) -> ScopedCloneableAreaDirectionParameters
        """
        this = _six_sicd.new_ScopedCloneableAreaDirectionParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters ptr=None)
        reset(ScopedCloneableAreaDirectionParameters self)
        """
        return _six_sicd.ScopedCloneableAreaDirectionParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableAreaDirectionParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_clone(self)

    __swig_setmethods__["unitVector"] = _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_get, _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_set)
    __swig_setmethods__["spacing"] = _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_set
    __swig_getmethods__["spacing"] = _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_get
    if _newclass:
        spacing = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_spacing_get, _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_set)
    __swig_setmethods__["elements"] = _six_sicd.ScopedCloneableAreaDirectionParameters_elements_set
    __swig_getmethods__["elements"] = _six_sicd.ScopedCloneableAreaDirectionParameters_elements_get
    if _newclass:
        elements = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_elements_get, _six_sicd.ScopedCloneableAreaDirectionParameters_elements_set)
    __swig_setmethods__["first"] = _six_sicd.ScopedCloneableAreaDirectionParameters_first_set
    __swig_getmethods__["first"] = _six_sicd.ScopedCloneableAreaDirectionParameters_first_get
    if _newclass:
        first = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_first_get, _six_sicd.ScopedCloneableAreaDirectionParameters_first_set)

    def getExtentInMeters(self):
        """getExtentInMeters(ScopedCloneableAreaDirectionParameters self) -> double"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_getExtentInMeters(self)


    def __eq__(self, other):
        """__eq__(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___ne__(self, other)

ScopedCloneableAreaDirectionParameters_swigregister = _six_sicd.ScopedCloneableAreaDirectionParameters_swigregister
ScopedCloneableAreaDirectionParameters_swigregister(ScopedCloneableAreaDirectionParameters)


def makeScopedCloneableAreaDirectionParameters():
    """makeScopedCloneableAreaDirectionParameters() -> ScopedCloneableAreaDirectionParameters"""
    return _six_sicd.makeScopedCloneableAreaDirectionParameters()
class StdAutoSegment(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Segment)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoSegment, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Segment)> self) -> StdAutoSegment"""
        this = _six_sicd.new_StdAutoSegment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoSegment
    __del__ = lambda self: None
StdAutoSegment_swigregister = _six_sicd.StdAutoSegment_swigregister
StdAutoSegment_swigregister(StdAutoSegment)

class ScopedCloneableSegment(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Segment)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableSegment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Segment)> self, Segment ptr=None) -> ScopedCloneableSegment
        __init__(mem::ScopedCloneablePtr<(six::sicd::Segment)> self) -> ScopedCloneableSegment
        __init__(mem::ScopedCloneablePtr<(six::sicd::Segment)> self, ScopedCloneableSegment rhs) -> ScopedCloneableSegment
        """
        this = _six_sicd.new_ScopedCloneableSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableSegment self, Segment ptr=None)
        reset(ScopedCloneableSegment self)
        """
        return _six_sicd.ScopedCloneableSegment_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableSegment
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment_clone(self)


    def getNumLines(self):
        """getNumLines(ScopedCloneableSegment self) -> size_t"""
        return _six_sicd.ScopedCloneableSegment_getNumLines(self)


    def getNumSamples(self):
        """getNumSamples(ScopedCloneableSegment self) -> size_t"""
        return _six_sicd.ScopedCloneableSegment_getNumSamples(self)

    __swig_setmethods__["startLine"] = _six_sicd.ScopedCloneableSegment_startLine_set
    __swig_getmethods__["startLine"] = _six_sicd.ScopedCloneableSegment_startLine_get
    if _newclass:
        startLine = _swig_property(_six_sicd.ScopedCloneableSegment_startLine_get, _six_sicd.ScopedCloneableSegment_startLine_set)
    __swig_setmethods__["startSample"] = _six_sicd.ScopedCloneableSegment_startSample_set
    __swig_getmethods__["startSample"] = _six_sicd.ScopedCloneableSegment_startSample_get
    if _newclass:
        startSample = _swig_property(_six_sicd.ScopedCloneableSegment_startSample_get, _six_sicd.ScopedCloneableSegment_startSample_set)
    __swig_setmethods__["endLine"] = _six_sicd.ScopedCloneableSegment_endLine_set
    __swig_getmethods__["endLine"] = _six_sicd.ScopedCloneableSegment_endLine_get
    if _newclass:
        endLine = _swig_property(_six_sicd.ScopedCloneableSegment_endLine_get, _six_sicd.ScopedCloneableSegment_endLine_set)
    __swig_setmethods__["endSample"] = _six_sicd.ScopedCloneableSegment_endSample_set
    __swig_getmethods__["endSample"] = _six_sicd.ScopedCloneableSegment_endSample_get
    if _newclass:
        endSample = _swig_property(_six_sicd.ScopedCloneableSegment_endSample_get, _six_sicd.ScopedCloneableSegment_endSample_set)
    __swig_setmethods__["identifier"] = _six_sicd.ScopedCloneableSegment_identifier_set
    __swig_getmethods__["identifier"] = _six_sicd.ScopedCloneableSegment_identifier_get
    if _newclass:
        identifier = _swig_property(_six_sicd.ScopedCloneableSegment_identifier_get, _six_sicd.ScopedCloneableSegment_identifier_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableSegment self, Segment rhs) -> bool"""
        return _six_sicd.ScopedCloneableSegment___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableSegment self, Segment rhs) -> bool"""
        return _six_sicd.ScopedCloneableSegment___ne__(self, rhs)


    def rotateCCW(self, numColumns):
        """rotateCCW(ScopedCloneableSegment self, size_t numColumns)"""
        return _six_sicd.ScopedCloneableSegment_rotateCCW(self, numColumns)

ScopedCloneableSegment_swigregister = _six_sicd.ScopedCloneableSegment_swigregister
ScopedCloneableSegment_swigregister(ScopedCloneableSegment)


def makeScopedCloneableSegment():
    """makeScopedCloneableSegment() -> ScopedCloneableSegment"""
    return _six_sicd.makeScopedCloneableSegment()
class StdAutoTxStep(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::TxStep)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTxStep, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::TxStep)> self) -> StdAutoTxStep"""
        this = _six_sicd.new_StdAutoTxStep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoTxStep
    __del__ = lambda self: None
StdAutoTxStep_swigregister = _six_sicd.StdAutoTxStep_swigregister
StdAutoTxStep_swigregister(StdAutoTxStep)

class ScopedCloneableTxStep(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::TxStep)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableTxStep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::TxStep)> self, TxStep ptr=None) -> ScopedCloneableTxStep
        __init__(mem::ScopedCloneablePtr<(six::sicd::TxStep)> self) -> ScopedCloneableTxStep
        __init__(mem::ScopedCloneablePtr<(six::sicd::TxStep)> self, ScopedCloneableTxStep rhs) -> ScopedCloneableTxStep
        """
        this = _six_sicd.new_ScopedCloneableTxStep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableTxStep self, TxStep ptr=None)
        reset(ScopedCloneableTxStep self)
        """
        return _six_sicd.ScopedCloneableTxStep_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableTxStep
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep_clone(self)

    __swig_setmethods__["waveformIndex"] = _six_sicd.ScopedCloneableTxStep_waveformIndex_set
    __swig_getmethods__["waveformIndex"] = _six_sicd.ScopedCloneableTxStep_waveformIndex_get
    if _newclass:
        waveformIndex = _swig_property(_six_sicd.ScopedCloneableTxStep_waveformIndex_get, _six_sicd.ScopedCloneableTxStep_waveformIndex_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.ScopedCloneableTxStep_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.ScopedCloneableTxStep_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.ScopedCloneableTxStep_txPolarization_get, _six_sicd.ScopedCloneableTxStep_txPolarization_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableTxStep self, TxStep rhs) -> bool"""
        return _six_sicd.ScopedCloneableTxStep___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableTxStep self, TxStep rhs) -> bool"""
        return _six_sicd.ScopedCloneableTxStep___ne__(self, rhs)

ScopedCloneableTxStep_swigregister = _six_sicd.ScopedCloneableTxStep_swigregister
ScopedCloneableTxStep_swigregister(ScopedCloneableTxStep)


def makeScopedCloneableTxStep():
    """makeScopedCloneableTxStep() -> ScopedCloneableTxStep"""
    return _six_sicd.makeScopedCloneableTxStep()
class StdAutoWaveformParameters(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::WaveformParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoWaveformParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::WaveformParameters)> self) -> StdAutoWaveformParameters"""
        this = _six_sicd.new_StdAutoWaveformParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoWaveformParameters
    __del__ = lambda self: None
StdAutoWaveformParameters_swigregister = _six_sicd.StdAutoWaveformParameters_swigregister
StdAutoWaveformParameters_swigregister(StdAutoWaveformParameters)

class ScopedCloneableWaveformParameters(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableWaveformParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> self, WaveformParameters ptr=None) -> ScopedCloneableWaveformParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> self) -> ScopedCloneableWaveformParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> self, ScopedCloneableWaveformParameters rhs) -> ScopedCloneableWaveformParameters
        """
        this = _six_sicd.new_ScopedCloneableWaveformParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableWaveformParameters self, WaveformParameters ptr=None)
        reset(ScopedCloneableWaveformParameters self)
        """
        return _six_sicd.ScopedCloneableWaveformParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableWaveformParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters_clone(self)

    __swig_setmethods__["txPulseLength"] = _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_set
    __swig_getmethods__["txPulseLength"] = _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_get
    if _newclass:
        txPulseLength = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txPulseLength_get, _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_set)
    __swig_setmethods__["txRFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_set
    __swig_getmethods__["txRFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_get
    if _newclass:
        txRFBandwidth = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_get, _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_set)
    __swig_setmethods__["txFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_set
    __swig_getmethods__["txFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_get
    if _newclass:
        txFrequencyStart = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_get, _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_set)
    __swig_setmethods__["txFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_txFMRate_set
    __swig_getmethods__["txFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_txFMRate_get
    if _newclass:
        txFMRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txFMRate_get, _six_sicd.ScopedCloneableWaveformParameters_txFMRate_set)
    __swig_setmethods__["rcvDemodType"] = _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_set
    __swig_getmethods__["rcvDemodType"] = _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_get
    if _newclass:
        rcvDemodType = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_get, _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_set)
    __swig_setmethods__["rcvWindowLength"] = _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_set
    __swig_getmethods__["rcvWindowLength"] = _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_get
    if _newclass:
        rcvWindowLength = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_get, _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_set)
    __swig_setmethods__["adcSampleRate"] = _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_set
    __swig_getmethods__["adcSampleRate"] = _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_get
    if _newclass:
        adcSampleRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_get, _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_set)
    __swig_setmethods__["rcvIFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_set
    __swig_getmethods__["rcvIFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_get
    if _newclass:
        rcvIFBandwidth = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_get, _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_set)
    __swig_setmethods__["rcvFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_set
    __swig_getmethods__["rcvFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_get
    if _newclass:
        rcvFrequencyStart = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_get, _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_set)
    __swig_setmethods__["rcvFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_set
    __swig_getmethods__["rcvFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_get
    if _newclass:
        rcvFMRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_get, _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableWaveformParameters self, WaveformParameters rhs) -> bool"""
        return _six_sicd.ScopedCloneableWaveformParameters___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableWaveformParameters self, WaveformParameters rhs) -> bool"""
        return _six_sicd.ScopedCloneableWaveformParameters___ne__(self, rhs)


    def fillDerivedFields(self):
        """fillDerivedFields(ScopedCloneableWaveformParameters self)"""
        return _six_sicd.ScopedCloneableWaveformParameters_fillDerivedFields(self)


    def validate(self, refFrequencyIndex, log):
        """validate(ScopedCloneableWaveformParameters self, int refFrequencyIndex, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCloneableWaveformParameters_validate(self, refFrequencyIndex, log)

ScopedCloneableWaveformParameters_swigregister = _six_sicd.ScopedCloneableWaveformParameters_swigregister
ScopedCloneableWaveformParameters_swigregister(ScopedCloneableWaveformParameters)


def makeScopedCloneableWaveformParameters():
    """makeScopedCloneableWaveformParameters() -> ScopedCloneableWaveformParameters"""
    return _six_sicd.makeScopedCloneableWaveformParameters()
class StdAutoArea(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Area)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoArea, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Area)> self) -> StdAutoArea"""
        this = _six_sicd.new_StdAutoArea()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoArea
    __del__ = lambda self: None
StdAutoArea_swigregister = _six_sicd.StdAutoArea_swigregister
StdAutoArea_swigregister(StdAutoArea)

class ScopedCloneableArea(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Area)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Area)> self, Area ptr=None) -> ScopedCloneableArea
        __init__(mem::ScopedCloneablePtr<(six::sicd::Area)> self) -> ScopedCloneableArea
        __init__(mem::ScopedCloneablePtr<(six::sicd::Area)> self, ScopedCloneableArea rhs) -> ScopedCloneableArea
        """
        this = _six_sicd.new_ScopedCloneableArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableArea self, Area ptr=None)
        reset(ScopedCloneableArea self)
        """
        return _six_sicd.ScopedCloneableArea_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableArea
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea_clone(self)

    __swig_setmethods__["acpCorners"] = _six_sicd.ScopedCloneableArea_acpCorners_set
    __swig_getmethods__["acpCorners"] = _six_sicd.ScopedCloneableArea_acpCorners_get
    if _newclass:
        acpCorners = _swig_property(_six_sicd.ScopedCloneableArea_acpCorners_get, _six_sicd.ScopedCloneableArea_acpCorners_set)
    __swig_setmethods__["plane"] = _six_sicd.ScopedCloneableArea_plane_set
    __swig_getmethods__["plane"] = _six_sicd.ScopedCloneableArea_plane_get
    if _newclass:
        plane = _swig_property(_six_sicd.ScopedCloneableArea_plane_get, _six_sicd.ScopedCloneableArea_plane_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableArea self, Area rhs) -> bool"""
        return _six_sicd.ScopedCloneableArea___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableArea self, Area rhs) -> bool"""
        return _six_sicd.ScopedCloneableArea___ne__(self, rhs)

ScopedCloneableArea_swigregister = _six_sicd.ScopedCloneableArea_swigregister
ScopedCloneableArea_swigregister(ScopedCloneableArea)


def makeScopedCloneableArea():
    """makeScopedCloneableArea() -> ScopedCloneableArea"""
    return _six_sicd.makeScopedCloneableArea()
class StdAutoChannelParameters(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::ChannelParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoChannelParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::ChannelParameters)> self) -> StdAutoChannelParameters"""
        this = _six_sicd.new_StdAutoChannelParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoChannelParameters
    __del__ = lambda self: None
StdAutoChannelParameters_swigregister = _six_sicd.StdAutoChannelParameters_swigregister
StdAutoChannelParameters_swigregister(StdAutoChannelParameters)

class ScopedCloneableChannelParameters(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableChannelParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> self, ChannelParameters ptr=None) -> ScopedCloneableChannelParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> self) -> ScopedCloneableChannelParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> self, ScopedCloneableChannelParameters rhs) -> ScopedCloneableChannelParameters
        """
        this = _six_sicd.new_ScopedCloneableChannelParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableChannelParameters self, ChannelParameters ptr=None)
        reset(ScopedCloneableChannelParameters self)
        """
        return _six_sicd.ScopedCloneableChannelParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableChannelParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters_clone(self)

    __swig_setmethods__["txRcvPolarization"] = _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_set
    __swig_getmethods__["txRcvPolarization"] = _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_get
    if _newclass:
        txRcvPolarization = _swig_property(_six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_get, _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_set)
    __swig_setmethods__["rcvAPCIndex"] = _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_set
    __swig_getmethods__["rcvAPCIndex"] = _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_get
    if _newclass:
        rcvAPCIndex = _swig_property(_six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_get, _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCloneableChannelParameters self, ChannelParameters rhs) -> bool"""
        return _six_sicd.ScopedCloneableChannelParameters___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCloneableChannelParameters self, ChannelParameters rhs) -> bool"""
        return _six_sicd.ScopedCloneableChannelParameters___ne__(self, rhs)

ScopedCloneableChannelParameters_swigregister = _six_sicd.ScopedCloneableChannelParameters_swigregister
ScopedCloneableChannelParameters_swigregister(ScopedCloneableChannelParameters)


def makeScopedCloneableChannelParameters():
    """makeScopedCloneableChannelParameters() -> ScopedCloneableChannelParameters"""
    return _six_sicd.makeScopedCloneableChannelParameters()
class VectorScopedCloneableWaveformParameters(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableWaveformParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableWaveformParameters self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableWaveformParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableWaveformParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j) -> VectorScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j)
        __setslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j, VectorScopedCloneableWaveformParameters v)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i)
        __delitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice) -> VectorScopedCloneableWaveformParameters
        __getitem__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i) -> ScopedCloneableWaveformParameters
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice, VectorScopedCloneableWaveformParameters v)
        __setitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, ScopedCloneableWaveformParameters x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___setitem__(self, *args)


    def pop(self):
        """pop(VectorScopedCloneableWaveformParameters self) -> ScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_pop(self)


    def append(self, x):
        """append(VectorScopedCloneableWaveformParameters self, ScopedCloneableWaveformParameters x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableWaveformParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_empty(self)


    def size(self):
        """size(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_size(self)


    def swap(self, v):
        """swap(VectorScopedCloneableWaveformParameters self, VectorScopedCloneableWaveformParameters v)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_swap(self, v)


    def begin(self):
        """begin(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_begin(self)


    def end(self):
        """end(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_rend(self)


    def clear(self):
        """clear(VectorScopedCloneableWaveformParameters self)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_clear(self)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableWaveformParameters self)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator
        erase(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self) -> VectorScopedCloneableWaveformParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self, VectorScopedCloneableWaveformParameters arg2) -> VectorScopedCloneableWaveformParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type size) -> VectorScopedCloneableWaveformParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type size, ScopedCloneableWaveformParameters value) -> VectorScopedCloneableWaveformParameters
        """
        this = _six_sicd.new_VectorScopedCloneableWaveformParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableWaveformParameters self, ScopedCloneableWaveformParameters x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableWaveformParameters self) -> ScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_front(self)


    def back(self):
        """back(VectorScopedCloneableWaveformParameters self) -> ScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type n, ScopedCloneableWaveformParameters x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type new_size)
        resize(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type new_size, ScopedCloneableWaveformParameters x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator pos, ScopedCloneableWaveformParameters x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator
        insert(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type n, ScopedCloneableWaveformParameters x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableWaveformParameters
    __del__ = lambda self: None
VectorScopedCloneableWaveformParameters_swigregister = _six_sicd.VectorScopedCloneableWaveformParameters_swigregister
VectorScopedCloneableWaveformParameters_swigregister(VectorScopedCloneableWaveformParameters)

class VectorScopedCloneableTxStep(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableTxStep, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableTxStep self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableTxStep_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableTxStep self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableTxStep self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type"""
        return _six_sicd.VectorScopedCloneableTxStep___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j) -> VectorScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j)
        __setslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j, VectorScopedCloneableTxStep v)
        """
        return _six_sicd.VectorScopedCloneableTxStep___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableTxStep___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i)
        __delitem__(VectorScopedCloneableTxStep self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableTxStep___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableTxStep self, PySliceObject * slice) -> VectorScopedCloneableTxStep
        __getitem__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i) -> ScopedCloneableTxStep
        """
        return _six_sicd.VectorScopedCloneableTxStep___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableTxStep self, PySliceObject * slice, VectorScopedCloneableTxStep v)
        __setitem__(VectorScopedCloneableTxStep self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, ScopedCloneableTxStep x)
        """
        return _six_sicd.VectorScopedCloneableTxStep___setitem__(self, *args)


    def pop(self):
        """pop(VectorScopedCloneableTxStep self) -> ScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep_pop(self)


    def append(self, x):
        """append(VectorScopedCloneableTxStep self, ScopedCloneableTxStep x)"""
        return _six_sicd.VectorScopedCloneableTxStep_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableTxStep self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep_empty(self)


    def size(self):
        """size(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type"""
        return _six_sicd.VectorScopedCloneableTxStep_size(self)


    def swap(self, v):
        """swap(VectorScopedCloneableTxStep self, VectorScopedCloneableTxStep v)"""
        return _six_sicd.VectorScopedCloneableTxStep_swap(self, v)


    def begin(self):
        """begin(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_begin(self)


    def end(self):
        """end(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_rend(self)


    def clear(self):
        """clear(VectorScopedCloneableTxStep self)"""
        return _six_sicd.VectorScopedCloneableTxStep_clear(self)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableTxStep_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableTxStep self)"""
        return _six_sicd.VectorScopedCloneableTxStep_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator
        erase(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator
        """
        return _six_sicd.VectorScopedCloneableTxStep_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self) -> VectorScopedCloneableTxStep
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self, VectorScopedCloneableTxStep arg2) -> VectorScopedCloneableTxStep
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type size) -> VectorScopedCloneableTxStep
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type size, ScopedCloneableTxStep value) -> VectorScopedCloneableTxStep
        """
        this = _six_sicd.new_VectorScopedCloneableTxStep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableTxStep self, ScopedCloneableTxStep x)"""
        return _six_sicd.VectorScopedCloneableTxStep_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableTxStep self) -> ScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep_front(self)


    def back(self):
        """back(VectorScopedCloneableTxStep self) -> ScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type n, ScopedCloneableTxStep x)"""
        return _six_sicd.VectorScopedCloneableTxStep_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type new_size)
        resize(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type new_size, ScopedCloneableTxStep x)
        """
        return _six_sicd.VectorScopedCloneableTxStep_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator pos, ScopedCloneableTxStep x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator
        insert(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type n, ScopedCloneableTxStep x)
        """
        return _six_sicd.VectorScopedCloneableTxStep_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableTxStep_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type"""
        return _six_sicd.VectorScopedCloneableTxStep_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableTxStep
    __del__ = lambda self: None
VectorScopedCloneableTxStep_swigregister = _six_sicd.VectorScopedCloneableTxStep_swigregister
VectorScopedCloneableTxStep_swigregister(VectorScopedCloneableTxStep)

class vectorScopedClonableSegment(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorScopedClonableSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorScopedClonableSegment, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vectorScopedClonableSegment self) -> SwigPyIterator"""
        return _six_sicd.vectorScopedClonableSegment_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vectorScopedClonableSegment self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment___nonzero__(self)


    def __bool__(self):
        """__bool__(vectorScopedClonableSegment self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment___bool__(self)


    def __len__(self):
        """__len__(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type"""
        return _six_sicd.vectorScopedClonableSegment___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j) -> vectorScopedClonableSegment"""
        return _six_sicd.vectorScopedClonableSegment___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j)
        __setslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j, vectorScopedClonableSegment v)
        """
        return _six_sicd.vectorScopedClonableSegment___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j)"""
        return _six_sicd.vectorScopedClonableSegment___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i)
        __delitem__(vectorScopedClonableSegment self, PySliceObject * slice)
        """
        return _six_sicd.vectorScopedClonableSegment___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vectorScopedClonableSegment self, PySliceObject * slice) -> vectorScopedClonableSegment
        __getitem__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i) -> ScopedCloneableSegment
        """
        return _six_sicd.vectorScopedClonableSegment___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vectorScopedClonableSegment self, PySliceObject * slice, vectorScopedClonableSegment v)
        __setitem__(vectorScopedClonableSegment self, PySliceObject * slice)
        __setitem__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, ScopedCloneableSegment x)
        """
        return _six_sicd.vectorScopedClonableSegment___setitem__(self, *args)


    def pop(self):
        """pop(vectorScopedClonableSegment self) -> ScopedCloneableSegment"""
        return _six_sicd.vectorScopedClonableSegment_pop(self)


    def append(self, x):
        """append(vectorScopedClonableSegment self, ScopedCloneableSegment x)"""
        return _six_sicd.vectorScopedClonableSegment_append(self, x)


    def empty(self):
        """empty(vectorScopedClonableSegment self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment_empty(self)


    def size(self):
        """size(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type"""
        return _six_sicd.vectorScopedClonableSegment_size(self)


    def swap(self, v):
        """swap(vectorScopedClonableSegment self, vectorScopedClonableSegment v)"""
        return _six_sicd.vectorScopedClonableSegment_swap(self, v)


    def begin(self):
        """begin(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator"""
        return _six_sicd.vectorScopedClonableSegment_begin(self)


    def end(self):
        """end(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator"""
        return _six_sicd.vectorScopedClonableSegment_end(self)


    def rbegin(self):
        """rbegin(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::reverse_iterator"""
        return _six_sicd.vectorScopedClonableSegment_rbegin(self)


    def rend(self):
        """rend(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::reverse_iterator"""
        return _six_sicd.vectorScopedClonableSegment_rend(self)


    def clear(self):
        """clear(vectorScopedClonableSegment self)"""
        return _six_sicd.vectorScopedClonableSegment_clear(self)


    def get_allocator(self):
        """get_allocator(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::allocator_type"""
        return _six_sicd.vectorScopedClonableSegment_get_allocator(self)


    def pop_back(self):
        """pop_back(vectorScopedClonableSegment self)"""
        return _six_sicd.vectorScopedClonableSegment_pop_back(self)


    def erase(self, *args):
        """
        erase(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator
        erase(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator
        """
        return _six_sicd.vectorScopedClonableSegment_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self) -> vectorScopedClonableSegment
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self, vectorScopedClonableSegment arg2) -> vectorScopedClonableSegment
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type size) -> vectorScopedClonableSegment
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type size, ScopedCloneableSegment value) -> vectorScopedClonableSegment
        """
        this = _six_sicd.new_vectorScopedClonableSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vectorScopedClonableSegment self, ScopedCloneableSegment x)"""
        return _six_sicd.vectorScopedClonableSegment_push_back(self, x)


    def front(self):
        """front(vectorScopedClonableSegment self) -> ScopedCloneableSegment"""
        return _six_sicd.vectorScopedClonableSegment_front(self)


    def back(self):
        """back(vectorScopedClonableSegment self) -> ScopedCloneableSegment"""
        return _six_sicd.vectorScopedClonableSegment_back(self)


    def assign(self, n, x):
        """assign(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type n, ScopedCloneableSegment x)"""
        return _six_sicd.vectorScopedClonableSegment_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type new_size)
        resize(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type new_size, ScopedCloneableSegment x)
        """
        return _six_sicd.vectorScopedClonableSegment_resize(self, *args)


    def insert(self, *args):
        """
        insert(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator pos, ScopedCloneableSegment x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator
        insert(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type n, ScopedCloneableSegment x)
        """
        return _six_sicd.vectorScopedClonableSegment_insert(self, *args)


    def reserve(self, n):
        """reserve(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type n)"""
        return _six_sicd.vectorScopedClonableSegment_reserve(self, n)


    def capacity(self):
        """capacity(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type"""
        return _six_sicd.vectorScopedClonableSegment_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_vectorScopedClonableSegment
    __del__ = lambda self: None
vectorScopedClonableSegment_swigregister = _six_sicd.vectorScopedClonableSegment_swigregister
vectorScopedClonableSegment_swigregister(vectorScopedClonableSegment)

class VectorScopedCloneableChannelParameters(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableChannelParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableChannelParameters self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableChannelParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableChannelParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j) -> VectorScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j)
        __setslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j, VectorScopedCloneableChannelParameters v)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableChannelParameters___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i)
        __delitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice) -> VectorScopedCloneableChannelParameters
        __getitem__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i) -> ScopedCloneableChannelParameters
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice, VectorScopedCloneableChannelParameters v)
        __setitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, ScopedCloneableChannelParameters x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___setitem__(self, *args)


    def pop(self):
        """pop(VectorScopedCloneableChannelParameters self) -> ScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters_pop(self)


    def append(self, x):
        """append(VectorScopedCloneableChannelParameters self, ScopedCloneableChannelParameters x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableChannelParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters_empty(self)


    def size(self):
        """size(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_size(self)


    def swap(self, v):
        """swap(VectorScopedCloneableChannelParameters self, VectorScopedCloneableChannelParameters v)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_swap(self, v)


    def begin(self):
        """begin(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_begin(self)


    def end(self):
        """end(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_rend(self)


    def clear(self):
        """clear(VectorScopedCloneableChannelParameters self)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_clear(self)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableChannelParameters self)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator
        erase(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self) -> VectorScopedCloneableChannelParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self, VectorScopedCloneableChannelParameters arg2) -> VectorScopedCloneableChannelParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type size) -> VectorScopedCloneableChannelParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type size, ScopedCloneableChannelParameters value) -> VectorScopedCloneableChannelParameters
        """
        this = _six_sicd.new_VectorScopedCloneableChannelParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableChannelParameters self, ScopedCloneableChannelParameters x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableChannelParameters self) -> ScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters_front(self)


    def back(self):
        """back(VectorScopedCloneableChannelParameters self) -> ScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type n, ScopedCloneableChannelParameters x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type new_size)
        resize(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type new_size, ScopedCloneableChannelParameters x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator pos, ScopedCloneableChannelParameters x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator
        insert(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type n, ScopedCloneableChannelParameters x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableChannelParameters
    __del__ = lambda self: None
VectorScopedCloneableChannelParameters_swigregister = _six_sicd.VectorScopedCloneableChannelParameters_swigregister
VectorScopedCloneableChannelParameters_swigregister(VectorScopedCloneableChannelParameters)

class VectorInt(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorInt self) -> SwigPyIterator"""
        return _six_sicd.VectorInt_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorInt self) -> bool"""
        return _six_sicd.VectorInt___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorInt self) -> bool"""
        return _six_sicd.VectorInt___bool__(self)


    def __len__(self):
        """__len__(VectorInt self) -> std::vector< int >::size_type"""
        return _six_sicd.VectorInt___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> VectorInt"""
        return _six_sicd.VectorInt___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, VectorInt v)
        """
        return _six_sicd.VectorInt___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _six_sicd.VectorInt___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorInt self, std::vector< int >::difference_type i)
        __delitem__(VectorInt self, PySliceObject * slice)
        """
        return _six_sicd.VectorInt___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorInt self, PySliceObject * slice) -> VectorInt
        __getitem__(VectorInt self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _six_sicd.VectorInt___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorInt self, PySliceObject * slice, VectorInt v)
        __setitem__(VectorInt self, PySliceObject * slice)
        __setitem__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _six_sicd.VectorInt___setitem__(self, *args)


    def pop(self):
        """pop(VectorInt self) -> std::vector< int >::value_type"""
        return _six_sicd.VectorInt_pop(self)


    def append(self, x):
        """append(VectorInt self, std::vector< int >::value_type const & x)"""
        return _six_sicd.VectorInt_append(self, x)


    def empty(self):
        """empty(VectorInt self) -> bool"""
        return _six_sicd.VectorInt_empty(self)


    def size(self):
        """size(VectorInt self) -> std::vector< int >::size_type"""
        return _six_sicd.VectorInt_size(self)


    def swap(self, v):
        """swap(VectorInt self, VectorInt v)"""
        return _six_sicd.VectorInt_swap(self, v)


    def begin(self):
        """begin(VectorInt self) -> std::vector< int >::iterator"""
        return _six_sicd.VectorInt_begin(self)


    def end(self):
        """end(VectorInt self) -> std::vector< int >::iterator"""
        return _six_sicd.VectorInt_end(self)


    def rbegin(self):
        """rbegin(VectorInt self) -> std::vector< int >::reverse_iterator"""
        return _six_sicd.VectorInt_rbegin(self)


    def rend(self):
        """rend(VectorInt self) -> std::vector< int >::reverse_iterator"""
        return _six_sicd.VectorInt_rend(self)


    def clear(self):
        """clear(VectorInt self)"""
        return _six_sicd.VectorInt_clear(self)


    def get_allocator(self):
        """get_allocator(VectorInt self) -> std::vector< int >::allocator_type"""
        return _six_sicd.VectorInt_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorInt self)"""
        return _six_sicd.VectorInt_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorInt self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(VectorInt self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _six_sicd.VectorInt_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> VectorInt
        __init__(std::vector<(int)> self, VectorInt arg2) -> VectorInt
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> VectorInt
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> VectorInt
        """
        this = _six_sicd.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorInt self, std::vector< int >::value_type const & x)"""
        return _six_sicd.VectorInt_push_back(self, x)


    def front(self):
        """front(VectorInt self) -> std::vector< int >::value_type const &"""
        return _six_sicd.VectorInt_front(self)


    def back(self):
        """back(VectorInt self) -> std::vector< int >::value_type const &"""
        return _six_sicd.VectorInt_back(self)


    def assign(self, n, x):
        """assign(VectorInt self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _six_sicd.VectorInt_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorInt self, std::vector< int >::size_type new_size)
        resize(VectorInt self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _six_sicd.VectorInt_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorInt self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(VectorInt self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _six_sicd.VectorInt_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorInt self, std::vector< int >::size_type n)"""
        return _six_sicd.VectorInt_reserve(self, n)


    def capacity(self):
        """capacity(VectorInt self) -> std::vector< int >::size_type"""
        return _six_sicd.VectorInt_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _six_sicd.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class StdAutoRcvChannelProcessed(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RcvChannelProcessed)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRcvChannelProcessed, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RcvChannelProcessed)> self) -> StdAutoRcvChannelProcessed"""
        this = _six_sicd.new_StdAutoRcvChannelProcessed()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRcvChannelProcessed
    __del__ = lambda self: None
StdAutoRcvChannelProcessed_swigregister = _six_sicd.StdAutoRcvChannelProcessed_swigregister
StdAutoRcvChannelProcessed_swigregister(StdAutoRcvChannelProcessed)

class ScopedCopyableRcvChannelProcessed(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRcvChannelProcessed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> self, RcvChannelProcessed ptr=None) -> ScopedCopyableRcvChannelProcessed
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> self) -> ScopedCopyableRcvChannelProcessed
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> self, ScopedCopyableRcvChannelProcessed rhs) -> ScopedCopyableRcvChannelProcessed
        """
        this = _six_sicd.new_ScopedCopyableRcvChannelProcessed(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableRcvChannelProcessed___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRcvChannelProcessed self, RcvChannelProcessed ptr=None)
        reset(ScopedCopyableRcvChannelProcessed self)
        """
        return _six_sicd.ScopedCopyableRcvChannelProcessed_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRcvChannelProcessed
    __del__ = lambda self: None
    __swig_setmethods__["numChannelsProcessed"] = _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set
    __swig_getmethods__["numChannelsProcessed"] = _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get
    if _newclass:
        numChannelsProcessed = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get, _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set)
    __swig_setmethods__["prfScaleFactor"] = _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_set
    __swig_getmethods__["prfScaleFactor"] = _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_get
    if _newclass:
        prfScaleFactor = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_get, _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_set)
    __swig_setmethods__["channelIndex"] = _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_set
    __swig_getmethods__["channelIndex"] = _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_get
    if _newclass:
        channelIndex = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_get, _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableRcvChannelProcessed self, RcvChannelProcessed rhs) -> bool"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableRcvChannelProcessed self, RcvChannelProcessed rhs) -> bool"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___ne__(self, rhs)

ScopedCopyableRcvChannelProcessed_swigregister = _six_sicd.ScopedCopyableRcvChannelProcessed_swigregister
ScopedCopyableRcvChannelProcessed_swigregister(ScopedCopyableRcvChannelProcessed)


def makeScopedCopyableRcvChannelProcessed():
    """makeScopedCopyableRcvChannelProcessed() -> ScopedCopyableRcvChannelProcessed"""
    return _six_sicd.makeScopedCopyableRcvChannelProcessed()
class VectorProcessing(_object):
    """Proxy of C++ std::vector<(six::sicd::Processing)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorProcessing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorProcessing, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorProcessing self) -> SwigPyIterator"""
        return _six_sicd.VectorProcessing_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorProcessing self) -> bool"""
        return _six_sicd.VectorProcessing___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorProcessing self) -> bool"""
        return _six_sicd.VectorProcessing___bool__(self)


    def __len__(self):
        """__len__(VectorProcessing self) -> std::vector< six::sicd::Processing >::size_type"""
        return _six_sicd.VectorProcessing___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j) -> VectorProcessing"""
        return _six_sicd.VectorProcessing___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j)
        __setslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j, VectorProcessing v)
        """
        return _six_sicd.VectorProcessing___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j)"""
        return _six_sicd.VectorProcessing___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i)
        __delitem__(VectorProcessing self, PySliceObject * slice)
        """
        return _six_sicd.VectorProcessing___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorProcessing self, PySliceObject * slice) -> VectorProcessing
        __getitem__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i) -> Processing
        """
        return _six_sicd.VectorProcessing___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorProcessing self, PySliceObject * slice, VectorProcessing v)
        __setitem__(VectorProcessing self, PySliceObject * slice)
        __setitem__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, Processing x)
        """
        return _six_sicd.VectorProcessing___setitem__(self, *args)


    def pop(self):
        """pop(VectorProcessing self) -> Processing"""
        return _six_sicd.VectorProcessing_pop(self)


    def append(self, x):
        """append(VectorProcessing self, Processing x)"""
        return _six_sicd.VectorProcessing_append(self, x)


    def empty(self):
        """empty(VectorProcessing self) -> bool"""
        return _six_sicd.VectorProcessing_empty(self)


    def size(self):
        """size(VectorProcessing self) -> std::vector< six::sicd::Processing >::size_type"""
        return _six_sicd.VectorProcessing_size(self)


    def swap(self, v):
        """swap(VectorProcessing self, VectorProcessing v)"""
        return _six_sicd.VectorProcessing_swap(self, v)


    def begin(self):
        """begin(VectorProcessing self) -> std::vector< six::sicd::Processing >::iterator"""
        return _six_sicd.VectorProcessing_begin(self)


    def end(self):
        """end(VectorProcessing self) -> std::vector< six::sicd::Processing >::iterator"""
        return _six_sicd.VectorProcessing_end(self)


    def rbegin(self):
        """rbegin(VectorProcessing self) -> std::vector< six::sicd::Processing >::reverse_iterator"""
        return _six_sicd.VectorProcessing_rbegin(self)


    def rend(self):
        """rend(VectorProcessing self) -> std::vector< six::sicd::Processing >::reverse_iterator"""
        return _six_sicd.VectorProcessing_rend(self)


    def clear(self):
        """clear(VectorProcessing self)"""
        return _six_sicd.VectorProcessing_clear(self)


    def get_allocator(self):
        """get_allocator(VectorProcessing self) -> std::vector< six::sicd::Processing >::allocator_type"""
        return _six_sicd.VectorProcessing_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorProcessing self)"""
        return _six_sicd.VectorProcessing_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorProcessing self, std::vector< six::sicd::Processing >::iterator pos) -> std::vector< six::sicd::Processing >::iterator
        erase(VectorProcessing self, std::vector< six::sicd::Processing >::iterator first, std::vector< six::sicd::Processing >::iterator last) -> std::vector< six::sicd::Processing >::iterator
        """
        return _six_sicd.VectorProcessing_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::Processing)> self) -> VectorProcessing
        __init__(std::vector<(six::sicd::Processing)> self, VectorProcessing arg2) -> VectorProcessing
        __init__(std::vector<(six::sicd::Processing)> self, std::vector< six::sicd::Processing >::size_type size) -> VectorProcessing
        __init__(std::vector<(six::sicd::Processing)> self, std::vector< six::sicd::Processing >::size_type size, Processing value) -> VectorProcessing
        """
        this = _six_sicd.new_VectorProcessing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorProcessing self, Processing x)"""
        return _six_sicd.VectorProcessing_push_back(self, x)


    def front(self):
        """front(VectorProcessing self) -> Processing"""
        return _six_sicd.VectorProcessing_front(self)


    def back(self):
        """back(VectorProcessing self) -> Processing"""
        return _six_sicd.VectorProcessing_back(self)


    def assign(self, n, x):
        """assign(VectorProcessing self, std::vector< six::sicd::Processing >::size_type n, Processing x)"""
        return _six_sicd.VectorProcessing_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorProcessing self, std::vector< six::sicd::Processing >::size_type new_size)
        resize(VectorProcessing self, std::vector< six::sicd::Processing >::size_type new_size, Processing x)
        """
        return _six_sicd.VectorProcessing_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorProcessing self, std::vector< six::sicd::Processing >::iterator pos, Processing x) -> std::vector< six::sicd::Processing >::iterator
        insert(VectorProcessing self, std::vector< six::sicd::Processing >::iterator pos, std::vector< six::sicd::Processing >::size_type n, Processing x)
        """
        return _six_sicd.VectorProcessing_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorProcessing self, std::vector< six::sicd::Processing >::size_type n)"""
        return _six_sicd.VectorProcessing_reserve(self, n)


    def capacity(self):
        """capacity(VectorProcessing self) -> std::vector< six::sicd::Processing >::size_type"""
        return _six_sicd.VectorProcessing_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorProcessing
    __del__ = lambda self: None
VectorProcessing_swigregister = _six_sicd.VectorProcessing_swigregister
VectorProcessing_swigregister(VectorProcessing)

class StdAutoPolarizationCalibration(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::PolarizationCalibration)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoPolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoPolarizationCalibration, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::PolarizationCalibration)> self) -> StdAutoPolarizationCalibration"""
        this = _six_sicd.new_StdAutoPolarizationCalibration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoPolarizationCalibration
    __del__ = lambda self: None
StdAutoPolarizationCalibration_swigregister = _six_sicd.StdAutoPolarizationCalibration_swigregister
StdAutoPolarizationCalibration_swigregister(StdAutoPolarizationCalibration)

class ScopedCopyablePolarizationCalibration(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePolarizationCalibration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> self, PolarizationCalibration ptr=None) -> ScopedCopyablePolarizationCalibration
        __init__(mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> self) -> ScopedCopyablePolarizationCalibration
        __init__(mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> self, ScopedCopyablePolarizationCalibration rhs) -> ScopedCopyablePolarizationCalibration
        """
        this = _six_sicd.new_ScopedCopyablePolarizationCalibration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyablePolarizationCalibration___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyablePolarizationCalibration self, PolarizationCalibration ptr=None)
        reset(ScopedCopyablePolarizationCalibration self)
        """
        return _six_sicd.ScopedCopyablePolarizationCalibration_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePolarizationCalibration
    __del__ = lambda self: None
    __swig_setmethods__["hvAngleCompensationApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set
    __swig_getmethods__["hvAngleCompensationApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get
    if _newclass:
        hvAngleCompensationApplied = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get, _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set)
    __swig_setmethods__["distortionCorrectionApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set
    __swig_getmethods__["distortionCorrectionApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get
    if _newclass:
        distortionCorrectionApplied = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get, _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set)
    __swig_setmethods__["distortion"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortion_set
    __swig_getmethods__["distortion"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortion_get
    if _newclass:
        distortion = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_distortion_get, _six_sicd.ScopedCopyablePolarizationCalibration_distortion_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyablePolarizationCalibration self, PolarizationCalibration rhs) -> bool"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyablePolarizationCalibration self, PolarizationCalibration rhs) -> bool"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___ne__(self, rhs)

ScopedCopyablePolarizationCalibration_swigregister = _six_sicd.ScopedCopyablePolarizationCalibration_swigregister
ScopedCopyablePolarizationCalibration_swigregister(ScopedCopyablePolarizationCalibration)


def makeScopedCopyablePolarizationCalibration():
    """makeScopedCopyablePolarizationCalibration() -> ScopedCopyablePolarizationCalibration"""
    return _six_sicd.makeScopedCopyablePolarizationCalibration()
class StdAutoDistortion(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::Distortion)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoDistortion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoDistortion, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::Distortion)> self) -> StdAutoDistortion"""
        this = _six_sicd.new_StdAutoDistortion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoDistortion
    __del__ = lambda self: None
StdAutoDistortion_swigregister = _six_sicd.StdAutoDistortion_swigregister
StdAutoDistortion_swigregister(StdAutoDistortion)

class ScopedCopyableDistortion(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::Distortion)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableDistortion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableDistortion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::Distortion)> self, Distortion ptr=None) -> ScopedCopyableDistortion
        __init__(mem::ScopedCopyablePtr<(six::sicd::Distortion)> self) -> ScopedCopyableDistortion
        __init__(mem::ScopedCopyablePtr<(six::sicd::Distortion)> self, ScopedCopyableDistortion rhs) -> ScopedCopyableDistortion
        """
        this = _six_sicd.new_ScopedCopyableDistortion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableDistortion___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableDistortion self) -> Distortion"""
        return _six_sicd.ScopedCopyableDistortion_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableDistortion self) -> Distortion"""
        return _six_sicd.ScopedCopyableDistortion___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableDistortion self) -> Distortion"""
        return _six_sicd.ScopedCopyableDistortion___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableDistortion self, Distortion ptr=None)
        reset(ScopedCopyableDistortion self)
        """
        return _six_sicd.ScopedCopyableDistortion_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableDistortion
    __del__ = lambda self: None
    __swig_setmethods__["calibrationDate"] = _six_sicd.ScopedCopyableDistortion_calibrationDate_set
    __swig_getmethods__["calibrationDate"] = _six_sicd.ScopedCopyableDistortion_calibrationDate_get
    if _newclass:
        calibrationDate = _swig_property(_six_sicd.ScopedCopyableDistortion_calibrationDate_get, _six_sicd.ScopedCopyableDistortion_calibrationDate_set)
    __swig_setmethods__["a"] = _six_sicd.ScopedCopyableDistortion_a_set
    __swig_getmethods__["a"] = _six_sicd.ScopedCopyableDistortion_a_get
    if _newclass:
        a = _swig_property(_six_sicd.ScopedCopyableDistortion_a_get, _six_sicd.ScopedCopyableDistortion_a_set)
    __swig_setmethods__["f1"] = _six_sicd.ScopedCopyableDistortion_f1_set
    __swig_getmethods__["f1"] = _six_sicd.ScopedCopyableDistortion_f1_get
    if _newclass:
        f1 = _swig_property(_six_sicd.ScopedCopyableDistortion_f1_get, _six_sicd.ScopedCopyableDistortion_f1_set)
    __swig_setmethods__["q1"] = _six_sicd.ScopedCopyableDistortion_q1_set
    __swig_getmethods__["q1"] = _six_sicd.ScopedCopyableDistortion_q1_get
    if _newclass:
        q1 = _swig_property(_six_sicd.ScopedCopyableDistortion_q1_get, _six_sicd.ScopedCopyableDistortion_q1_set)
    __swig_setmethods__["q2"] = _six_sicd.ScopedCopyableDistortion_q2_set
    __swig_getmethods__["q2"] = _six_sicd.ScopedCopyableDistortion_q2_get
    if _newclass:
        q2 = _swig_property(_six_sicd.ScopedCopyableDistortion_q2_get, _six_sicd.ScopedCopyableDistortion_q2_set)
    __swig_setmethods__["f2"] = _six_sicd.ScopedCopyableDistortion_f2_set
    __swig_getmethods__["f2"] = _six_sicd.ScopedCopyableDistortion_f2_get
    if _newclass:
        f2 = _swig_property(_six_sicd.ScopedCopyableDistortion_f2_get, _six_sicd.ScopedCopyableDistortion_f2_set)
    __swig_setmethods__["q3"] = _six_sicd.ScopedCopyableDistortion_q3_set
    __swig_getmethods__["q3"] = _six_sicd.ScopedCopyableDistortion_q3_get
    if _newclass:
        q3 = _swig_property(_six_sicd.ScopedCopyableDistortion_q3_get, _six_sicd.ScopedCopyableDistortion_q3_set)
    __swig_setmethods__["q4"] = _six_sicd.ScopedCopyableDistortion_q4_set
    __swig_getmethods__["q4"] = _six_sicd.ScopedCopyableDistortion_q4_get
    if _newclass:
        q4 = _swig_property(_six_sicd.ScopedCopyableDistortion_q4_get, _six_sicd.ScopedCopyableDistortion_q4_set)
    __swig_setmethods__["gainErrorA"] = _six_sicd.ScopedCopyableDistortion_gainErrorA_set
    __swig_getmethods__["gainErrorA"] = _six_sicd.ScopedCopyableDistortion_gainErrorA_get
    if _newclass:
        gainErrorA = _swig_property(_six_sicd.ScopedCopyableDistortion_gainErrorA_get, _six_sicd.ScopedCopyableDistortion_gainErrorA_set)
    __swig_setmethods__["gainErrorF1"] = _six_sicd.ScopedCopyableDistortion_gainErrorF1_set
    __swig_getmethods__["gainErrorF1"] = _six_sicd.ScopedCopyableDistortion_gainErrorF1_get
    if _newclass:
        gainErrorF1 = _swig_property(_six_sicd.ScopedCopyableDistortion_gainErrorF1_get, _six_sicd.ScopedCopyableDistortion_gainErrorF1_set)
    __swig_setmethods__["gainErrorF2"] = _six_sicd.ScopedCopyableDistortion_gainErrorF2_set
    __swig_getmethods__["gainErrorF2"] = _six_sicd.ScopedCopyableDistortion_gainErrorF2_get
    if _newclass:
        gainErrorF2 = _swig_property(_six_sicd.ScopedCopyableDistortion_gainErrorF2_get, _six_sicd.ScopedCopyableDistortion_gainErrorF2_set)
    __swig_setmethods__["phaseErrorF1"] = _six_sicd.ScopedCopyableDistortion_phaseErrorF1_set
    __swig_getmethods__["phaseErrorF1"] = _six_sicd.ScopedCopyableDistortion_phaseErrorF1_get
    if _newclass:
        phaseErrorF1 = _swig_property(_six_sicd.ScopedCopyableDistortion_phaseErrorF1_get, _six_sicd.ScopedCopyableDistortion_phaseErrorF1_set)
    __swig_setmethods__["phaseErrorF2"] = _six_sicd.ScopedCopyableDistortion_phaseErrorF2_set
    __swig_getmethods__["phaseErrorF2"] = _six_sicd.ScopedCopyableDistortion_phaseErrorF2_get
    if _newclass:
        phaseErrorF2 = _swig_property(_six_sicd.ScopedCopyableDistortion_phaseErrorF2_get, _six_sicd.ScopedCopyableDistortion_phaseErrorF2_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableDistortion self, Distortion rhs) -> bool"""
        return _six_sicd.ScopedCopyableDistortion___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableDistortion self, Distortion rhs) -> bool"""
        return _six_sicd.ScopedCopyableDistortion___ne__(self, rhs)

ScopedCopyableDistortion_swigregister = _six_sicd.ScopedCopyableDistortion_swigregister
ScopedCopyableDistortion_swigregister(ScopedCopyableDistortion)


def makeScopedCopyableDistortion():
    """makeScopedCopyableDistortion() -> ScopedCopyableDistortion"""
    return _six_sicd.makeScopedCopyableDistortion()
class VectorMatchCollect(_object):
    """Proxy of C++ std::vector<(six::sicd::MatchCollect)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMatchCollect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMatchCollect, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorMatchCollect self) -> SwigPyIterator"""
        return _six_sicd.VectorMatchCollect_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorMatchCollect self) -> bool"""
        return _six_sicd.VectorMatchCollect___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorMatchCollect self) -> bool"""
        return _six_sicd.VectorMatchCollect___bool__(self)


    def __len__(self):
        """__len__(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::size_type"""
        return _six_sicd.VectorMatchCollect___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j) -> VectorMatchCollect"""
        return _six_sicd.VectorMatchCollect___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j)
        __setslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j, VectorMatchCollect v)
        """
        return _six_sicd.VectorMatchCollect___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j)"""
        return _six_sicd.VectorMatchCollect___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i)
        __delitem__(VectorMatchCollect self, PySliceObject * slice)
        """
        return _six_sicd.VectorMatchCollect___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorMatchCollect self, PySliceObject * slice) -> VectorMatchCollect
        __getitem__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i) -> MatchCollect
        """
        return _six_sicd.VectorMatchCollect___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorMatchCollect self, PySliceObject * slice, VectorMatchCollect v)
        __setitem__(VectorMatchCollect self, PySliceObject * slice)
        __setitem__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, MatchCollect x)
        """
        return _six_sicd.VectorMatchCollect___setitem__(self, *args)


    def pop(self):
        """pop(VectorMatchCollect self) -> MatchCollect"""
        return _six_sicd.VectorMatchCollect_pop(self)


    def append(self, x):
        """append(VectorMatchCollect self, MatchCollect x)"""
        return _six_sicd.VectorMatchCollect_append(self, x)


    def empty(self):
        """empty(VectorMatchCollect self) -> bool"""
        return _six_sicd.VectorMatchCollect_empty(self)


    def size(self):
        """size(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::size_type"""
        return _six_sicd.VectorMatchCollect_size(self)


    def swap(self, v):
        """swap(VectorMatchCollect self, VectorMatchCollect v)"""
        return _six_sicd.VectorMatchCollect_swap(self, v)


    def begin(self):
        """begin(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::iterator"""
        return _six_sicd.VectorMatchCollect_begin(self)


    def end(self):
        """end(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::iterator"""
        return _six_sicd.VectorMatchCollect_end(self)


    def rbegin(self):
        """rbegin(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::reverse_iterator"""
        return _six_sicd.VectorMatchCollect_rbegin(self)


    def rend(self):
        """rend(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::reverse_iterator"""
        return _six_sicd.VectorMatchCollect_rend(self)


    def clear(self):
        """clear(VectorMatchCollect self)"""
        return _six_sicd.VectorMatchCollect_clear(self)


    def get_allocator(self):
        """get_allocator(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::allocator_type"""
        return _six_sicd.VectorMatchCollect_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorMatchCollect self)"""
        return _six_sicd.VectorMatchCollect_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator pos) -> std::vector< six::sicd::MatchCollect >::iterator
        erase(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator first, std::vector< six::sicd::MatchCollect >::iterator last) -> std::vector< six::sicd::MatchCollect >::iterator
        """
        return _six_sicd.VectorMatchCollect_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::MatchCollect)> self) -> VectorMatchCollect
        __init__(std::vector<(six::sicd::MatchCollect)> self, VectorMatchCollect arg2) -> VectorMatchCollect
        __init__(std::vector<(six::sicd::MatchCollect)> self, std::vector< six::sicd::MatchCollect >::size_type size) -> VectorMatchCollect
        __init__(std::vector<(six::sicd::MatchCollect)> self, std::vector< six::sicd::MatchCollect >::size_type size, MatchCollect value) -> VectorMatchCollect
        """
        this = _six_sicd.new_VectorMatchCollect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorMatchCollect self, MatchCollect x)"""
        return _six_sicd.VectorMatchCollect_push_back(self, x)


    def front(self):
        """front(VectorMatchCollect self) -> MatchCollect"""
        return _six_sicd.VectorMatchCollect_front(self)


    def back(self):
        """back(VectorMatchCollect self) -> MatchCollect"""
        return _six_sicd.VectorMatchCollect_back(self)


    def assign(self, n, x):
        """assign(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type n, MatchCollect x)"""
        return _six_sicd.VectorMatchCollect_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type new_size)
        resize(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type new_size, MatchCollect x)
        """
        return _six_sicd.VectorMatchCollect_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator pos, MatchCollect x) -> std::vector< six::sicd::MatchCollect >::iterator
        insert(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator pos, std::vector< six::sicd::MatchCollect >::size_type n, MatchCollect x)
        """
        return _six_sicd.VectorMatchCollect_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type n)"""
        return _six_sicd.VectorMatchCollect_reserve(self, n)


    def capacity(self):
        """capacity(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::size_type"""
        return _six_sicd.VectorMatchCollect_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorMatchCollect
    __del__ = lambda self: None
VectorMatchCollect_swigregister = _six_sicd.VectorMatchCollect_swigregister
VectorMatchCollect_swigregister(VectorMatchCollect)

class VectorScopedCopyableMatchType(_object):
    """Proxy of C++ std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCopyableMatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCopyableMatchType, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCopyableMatchType self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCopyableMatchType_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCopyableMatchType self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCopyableMatchType self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type"""
        return _six_sicd.VectorScopedCopyableMatchType___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j) -> VectorScopedCopyableMatchType"""
        return _six_sicd.VectorScopedCopyableMatchType___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j)
        __setslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j, VectorScopedCopyableMatchType v)
        """
        return _six_sicd.VectorScopedCopyableMatchType___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j)"""
        return _six_sicd.VectorScopedCopyableMatchType___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i)
        __delitem__(VectorScopedCopyableMatchType self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCopyableMatchType___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCopyableMatchType self, PySliceObject * slice) -> VectorScopedCopyableMatchType
        __getitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i) -> ScopedCopyableMatchType
        """
        return _six_sicd.VectorScopedCopyableMatchType___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCopyableMatchType self, PySliceObject * slice, VectorScopedCopyableMatchType v)
        __setitem__(VectorScopedCopyableMatchType self, PySliceObject * slice)
        __setitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, ScopedCopyableMatchType x)
        """
        return _six_sicd.VectorScopedCopyableMatchType___setitem__(self, *args)


    def pop(self):
        """pop(VectorScopedCopyableMatchType self) -> ScopedCopyableMatchType"""
        return _six_sicd.VectorScopedCopyableMatchType_pop(self)


    def append(self, x):
        """append(VectorScopedCopyableMatchType self, ScopedCopyableMatchType x)"""
        return _six_sicd.VectorScopedCopyableMatchType_append(self, x)


    def empty(self):
        """empty(VectorScopedCopyableMatchType self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType_empty(self)


    def size(self):
        """size(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type"""
        return _six_sicd.VectorScopedCopyableMatchType_size(self)


    def swap(self, v):
        """swap(VectorScopedCopyableMatchType self, VectorScopedCopyableMatchType v)"""
        return _six_sicd.VectorScopedCopyableMatchType_swap(self, v)


    def begin(self):
        """begin(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_begin(self)


    def end(self):
        """end(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::reverse_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_rbegin(self)


    def rend(self):
        """rend(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::reverse_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_rend(self)


    def clear(self):
        """clear(VectorScopedCopyableMatchType self)"""
        return _six_sicd.VectorScopedCopyableMatchType_clear(self)


    def get_allocator(self):
        """get_allocator(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::allocator_type"""
        return _six_sicd.VectorScopedCopyableMatchType_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorScopedCopyableMatchType self)"""
        return _six_sicd.VectorScopedCopyableMatchType_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator pos) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator
        erase(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator first, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator last) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator
        """
        return _six_sicd.VectorScopedCopyableMatchType_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self) -> VectorScopedCopyableMatchType
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self, VectorScopedCopyableMatchType arg2) -> VectorScopedCopyableMatchType
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type size) -> VectorScopedCopyableMatchType
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type size, ScopedCopyableMatchType value) -> VectorScopedCopyableMatchType
        """
        this = _six_sicd.new_VectorScopedCopyableMatchType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCopyableMatchType self, ScopedCopyableMatchType x)"""
        return _six_sicd.VectorScopedCopyableMatchType_push_back(self, x)


    def front(self):
        """front(VectorScopedCopyableMatchType self) -> ScopedCopyableMatchType"""
        return _six_sicd.VectorScopedCopyableMatchType_front(self)


    def back(self):
        """back(VectorScopedCopyableMatchType self) -> ScopedCopyableMatchType"""
        return _six_sicd.VectorScopedCopyableMatchType_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type n, ScopedCopyableMatchType x)"""
        return _six_sicd.VectorScopedCopyableMatchType_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type new_size)
        resize(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type new_size, ScopedCopyableMatchType x)
        """
        return _six_sicd.VectorScopedCopyableMatchType_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator pos, ScopedCopyableMatchType x) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator
        insert(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator pos, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type n, ScopedCopyableMatchType x)
        """
        return _six_sicd.VectorScopedCopyableMatchType_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type n)"""
        return _six_sicd.VectorScopedCopyableMatchType_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type"""
        return _six_sicd.VectorScopedCopyableMatchType_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorScopedCopyableMatchType
    __del__ = lambda self: None
VectorScopedCopyableMatchType_swigregister = _six_sicd.VectorScopedCopyableMatchType_swigregister
VectorScopedCopyableMatchType_swigregister(VectorScopedCopyableMatchType)

class StdAutoRMAT(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RMAT)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRMAT, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RMAT)> self) -> StdAutoRMAT"""
        this = _six_sicd.new_StdAutoRMAT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRMAT
    __del__ = lambda self: None
StdAutoRMAT_swigregister = _six_sicd.StdAutoRMAT_swigregister
StdAutoRMAT_swigregister(StdAutoRMAT)

class ScopedCopyableRMAT(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RMAT)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMAT, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMAT)> self, RMAT ptr=None) -> ScopedCopyableRMAT
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMAT)> self) -> ScopedCopyableRMAT
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMAT)> self, ScopedCopyableRMAT rhs) -> ScopedCopyableRMAT
        """
        this = _six_sicd.new_ScopedCopyableRMAT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableRMAT___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableRMAT self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRMAT self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRMAT self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRMAT self, RMAT ptr=None)
        reset(ScopedCopyableRMAT self)
        """
        return _six_sicd.ScopedCopyableRMAT_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMAT
    __del__ = lambda self: None
    __swig_setmethods__["refTime"] = _six_sicd.ScopedCopyableRMAT_refTime_set
    __swig_getmethods__["refTime"] = _six_sicd.ScopedCopyableRMAT_refTime_get
    if _newclass:
        refTime = _swig_property(_six_sicd.ScopedCopyableRMAT_refTime_get, _six_sicd.ScopedCopyableRMAT_refTime_set)
    __swig_setmethods__["refPos"] = _six_sicd.ScopedCopyableRMAT_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.ScopedCopyableRMAT_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.ScopedCopyableRMAT_refPos_get, _six_sicd.ScopedCopyableRMAT_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.ScopedCopyableRMAT_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.ScopedCopyableRMAT_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.ScopedCopyableRMAT_refVel_get, _six_sicd.ScopedCopyableRMAT_refVel_set)
    __swig_setmethods__["distRefLinePoly"] = _six_sicd.ScopedCopyableRMAT_distRefLinePoly_set
    __swig_getmethods__["distRefLinePoly"] = _six_sicd.ScopedCopyableRMAT_distRefLinePoly_get
    if _newclass:
        distRefLinePoly = _swig_property(_six_sicd.ScopedCopyableRMAT_distRefLinePoly_get, _six_sicd.ScopedCopyableRMAT_distRefLinePoly_set)
    __swig_setmethods__["cosDCACOAPoly"] = _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_set
    __swig_getmethods__["cosDCACOAPoly"] = _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_get
    if _newclass:
        cosDCACOAPoly = _swig_property(_six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_get, _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_set)
    __swig_setmethods__["kx1"] = _six_sicd.ScopedCopyableRMAT_kx1_set
    __swig_getmethods__["kx1"] = _six_sicd.ScopedCopyableRMAT_kx1_get
    if _newclass:
        kx1 = _swig_property(_six_sicd.ScopedCopyableRMAT_kx1_get, _six_sicd.ScopedCopyableRMAT_kx1_set)
    __swig_setmethods__["kx2"] = _six_sicd.ScopedCopyableRMAT_kx2_set
    __swig_getmethods__["kx2"] = _six_sicd.ScopedCopyableRMAT_kx2_get
    if _newclass:
        kx2 = _swig_property(_six_sicd.ScopedCopyableRMAT_kx2_get, _six_sicd.ScopedCopyableRMAT_kx2_set)
    __swig_setmethods__["ky1"] = _six_sicd.ScopedCopyableRMAT_ky1_set
    __swig_getmethods__["ky1"] = _six_sicd.ScopedCopyableRMAT_ky1_get
    if _newclass:
        ky1 = _swig_property(_six_sicd.ScopedCopyableRMAT_ky1_get, _six_sicd.ScopedCopyableRMAT_ky1_set)
    __swig_setmethods__["ky2"] = _six_sicd.ScopedCopyableRMAT_ky2_set
    __swig_getmethods__["ky2"] = _six_sicd.ScopedCopyableRMAT_ky2_get
    if _newclass:
        ky2 = _swig_property(_six_sicd.ScopedCopyableRMAT_ky2_get, _six_sicd.ScopedCopyableRMAT_ky2_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.ScopedCopyableRMAT_dopConeAngleRef_get, _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableRMAT self, RMAT rhs) -> bool"""
        return _six_sicd.ScopedCopyableRMAT___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableRMAT self, RMAT rhs) -> bool"""
        return _six_sicd.ScopedCopyableRMAT___ne__(self, rhs)


    def fillDerivedFields(self, scp):
        """fillDerivedFields(ScopedCopyableRMAT self, Vector3 scp)"""
        return _six_sicd.ScopedCopyableRMAT_fillDerivedFields(self, scp)


    def fillDefaultFields(self, scpcoa):
        """fillDefaultFields(ScopedCopyableRMAT self, SCPCOA scpcoa)"""
        return _six_sicd.ScopedCopyableRMAT_fillDefaultFields(self, scpcoa)


    def validate(self, scp, log):
        """validate(ScopedCopyableRMAT self, Vector3 scp, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableRMAT_validate(self, scp, log)


    def look(self, scp):
        """look(ScopedCopyableRMAT self, Vector3 scp) -> int"""
        return _six_sicd.ScopedCopyableRMAT_look(self, scp)


    def uYAT(self, scp):
        """uYAT(ScopedCopyableRMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMAT_uYAT(self, scp)


    def spn(self, scp):
        """spn(ScopedCopyableRMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMAT_spn(self, scp)


    def uXCT(self, scp):
        """uXCT(ScopedCopyableRMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMAT_uXCT(self, scp)


    def uLOS(self, scp):
        """uLOS(ScopedCopyableRMAT self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMAT_uLOS(self, scp)

ScopedCopyableRMAT_swigregister = _six_sicd.ScopedCopyableRMAT_swigregister
ScopedCopyableRMAT_swigregister(ScopedCopyableRMAT)


def makeScopedCopyableRMAT():
    """makeScopedCopyableRMAT() -> ScopedCopyableRMAT"""
    return _six_sicd.makeScopedCopyableRMAT()
class StdAutoRMCR(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::RMCR)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoRMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoRMCR, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::RMCR)> self) -> StdAutoRMCR"""
        this = _six_sicd.new_StdAutoRMCR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoRMCR
    __del__ = lambda self: None
StdAutoRMCR_swigregister = _six_sicd.StdAutoRMCR_swigregister
StdAutoRMCR_swigregister(StdAutoRMCR)

class ScopedCopyableRMCR(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RMCR)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMCR, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMCR)> self, RMCR ptr=None) -> ScopedCopyableRMCR
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMCR)> self) -> ScopedCopyableRMCR
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMCR)> self, ScopedCopyableRMCR rhs) -> ScopedCopyableRMCR
        """
        this = _six_sicd.new_ScopedCopyableRMCR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableRMCR___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableRMCR self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRMCR self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRMCR self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRMCR self, RMCR ptr=None)
        reset(ScopedCopyableRMCR self)
        """
        return _six_sicd.ScopedCopyableRMCR_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMCR
    __del__ = lambda self: None
    __swig_setmethods__["refPos"] = _six_sicd.ScopedCopyableRMCR_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.ScopedCopyableRMCR_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.ScopedCopyableRMCR_refPos_get, _six_sicd.ScopedCopyableRMCR_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.ScopedCopyableRMCR_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.ScopedCopyableRMCR_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.ScopedCopyableRMCR_refVel_get, _six_sicd.ScopedCopyableRMCR_refVel_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.ScopedCopyableRMCR_dopConeAngleRef_get, _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableRMCR self, RMCR rhs) -> bool"""
        return _six_sicd.ScopedCopyableRMCR___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableRMCR self, RMCR rhs) -> bool"""
        return _six_sicd.ScopedCopyableRMCR___ne__(self, rhs)


    def fillDerivedFields(self, scp):
        """fillDerivedFields(ScopedCopyableRMCR self, Vector3 scp)"""
        return _six_sicd.ScopedCopyableRMCR_fillDerivedFields(self, scp)


    def fillDefaultFields(self, scpcoa):
        """fillDefaultFields(ScopedCopyableRMCR self, SCPCOA scpcoa)"""
        return _six_sicd.ScopedCopyableRMCR_fillDefaultFields(self, scpcoa)


    def validate(self, scp, log):
        """validate(ScopedCopyableRMCR self, Vector3 scp, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableRMCR_validate(self, scp, log)


    def uXRG(self, scp):
        """uXRG(ScopedCopyableRMCR self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMCR_uXRG(self, scp)


    def uYCR(self, scp):
        """uYCR(ScopedCopyableRMCR self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMCR_uYCR(self, scp)


    def spn(self, scp):
        """spn(ScopedCopyableRMCR self, Vector3 scp) -> Vector3"""
        return _six_sicd.ScopedCopyableRMCR_spn(self, scp)


    def look(self, scp):
        """look(ScopedCopyableRMCR self, Vector3 scp) -> int"""
        return _six_sicd.ScopedCopyableRMCR_look(self, scp)

ScopedCopyableRMCR_swigregister = _six_sicd.ScopedCopyableRMCR_swigregister
ScopedCopyableRMCR_swigregister(ScopedCopyableRMCR)


def makeScopedCopyableRMCR():
    """makeScopedCopyableRMCR() -> ScopedCopyableRMCR"""
    return _six_sicd.makeScopedCopyableRMCR()
class StdAutoINCA(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::INCA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoINCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoINCA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::INCA)> self) -> StdAutoINCA"""
        this = _six_sicd.new_StdAutoINCA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoINCA
    __del__ = lambda self: None
StdAutoINCA_swigregister = _six_sicd.StdAutoINCA_swigregister
StdAutoINCA_swigregister(StdAutoINCA)

class ScopedCopyableINCA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::INCA)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableINCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableINCA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::INCA)> self, INCA ptr=None) -> ScopedCopyableINCA
        __init__(mem::ScopedCopyablePtr<(six::sicd::INCA)> self) -> ScopedCopyableINCA
        __init__(mem::ScopedCopyablePtr<(six::sicd::INCA)> self, ScopedCopyableINCA rhs) -> ScopedCopyableINCA
        """
        this = _six_sicd.new_ScopedCopyableINCA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableINCA___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableINCA self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableINCA self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableINCA self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableINCA self, INCA ptr=None)
        reset(ScopedCopyableINCA self)
        """
        return _six_sicd.ScopedCopyableINCA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableINCA
    __del__ = lambda self: None
    __swig_setmethods__["timeCAPoly"] = _six_sicd.ScopedCopyableINCA_timeCAPoly_set
    __swig_getmethods__["timeCAPoly"] = _six_sicd.ScopedCopyableINCA_timeCAPoly_get
    if _newclass:
        timeCAPoly = _swig_property(_six_sicd.ScopedCopyableINCA_timeCAPoly_get, _six_sicd.ScopedCopyableINCA_timeCAPoly_set)
    __swig_setmethods__["rangeCA"] = _six_sicd.ScopedCopyableINCA_rangeCA_set
    __swig_getmethods__["rangeCA"] = _six_sicd.ScopedCopyableINCA_rangeCA_get
    if _newclass:
        rangeCA = _swig_property(_six_sicd.ScopedCopyableINCA_rangeCA_get, _six_sicd.ScopedCopyableINCA_rangeCA_set)
    __swig_setmethods__["freqZero"] = _six_sicd.ScopedCopyableINCA_freqZero_set
    __swig_getmethods__["freqZero"] = _six_sicd.ScopedCopyableINCA_freqZero_get
    if _newclass:
        freqZero = _swig_property(_six_sicd.ScopedCopyableINCA_freqZero_get, _six_sicd.ScopedCopyableINCA_freqZero_set)
    __swig_setmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_set
    __swig_getmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_get
    if _newclass:
        dopplerRateScaleFactorPoly = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_get, _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_set)
    __swig_setmethods__["dopplerCentroidPoly"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_set
    __swig_getmethods__["dopplerCentroidPoly"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_get
    if _newclass:
        dopplerCentroidPoly = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_get, _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_set)
    __swig_setmethods__["dopplerCentroidCOA"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_set
    __swig_getmethods__["dopplerCentroidCOA"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_get
    if _newclass:
        dopplerCentroidCOA = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_get, _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableINCA self, INCA rhs) -> bool"""
        return _six_sicd.ScopedCopyableINCA___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableINCA self, INCA rhs) -> bool"""
        return _six_sicd.ScopedCopyableINCA___ne__(self, rhs)


    def fillDerivedFields(self, scp, position):
        """fillDerivedFields(ScopedCopyableINCA self, Vector3 scp, Position position)"""
        return _six_sicd.ScopedCopyableINCA_fillDerivedFields(self, scp, position)


    def caPos(self, arpPoly):
        """caPos(ScopedCopyableINCA self, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.ScopedCopyableINCA_caPos(self, arpPoly)


    def caVel(self, arpPoly):
        """caVel(ScopedCopyableINCA self, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.ScopedCopyableINCA_caVel(self, arpPoly)


    def uRG(self, scp, arpPoly):
        """uRG(ScopedCopyableINCA self, Vector3 scp, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.ScopedCopyableINCA_uRG(self, scp, arpPoly)


    def uAZ(self, scp, arpPoly):
        """uAZ(ScopedCopyableINCA self, Vector3 scp, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.ScopedCopyableINCA_uAZ(self, scp, arpPoly)


    def spn(self, scp, arpPoly):
        """spn(ScopedCopyableINCA self, Vector3 scp, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.ScopedCopyableINCA_spn(self, scp, arpPoly)


    def look(self, scp, arpPoly):
        """look(ScopedCopyableINCA self, Vector3 scp, PolyVector3 arpPoly) -> int"""
        return _six_sicd.ScopedCopyableINCA_look(self, scp, arpPoly)


    def left(self, arpPoly):
        """left(ScopedCopyableINCA self, PolyVector3 arpPoly) -> Vector3"""
        return _six_sicd.ScopedCopyableINCA_left(self, arpPoly)


    def fillDefaultFields(self, fc):
        """fillDefaultFields(ScopedCopyableINCA self, double fc)"""
        return _six_sicd.ScopedCopyableINCA_fillDefaultFields(self, fc)


    def validate(self, collectionInformation, scp, arpPoly, fc, log):
        """validate(ScopedCopyableINCA self, CollectionInformation collectionInformation, Vector3 scp, PolyVector3 arpPoly, double fc, logging::Logger & log) -> bool"""
        return _six_sicd.ScopedCopyableINCA_validate(self, collectionInformation, scp, arpPoly, fc, log)

ScopedCopyableINCA_swigregister = _six_sicd.ScopedCopyableINCA_swigregister
ScopedCopyableINCA_swigregister(ScopedCopyableINCA)


def makeScopedCopyableINCA():
    """makeScopedCopyableINCA() -> ScopedCopyableINCA"""
    return _six_sicd.makeScopedCopyableINCA()
class StdAutoInterPulsePeriod(_object):
    """Proxy of C++ std::auto_ptr<(six::sicd::InterPulsePeriod)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoInterPulsePeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoInterPulsePeriod, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::sicd::InterPulsePeriod)> self) -> StdAutoInterPulsePeriod"""
        this = _six_sicd.new_StdAutoInterPulsePeriod()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_StdAutoInterPulsePeriod
    __del__ = lambda self: None
StdAutoInterPulsePeriod_swigregister = _six_sicd.StdAutoInterPulsePeriod_swigregister
StdAutoInterPulsePeriod_swigregister(StdAutoInterPulsePeriod)

class ScopedCopyableInterPulsePeriod(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::InterPulsePeriod)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableInterPulsePeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableInterPulsePeriod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::InterPulsePeriod)> self, InterPulsePeriod ptr=None) -> ScopedCopyableInterPulsePeriod
        __init__(mem::ScopedCopyablePtr<(six::sicd::InterPulsePeriod)> self) -> ScopedCopyableInterPulsePeriod
        __init__(mem::ScopedCopyablePtr<(six::sicd::InterPulsePeriod)> self, ScopedCopyableInterPulsePeriod rhs) -> ScopedCopyableInterPulsePeriod
        """
        this = _six_sicd.new_ScopedCopyableInterPulsePeriod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _six_sicd.ScopedCopyableInterPulsePeriod___nonzero__(self)
    __bool__ = __nonzero__



    def get(self):
        """get(ScopedCopyableInterPulsePeriod self) -> InterPulsePeriod"""
        return _six_sicd.ScopedCopyableInterPulsePeriod_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableInterPulsePeriod self) -> InterPulsePeriod"""
        return _six_sicd.ScopedCopyableInterPulsePeriod___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableInterPulsePeriod self) -> InterPulsePeriod"""
        return _six_sicd.ScopedCopyableInterPulsePeriod___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableInterPulsePeriod self, InterPulsePeriod ptr=None)
        reset(ScopedCopyableInterPulsePeriod self)
        """
        return _six_sicd.ScopedCopyableInterPulsePeriod_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableInterPulsePeriod
    __del__ = lambda self: None
    __swig_setmethods__["sets"] = _six_sicd.ScopedCopyableInterPulsePeriod_sets_set
    __swig_getmethods__["sets"] = _six_sicd.ScopedCopyableInterPulsePeriod_sets_get
    if _newclass:
        sets = _swig_property(_six_sicd.ScopedCopyableInterPulsePeriod_sets_get, _six_sicd.ScopedCopyableInterPulsePeriod_sets_set)

    def __eq__(self, rhs):
        """__eq__(ScopedCopyableInterPulsePeriod self, InterPulsePeriod rhs) -> bool"""
        return _six_sicd.ScopedCopyableInterPulsePeriod___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(ScopedCopyableInterPulsePeriod self, InterPulsePeriod rhs) -> bool"""
        return _six_sicd.ScopedCopyableInterPulsePeriod___ne__(self, rhs)

ScopedCopyableInterPulsePeriod_swigregister = _six_sicd.ScopedCopyableInterPulsePeriod_swigregister
ScopedCopyableInterPulsePeriod_swigregister(ScopedCopyableInterPulsePeriod)


def makeScopedCopyableInterPulsePeriod():
    """makeScopedCopyableInterPulsePeriod() -> ScopedCopyableInterPulsePeriod"""
    return _six_sicd.makeScopedCopyableInterPulsePeriod()
class VectorTimelineSet(_object):
    """Proxy of C++ std::vector<(six::sicd::TimelineSet)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorTimelineSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorTimelineSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorTimelineSet self) -> SwigPyIterator"""
        return _six_sicd.VectorTimelineSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorTimelineSet self) -> bool"""
        return _six_sicd.VectorTimelineSet___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorTimelineSet self) -> bool"""
        return _six_sicd.VectorTimelineSet___bool__(self)


    def __len__(self):
        """__len__(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::size_type"""
        return _six_sicd.VectorTimelineSet___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i, std::vector< six::sicd::TimelineSet >::difference_type j) -> VectorTimelineSet"""
        return _six_sicd.VectorTimelineSet___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i, std::vector< six::sicd::TimelineSet >::difference_type j)
        __setslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i, std::vector< six::sicd::TimelineSet >::difference_type j, VectorTimelineSet v)
        """
        return _six_sicd.VectorTimelineSet___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i, std::vector< six::sicd::TimelineSet >::difference_type j)"""
        return _six_sicd.VectorTimelineSet___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i)
        __delitem__(VectorTimelineSet self, PySliceObject * slice)
        """
        return _six_sicd.VectorTimelineSet___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorTimelineSet self, PySliceObject * slice) -> VectorTimelineSet
        __getitem__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i) -> TimelineSet
        """
        return _six_sicd.VectorTimelineSet___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorTimelineSet self, PySliceObject * slice, VectorTimelineSet v)
        __setitem__(VectorTimelineSet self, PySliceObject * slice)
        __setitem__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::difference_type i, TimelineSet x)
        """
        return _six_sicd.VectorTimelineSet___setitem__(self, *args)


    def pop(self):
        """pop(VectorTimelineSet self) -> TimelineSet"""
        return _six_sicd.VectorTimelineSet_pop(self)


    def append(self, x):
        """append(VectorTimelineSet self, TimelineSet x)"""
        return _six_sicd.VectorTimelineSet_append(self, x)


    def empty(self):
        """empty(VectorTimelineSet self) -> bool"""
        return _six_sicd.VectorTimelineSet_empty(self)


    def size(self):
        """size(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::size_type"""
        return _six_sicd.VectorTimelineSet_size(self)


    def swap(self, v):
        """swap(VectorTimelineSet self, VectorTimelineSet v)"""
        return _six_sicd.VectorTimelineSet_swap(self, v)


    def begin(self):
        """begin(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::iterator"""
        return _six_sicd.VectorTimelineSet_begin(self)


    def end(self):
        """end(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::iterator"""
        return _six_sicd.VectorTimelineSet_end(self)


    def rbegin(self):
        """rbegin(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::reverse_iterator"""
        return _six_sicd.VectorTimelineSet_rbegin(self)


    def rend(self):
        """rend(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::reverse_iterator"""
        return _six_sicd.VectorTimelineSet_rend(self)


    def clear(self):
        """clear(VectorTimelineSet self)"""
        return _six_sicd.VectorTimelineSet_clear(self)


    def get_allocator(self):
        """get_allocator(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::allocator_type"""
        return _six_sicd.VectorTimelineSet_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorTimelineSet self)"""
        return _six_sicd.VectorTimelineSet_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::iterator pos) -> std::vector< six::sicd::TimelineSet >::iterator
        erase(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::iterator first, std::vector< six::sicd::TimelineSet >::iterator last) -> std::vector< six::sicd::TimelineSet >::iterator
        """
        return _six_sicd.VectorTimelineSet_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::TimelineSet)> self) -> VectorTimelineSet
        __init__(std::vector<(six::sicd::TimelineSet)> self, VectorTimelineSet arg2) -> VectorTimelineSet
        __init__(std::vector<(six::sicd::TimelineSet)> self, std::vector< six::sicd::TimelineSet >::size_type size) -> VectorTimelineSet
        __init__(std::vector<(six::sicd::TimelineSet)> self, std::vector< six::sicd::TimelineSet >::size_type size, TimelineSet value) -> VectorTimelineSet
        """
        this = _six_sicd.new_VectorTimelineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorTimelineSet self, TimelineSet x)"""
        return _six_sicd.VectorTimelineSet_push_back(self, x)


    def front(self):
        """front(VectorTimelineSet self) -> TimelineSet"""
        return _six_sicd.VectorTimelineSet_front(self)


    def back(self):
        """back(VectorTimelineSet self) -> TimelineSet"""
        return _six_sicd.VectorTimelineSet_back(self)


    def assign(self, n, x):
        """assign(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::size_type n, TimelineSet x)"""
        return _six_sicd.VectorTimelineSet_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::size_type new_size)
        resize(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::size_type new_size, TimelineSet x)
        """
        return _six_sicd.VectorTimelineSet_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::iterator pos, TimelineSet x) -> std::vector< six::sicd::TimelineSet >::iterator
        insert(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::iterator pos, std::vector< six::sicd::TimelineSet >::size_type n, TimelineSet x)
        """
        return _six_sicd.VectorTimelineSet_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorTimelineSet self, std::vector< six::sicd::TimelineSet >::size_type n)"""
        return _six_sicd.VectorTimelineSet_reserve(self, n)


    def capacity(self):
        """capacity(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet >::size_type"""
        return _six_sicd.VectorTimelineSet_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _six_sicd.delete_VectorTimelineSet
    __del__ = lambda self: None
VectorTimelineSet_swigregister = _six_sicd.VectorTimelineSet_swigregister
VectorTimelineSet_swigregister(VectorTimelineSet)


def getWidebandData(sicdPathname, schemaPaths, complexData, arrayBuffer):
    """getWidebandData(std::string sicdPathname, VectorString schemaPaths, ComplexData complexData, long long arrayBuffer)"""
    return _six_sicd.getWidebandData(sicdPathname, schemaPaths, complexData, arrayBuffer)

def getWidebandRegion(sicdPathname, schemaPaths, complexData, startRow, numRows, startCol, numCols, arrayBuffer):
    """getWidebandRegion(std::string sicdPathname, VectorString schemaPaths, ComplexData complexData, long long startRow, long long numRows, long long startCol, long long numCols, long long arrayBuffer)"""
    return _six_sicd.getWidebandRegion(sicdPathname, schemaPaths, complexData, startRow, numRows, startCol, numCols, arrayBuffer)

import numpy as np
from coda.coda_types import VectorString
from coda.coda_io import FileOutputStream
from coda.xml_lite import *

def read(inputPathname, schemaPaths = VectorString()):
    complexData = SixSicdUtilities.getComplexData(inputPathname, schemaPaths)

#Numpy has no concept of complex integers, so dtype will always be complex64
    widebandData = np.empty(shape = (complexData.getNumRows(), complexData.getNumCols()), dtype = "complex64")
    widebandBuffer, ro = widebandData.__array_interface__["data"]

    getWidebandData(inputPathname, schemaPaths, complexData, widebandBuffer)

    return widebandData, complexData

def readRegion(inputPathname, startRow, numRows, startCol, numCols, schemaPaths = VectorString()):
    complexData = SixSicdUtilities.getComplexData(inputPathname, schemaPaths)

    widebandData = np.empty(shape = (numRows, numCols), dtype = "complex64")
    widebandBuffer, ro = widebandData.__array_interface__["data"]

    getWidebandRegion(inputPathname, schemaPaths, complexData, startRow, numRows, startCol, numCols, widebandBuffer)

    return widebandData, complexData

def readRecord(pathname):
    record = _readRecord(pathname)
    attributes = dir(record)
    for attribute in attributes:
        if (attribute.startswith('move') or
                attribute.startswith('remove') or
                attribute.startswith('set') or
                attribute.startswith('new')):
            delattr(record.__class__, attribute)
    return record

def writeAsNITF(outFile, schemaPaths, complexData, image):
    writeNITF(outFile, schemaPaths, complexData,
        image.__array_interface__["data"][0])

def readFromNITF(pathname, schemaPaths=VectorString()):
    return readNITF(pathname, schemaPaths)

class SICDWriteControl(_object):
    """Proxy of C++ six::sicd::SICDWriteControl class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SICDWriteControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SICDWriteControl, name)
    __repr__ = _swig_repr

    def __init__(self, outputPathname, schemaPaths):
        """__init__(six::sicd::SICDWriteControl self, std::string const & outputPathname, VectorString schemaPaths) -> SICDWriteControl"""
        this = _six_sicd.new_SICDWriteControl(outputPathname, schemaPaths)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initialize(self, *args):
        """
        initialize(SICDWriteControl self)
        initialize(SICDWriteControl self, ComplexData data)
        """
        return _six_sicd.SICDWriteControl_initialize(self, *args)


    def save(self, *args):
        """
        save(SICDWriteControl self)
        save(SICDWriteControl self, void * imageData, RowColSizeT offset, RowColSizeT dims, bool restoreData=True)
        save(SICDWriteControl self, void * imageData, RowColSizeT offset, RowColSizeT dims)
        """
        return _six_sicd.SICDWriteControl_save(self, *args)


    def close(self):
        """close(SICDWriteControl self)"""
        return _six_sicd.SICDWriteControl_close(self)


    def write(self, data, offset):
        """write(SICDWriteControl self, PyObject * data, RowColSizeT offset)"""
        return _six_sicd.SICDWriteControl_write(self, data, offset)


    def initXMLControlRegistry(self, xmlRegistry):
        """initXMLControlRegistry(SICDWriteControl self, XMLControlRegistry xmlRegistry)"""
        return _six_sicd.SICDWriteControl_initXMLControlRegistry(self, xmlRegistry)

    __swig_destroy__ = _six_sicd.delete_SICDWriteControl
    __del__ = lambda self: None
SICDWriteControl_swigregister = _six_sicd.SICDWriteControl_swigregister
SICDWriteControl_swigregister(SICDWriteControl)

# This file is compatible with both classic and new-style classes.


